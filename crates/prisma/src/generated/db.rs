// Code generated by Prisma Client Rust. DO NOT EDIT

pub static DATAMODEL_STR: &'static str =
    include_str!("/home/calogero/gestionale_imprese-2/crates/prisma/schema.prisma");
static DATABASE_STR: &'static str = "postgresql";
use ::prisma_client_rust::migrations::include_dir;
pub static MIGRATIONS_DIR: &::prisma_client_rust::migrations::include_dir::Dir = &::prisma_client_rust::migrations::include_dir::include_dir!(
    "/home/calogero/gestionale_imprese-2/crates/prisma/migrations"
);
pub async fn new_client() -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder().build().await
}
pub async fn new_client_with_url(
    url: &str,
) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder()
        .with_url(url.to_string())
        .build()
        .await
}
pub mod autovetture {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Autovetture";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod descrizione {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "descrizione";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDescrizione(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Descrizione(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Descrizione(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::Descrizione(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            Descrizione,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Descrizione(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Descrizione(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod modello {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "modello";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetModello(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Modello(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Modello(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Modello(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Modello,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Modello(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Modello(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod targa {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "targa";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTarga(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Targa(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Targa(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Targa(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Targa,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Targa(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Targa(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod tipo_proprieta {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "tipo_proprieta";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTipoProprieta(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::TipoProprieta(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::TipoProprieta(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::TipoProprieta(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            TipoProprieta,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementTipoProprieta(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementTipoProprieta(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyTipoProprieta(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideTipoProprieta(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::TipoProprieta(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::TipoProprieta(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod proprieta {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "proprieta";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetProprieta(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Proprieta(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Proprieta(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Proprieta(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Proprieta,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Proprieta(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Proprieta(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetImpresaId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ImpresaId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ImpresaId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::ImpresaId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            ImpresaId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementImpresaId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementImpresaId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyImpresaId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideImpresaId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpresaId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpresaId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod data_dimissioni {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "data_dimissioni";
        pub struct Set(
            pub ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        );
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDataDimissioni(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::DataDimissioni(v)
            }
        }
        pub fn set<T: From<Set>>(
            value: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
        ) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::DataDimissioni(direction)
        }
        pub fn equals(
            value: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
        ) -> WhereParam {
            WhereParam::DataDimissioni(_prisma::read_filters::DateTimeFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::DateTimeFilter,
            DataDimissioni,
            {
                fn in_vec(
                    _: Vec<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> InVec;
                fn not_in_vec(
                    _: Vec<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> NotInVec;
                fn lt(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Lt;
                fn lte(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Lte;
                fn gt(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Gt;
                fn gte(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Gte;
                fn not(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::DataDimissioni(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::DataDimissioni(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod rfid_1 {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "rfid1";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRfid1(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Rfid1(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Rfid1(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Rfid1(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Rfid1,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Rfid1(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Rfid1(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod rfid_2 {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "rfid2";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRfid2(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Rfid2(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Rfid2(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Rfid2(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Rfid2,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Rfid2(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Rfid2(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa";
        pub struct Fetch(pub imprese::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Impresa(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(imprese::UniqueArgs::new())
        }
        pub struct Connect(imprese::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpresa(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: imprese::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIs(value)
        }
        pub fn is_not(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIsNot(value)
        }
        pub enum Include {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Impresa(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Impresa(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod tipo {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "tipo";
        pub struct Fetch(pub tipi_proprieta::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<tipi_proprieta::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Tipo(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(tipi_proprieta::UniqueArgs::new())
        }
        pub struct Connect(tipi_proprieta::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectTipo(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: tipi_proprieta::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<tipi_proprieta::WhereParam>) -> WhereParam {
            WhereParam::TipoIs(value)
        }
        pub fn is_not(value: Vec<tipi_proprieta::WhereParam>) -> WhereParam {
            WhereParam::TipoIsNot(value)
        }
        pub enum Include {
            Select(Vec<tipi_proprieta::SelectParam>),
            Include(Vec<tipi_proprieta::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Tipo(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self { Self :: Select (selections) => { selections . into_iter () . map (| s | s . to_selection ()) . collect () } , Self :: Include (selections) => { let mut nested_selections = < tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections } , Self :: Fetch => { < tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () } } ;
                ::prisma_client_rust::Selection::new("tipo", None, [], selections)
            }
            pub fn select(nested_selections: Vec<tipi_proprieta::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<tipi_proprieta::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<tipi_proprieta::SelectParam>),
            Include(Vec<tipi_proprieta::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Tipo(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self { Self :: Select (selections) => { selections . into_iter () . map (| s | s . to_selection ()) . collect () } , Self :: Include (selections) => { let mut nested_selections = vec ! [] ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections } , Self :: Fetch => { < tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () } } ;
                ::prisma_client_rust::Selection::new("tipo", None, [], selections)
            }
            pub fn select(nested_selections: Vec<tipi_proprieta::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<tipi_proprieta::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod settimanali {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "settimanali";
        pub struct Fetch(pub settimanale::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<settimanale::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: settimanale::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: settimanale::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Settimanali(v)
            }
        }
        pub fn fetch(params: Vec<settimanale::WhereParam>) -> Fetch {
            Fetch(settimanale::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<settimanale::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectSettimanali(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<settimanale::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectSettimanali(params)
        }
        pub fn set(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::SetSettimanali(params)
        }
        pub fn some(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliSome(value)
        }
        pub fn every(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliEvery(value)
        }
        pub fn none(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliNone(value)
        }
        pub enum Include {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Settimanali(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Settimanali(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub fn create(
        modello: String,
        targa: String,
        proprieta: String,
        data_dimissioni: ::prisma_client_rust::chrono::DateTime<
            ::prisma_client_rust::chrono::FixedOffset,
        >,
        rfid_1: String,
        rfid_2: String,
        impresa: super::imprese::UniqueWhereParam,
        tipo: super::tipi_proprieta::UniqueWhereParam,
        _params: Vec<SetParam>,
    ) -> (
        String,
        String,
        String,
        ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        String,
        String,
        super::imprese::UniqueWhereParam,
        super::tipi_proprieta::UniqueWhereParam,
        Vec<SetParam>,
    ) {
        (
            modello,
            targa,
            proprieta,
            data_dimissioni,
            rfid_1,
            rfid_2,
            impresa,
            tipo,
            _params,
        )
    }
    pub fn create_unchecked(
        modello: String,
        targa: String,
        tipo_proprieta: i32,
        proprieta: String,
        impresa_id: i32,
        data_dimissioni: ::prisma_client_rust::chrono::DateTime<
            ::prisma_client_rust::chrono::FixedOffset,
        >,
        rfid_1: String,
        rfid_2: String,
        _params: Vec<SetParam>,
    ) -> (
        String,
        String,
        i32,
        String,
        i32,
        ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        String,
        String,
        Vec<SetParam>,
    ) {
        (
            modello,
            targa,
            tipo_proprieta,
            proprieta,
            impresa_id,
            data_dimissioni,
            rfid_1,
            rfid_2,
            _params,
        )
    }
    #[macro_export]
    macro_rules ! _select_autovetture { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: autovetture :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: autovetture :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: autovetture :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: autovetture :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: autovetture :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: autovetture :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , descrizione , modello , targa , tipo_proprieta , proprieta , impresa_id , data_dimissioni , rfid_1 , rfid_2 , impresa , tipo , settimanali } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: autovetture :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: autovetture :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: autovetture :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: autovetture :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "modello" , "targa" , "tipo_proprieta" , "proprieta" , "impresa_id" , "data_dimissioni" , "rfid1" , "rfid2" , "impresa" , "tipo" , "settimanali"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: autovetture :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; descrizione) => { Option < String > } ; (@ field_type ; modello) => { String } ; (@ field_type ; targa) => { String } ; (@ field_type ; tipo_proprieta) => { i32 } ; (@ field_type ; proprieta) => { String } ; (@ field_type ; impresa_id) => { i32 } ; (@ field_type ; data_dimissioni) => { :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > } ; (@ field_type ; rfid_1) => { String } ; (@ field_type ; rfid_2) => { String } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { tipo :: Data } ; (@ field_type ; tipo) => { crate :: prisma :: tipi_proprieta :: Data } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Autovetture" , available relations are "id, descrizione, modello, targa, tipo_proprieta, proprieta, impresa_id, data_dimissioni, rfid_1, rfid_2, impresa, tipo, settimanali")) } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: tipi_proprieta :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: id :: Select) } ; (@ selection_field_to_selection_param ; descrizione) => { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: descrizione :: Select) } ; (@ selection_field_to_selection_param ; modello) => { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: modello :: Select) } ; (@ selection_field_to_selection_param ; targa) => { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: targa :: Select) } ; (@ selection_field_to_selection_param ; tipo_proprieta) => { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: tipo_proprieta :: Select) } ; (@ selection_field_to_selection_param ; proprieta) => { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: proprieta :: Select) } ; (@ selection_field_to_selection_param ; impresa_id) => { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: impresa_id :: Select) } ; (@ selection_field_to_selection_param ; data_dimissioni) => { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: data_dimissioni :: Select) } ; (@ selection_field_to_selection_param ; rfid_1) => { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: rfid_1 :: Select) } ; (@ selection_field_to_selection_param ; rfid_2) => { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: rfid_2 :: Select) } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: impresa :: Select :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: impresa :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: tipo :: Select :: $ selection_mode (crate :: prisma :: tipi_proprieta :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: tipo :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: settimanali :: Select :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: autovetture :: SelectParam > :: into (crate :: prisma :: autovetture :: settimanali :: Select :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: autovetture :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; modello) => { "modello" } ; (@ field_serde_name ; targa) => { "targa" } ; (@ field_serde_name ; tipo_proprieta) => { "tipo_proprieta" } ; (@ field_serde_name ; proprieta) => { "proprieta" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; data_dimissioni) => { "data_dimissioni" } ; (@ field_serde_name ; rfid_1) => { "rfid1" } ; (@ field_serde_name ; rfid_2) => { "rfid2" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; tipo) => { "tipo" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; }
    pub use _select_autovetture as select;
    pub enum SelectParam {
        Id(id::Select),
        Descrizione(descrizione::Select),
        Modello(modello::Select),
        Targa(targa::Select),
        TipoProprieta(tipo_proprieta::Select),
        Proprieta(proprieta::Select),
        ImpresaId(impresa_id::Select),
        DataDimissioni(data_dimissioni::Select),
        Rfid1(rfid_1::Select),
        Rfid2(rfid_2::Select),
        Impresa(impresa::Select),
        Tipo(tipo::Select),
        Settimanali(settimanali::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Modello(data) => data.to_selection(),
                Self::Targa(data) => data.to_selection(),
                Self::TipoProprieta(data) => data.to_selection(),
                Self::Proprieta(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::DataDimissioni(data) => data.to_selection(),
                Self::Rfid1(data) => data.to_selection(),
                Self::Rfid2(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Tipo(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_autovetture { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: autovetture :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: autovetture :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: autovetture :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: autovetture :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: autovetture :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: autovetture :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: autovetture :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: autovetture :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { impresa , tipo , settimanali } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub descrizione : Option < String > , pub modello : String , pub targa : String , pub tipo_proprieta : i32 , pub proprieta : String , pub impresa_id : i32 , pub data_dimissioni : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > , pub rfid_1 : String , pub rfid_2 : String , $ (pub $ field : crate :: prisma :: autovetture :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (descrizione) , stringify ! (modello) , stringify ! (targa) , stringify ! (tipo_proprieta) , stringify ! (proprieta) , stringify ! (impresa_id) , stringify ! (data_dimissioni) , stringify ! (rfid_1) , stringify ! (rfid_2)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: autovetture :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: autovetture :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: autovetture :: descrizione :: NAME , & self . descrizione) ? ; state . serialize_field (crate :: prisma :: autovetture :: modello :: NAME , & self . modello) ? ; state . serialize_field (crate :: prisma :: autovetture :: targa :: NAME , & self . targa) ? ; state . serialize_field (crate :: prisma :: autovetture :: tipo_proprieta :: NAME , & self . tipo_proprieta) ? ; state . serialize_field (crate :: prisma :: autovetture :: proprieta :: NAME , & self . proprieta) ? ; state . serialize_field (crate :: prisma :: autovetture :: impresa_id :: NAME , & self . impresa_id) ? ; state . serialize_field (crate :: prisma :: autovetture :: data_dimissioni :: NAME , & self . data_dimissioni) ? ; state . serialize_field (crate :: prisma :: autovetture :: rfid_1 :: NAME , & self . rfid_1) ? ; state . serialize_field (crate :: prisma :: autovetture :: rfid_2 :: NAME , & self . rfid_2) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , descrizione , modello , targa , tipo_proprieta , proprieta , impresa_id , data_dimissioni , rfid_1 , rfid_2 } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: autovetture :: $ field :: NAME) , + , crate :: prisma :: autovetture :: id :: NAME , crate :: prisma :: autovetture :: descrizione :: NAME , crate :: prisma :: autovetture :: modello :: NAME , crate :: prisma :: autovetture :: targa :: NAME , crate :: prisma :: autovetture :: tipo_proprieta :: NAME , crate :: prisma :: autovetture :: proprieta :: NAME , crate :: prisma :: autovetture :: impresa_id :: NAME , crate :: prisma :: autovetture :: data_dimissioni :: NAME , crate :: prisma :: autovetture :: rfid_1 :: NAME , crate :: prisma :: autovetture :: rfid_2 :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: autovetture :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: autovetture :: id :: NAME => Ok (Field :: id) , crate :: prisma :: autovetture :: descrizione :: NAME => Ok (Field :: descrizione) , crate :: prisma :: autovetture :: modello :: NAME => Ok (Field :: modello) , crate :: prisma :: autovetture :: targa :: NAME => Ok (Field :: targa) , crate :: prisma :: autovetture :: tipo_proprieta :: NAME => Ok (Field :: tipo_proprieta) , crate :: prisma :: autovetture :: proprieta :: NAME => Ok (Field :: proprieta) , crate :: prisma :: autovetture :: impresa_id :: NAME => Ok (Field :: impresa_id) , crate :: prisma :: autovetture :: data_dimissioni :: NAME => Ok (Field :: data_dimissioni) , crate :: prisma :: autovetture :: rfid_1 :: NAME => Ok (Field :: rfid_1) , crate :: prisma :: autovetture :: rfid_2 :: NAME => Ok (Field :: rfid_2) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut descrizione = None ; let mut modello = None ; let mut targa = None ; let mut tipo_proprieta = None ; let mut proprieta = None ; let mut impresa_id = None ; let mut data_dimissioni = None ; let mut rfid_1 = None ; let mut rfid_2 = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: descrizione => { if descrizione . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: descrizione :: NAME)) ; } descrizione = Some (map . next_value () ?) ; } Field :: modello => { if modello . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: modello :: NAME)) ; } modello = Some (map . next_value () ?) ; } Field :: targa => { if targa . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: targa :: NAME)) ; } targa = Some (map . next_value () ?) ; } Field :: tipo_proprieta => { if tipo_proprieta . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: tipo_proprieta :: NAME)) ; } tipo_proprieta = Some (map . next_value () ?) ; } Field :: proprieta => { if proprieta . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: proprieta :: NAME)) ; } proprieta = Some (map . next_value () ?) ; } Field :: impresa_id => { if impresa_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: impresa_id :: NAME)) ; } impresa_id = Some (map . next_value () ?) ; } Field :: data_dimissioni => { if data_dimissioni . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: data_dimissioni :: NAME)) ; } data_dimissioni = Some (map . next_value () ?) ; } Field :: rfid_1 => { if rfid_1 . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: rfid_1 :: NAME)) ; } rfid_1 = Some (map . next_value () ?) ; } Field :: rfid_2 => { if rfid_2 . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: rfid_2 :: NAME)) ; } rfid_2 = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: autovetture :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: id :: NAME)) ? ; let descrizione = descrizione . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: descrizione :: NAME)) ? ; let modello = modello . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: modello :: NAME)) ? ; let targa = targa . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: targa :: NAME)) ? ; let tipo_proprieta = tipo_proprieta . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: tipo_proprieta :: NAME)) ? ; let proprieta = proprieta . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: proprieta :: NAME)) ? ; let impresa_id = impresa_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: impresa_id :: NAME)) ? ; let data_dimissioni = data_dimissioni . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: data_dimissioni :: NAME)) ? ; let rfid_1 = rfid_1 . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: rfid_1 :: NAME)) ? ; let rfid_2 = rfid_2 . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: autovetture :: rfid_2 :: NAME)) ? ; Ok (Data { id , descrizione , modello , targa , tipo_proprieta , proprieta , impresa_id , data_dimissioni , rfid_1 , rfid_2 , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "modello" , "targa" , "tipo_proprieta" , "proprieta" , "impresa_id" , "data_dimissioni" , "rfid1" , "rfid2" , "impresa" , "tipo" , "settimanali"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: autovetture :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { tipo :: Data } ; (@ field_type ; tipo) => { crate :: prisma :: tipi_proprieta :: Data } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Autovetture" , available relations are "impresa, tipo, settimanali")) } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: tipi_proprieta :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: autovetture :: IncludeParam > :: into (crate :: prisma :: autovetture :: impresa :: Include :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: autovetture :: IncludeParam > :: into (crate :: prisma :: autovetture :: impresa :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: autovetture :: IncludeParam > :: into (crate :: prisma :: autovetture :: tipo :: Include :: $ selection_mode (crate :: prisma :: tipi_proprieta :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: autovetture :: IncludeParam > :: into (crate :: prisma :: autovetture :: tipo :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: autovetture :: IncludeParam > :: into (crate :: prisma :: autovetture :: settimanali :: Include :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: autovetture :: IncludeParam > :: into (crate :: prisma :: autovetture :: settimanali :: Include :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: autovetture :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; modello) => { "modello" } ; (@ field_serde_name ; targa) => { "targa" } ; (@ field_serde_name ; tipo_proprieta) => { "tipo_proprieta" } ; (@ field_serde_name ; proprieta) => { "proprieta" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; data_dimissioni) => { "data_dimissioni" } ; (@ field_serde_name ; rfid_1) => { "rfid1" } ; (@ field_serde_name ; rfid_2) => { "rfid2" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; tipo) => { "tipo" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; }
    pub use _include_autovetture as include;
    pub enum IncludeParam {
        Id(id::Include),
        Descrizione(descrizione::Include),
        Modello(modello::Include),
        Targa(targa::Include),
        TipoProprieta(tipo_proprieta::Include),
        Proprieta(proprieta::Include),
        ImpresaId(impresa_id::Include),
        DataDimissioni(data_dimissioni::Include),
        Rfid1(rfid_1::Include),
        Rfid2(rfid_2::Include),
        Impresa(impresa::Include),
        Tipo(tipo::Include),
        Settimanali(settimanali::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Modello(data) => data.to_selection(),
                Self::Targa(data) => data.to_selection(),
                Self::TipoProprieta(data) => data.to_selection(),
                Self::Proprieta(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::DataDimissioni(data) => data.to_selection(),
                Self::Rfid1(data) => data.to_selection(),
                Self::Rfid2(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Tipo(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_autovetture { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: autovetture struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "descrizione")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub descrizione : Option < String > , # [serde (rename = "modello")] pub modello : String , # [serde (rename = "targa")] pub targa : String , # [serde (rename = "tipo_proprieta")] pub tipo_proprieta : i32 , # [serde (rename = "proprieta")] pub proprieta : String , # [serde (rename = "impresa_id")] pub impresa_id : i32 , # [serde (rename = "data_dimissioni")] pub data_dimissioni : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > , # [serde (rename = "rfid1")] pub rfid_1 : String , # [serde (rename = "rfid2")] pub rfid_2 : String } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_autovetture as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "descrizione")]
        pub descrizione: Option<String>,
        #[serde(rename = "modello")]
        pub modello: String,
        #[serde(rename = "targa")]
        pub targa: String,
        #[serde(rename = "tipo_proprieta")]
        pub tipo_proprieta: i32,
        #[serde(rename = "proprieta")]
        pub proprieta: String,
        #[serde(rename = "impresa_id")]
        pub impresa_id: i32,
        #[serde(rename = "data_dimissioni")]
        pub data_dimissioni:
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        #[serde(rename = "rfid1")]
        pub rfid_1: String,
        #[serde(rename = "rfid2")]
        pub rfid_2: String,
        #[serde(rename = "impresa")]
        pub impresa: Option<Box<super::imprese::Data>>,
        #[serde(rename = "tipo")]
        pub tipo: Option<Box<super::tipi_proprieta::Data>>,
        #[serde(rename = "settimanali")]
        pub settimanali: Option<Vec<super::settimanale::Data>>,
    }
    impl Data {
        pub fn impresa(
            &self,
        ) -> Result<&super::imprese::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.impresa
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(impresa),
                ))
                .map(|v| v.as_ref())
        }
        pub fn tipo(
            &self,
        ) -> Result<&super::tipi_proprieta::Data, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.tipo
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(tipo),
                ))
                .map(|v| v.as_ref())
        }
        pub fn settimanali(
            &self,
        ) -> Result<&Vec<super::settimanale::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.settimanali
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(settimanali),
                ))
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Impresa(super::imprese::UniqueArgs),
        Tipo(super::tipi_proprieta::UniqueArgs),
        Settimanali(super::settimanale::ManyArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Impresa(args) => {
                    let mut selections = < super :: imprese :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(impresa::NAME, None, [], selections)
                }
                Self::Tipo(args) => {
                    let mut selections = < super :: tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(tipo::NAME, None, [], selections)
                }
                Self::Settimanali(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        settimanali::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetDescrizione(Option<String>),
        SetModello(String),
        SetTarga(String),
        SetTipoProprieta(i32),
        IncrementTipoProprieta(i32),
        DecrementTipoProprieta(i32),
        MultiplyTipoProprieta(i32),
        DivideTipoProprieta(i32),
        SetProprieta(String),
        SetImpresaId(i32),
        IncrementImpresaId(i32),
        DecrementImpresaId(i32),
        MultiplyImpresaId(i32),
        DivideImpresaId(i32),
        SetDataDimissioni(
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        ),
        SetRfid1(String),
        SetRfid2(String),
        ConnectImpresa(super::imprese::UniqueWhereParam),
        ConnectTipo(super::tipi_proprieta::UniqueWhereParam),
        ConnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        DisconnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        SetSettimanali(Vec<super::settimanale::UniqueWhereParam>),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDescrizione(value) => (
                    descrizione::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetModello(value) => (
                    modello::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetTarga(value) => (
                    targa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetProprieta(value) => (
                    proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDataDimissioni(value) => (
                    data_dimissioni::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::DateTime(value),
                ),
                SetParam::SetRfid1(value) => (
                    rfid_1::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetRfid2(value) => (
                    rfid_2::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::ConnectImpresa(where_param) => (
                    impresa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::imprese::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectTipo(where_param) => (
                    tipo::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::tipi_proprieta::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        Descrizione(Option<String>),
        Modello(String),
        Targa(String),
        TipoProprieta(i32),
        Proprieta(String),
        ImpresaId(i32),
        DataDimissioni(
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        ),
        Rfid1(String),
        Rfid2(String),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Descrizione(value) => Self::SetDescrizione(value),
                UncheckedSetParam::Modello(value) => Self::SetModello(value),
                UncheckedSetParam::Targa(value) => Self::SetTarga(value),
                UncheckedSetParam::TipoProprieta(value) => Self::SetTipoProprieta(value),
                UncheckedSetParam::Proprieta(value) => Self::SetProprieta(value),
                UncheckedSetParam::ImpresaId(value) => Self::SetImpresaId(value),
                UncheckedSetParam::DataDimissioni(value) => Self::SetDataDimissioni(value),
                UncheckedSetParam::Rfid1(value) => Self::SetRfid1(value),
                UncheckedSetParam::Rfid2(value) => Self::SetRfid2(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Descrizione(::prisma_client_rust::Direction),
        Modello(::prisma_client_rust::Direction),
        Targa(::prisma_client_rust::Direction),
        TipoProprieta(::prisma_client_rust::Direction),
        Proprieta(::prisma_client_rust::Direction),
        ImpresaId(::prisma_client_rust::Direction),
        DataDimissioni(::prisma_client_rust::Direction),
        Rfid1(::prisma_client_rust::Direction),
        Rfid2(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Descrizione(direction) => (
                    descrizione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Modello(direction) => (
                    modello::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Targa(direction) => (
                    targa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::TipoProprieta(direction) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Proprieta(direction) => (
                    proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ImpresaId(direction) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::DataDimissioni(direction) => (
                    data_dimissioni::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Rfid1(direction) => (
                    rfid_1::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Rfid2(direction) => (
                    rfid_2::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        Descrizione(_prisma::read_filters::StringNullableFilter),
        Modello(_prisma::read_filters::StringFilter),
        Targa(_prisma::read_filters::StringFilter),
        TipoProprieta(_prisma::read_filters::IntFilter),
        Proprieta(_prisma::read_filters::StringFilter),
        ImpresaId(_prisma::read_filters::IntFilter),
        DataDimissioni(_prisma::read_filters::DateTimeFilter),
        Rfid1(_prisma::read_filters::StringFilter),
        Rfid2(_prisma::read_filters::StringFilter),
        ImpresaIs(Vec<super::imprese::WhereParam>),
        ImpresaIsNot(Vec<super::imprese::WhereParam>),
        TipoIs(Vec<super::tipi_proprieta::WhereParam>),
        TipoIsNot(Vec<super::tipi_proprieta::WhereParam>),
        SettimanaliSome(Vec<super::settimanale::WhereParam>),
        SettimanaliEvery(Vec<super::settimanale::WhereParam>),
        SettimanaliNone(Vec<super::settimanale::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Descrizione(value) => (descrizione::NAME, value.into()),
                Self::Modello(value) => (modello::NAME, value.into()),
                Self::Targa(value) => (targa::NAME, value.into()),
                Self::TipoProprieta(value) => (tipo_proprieta::NAME, value.into()),
                Self::Proprieta(value) => (proprieta::NAME, value.into()),
                Self::ImpresaId(value) => (impresa_id::NAME, value.into()),
                Self::DataDimissioni(value) => (data_dimissioni::NAME, value.into()),
                Self::Rfid1(value) => (rfid_1::NAME, value.into()),
                Self::Rfid2(value) => (rfid_2::NAME, value.into()),
                Self::ImpresaIs(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpresaIsNot(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::TipoIs(where_params) => (
                    tipo::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::TipoIsNot(where_params) => (
                    tipo::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliSome(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliEvery(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliNone(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(descrizione::NAME),
                ::prisma_client_rust::sel(modello::NAME),
                ::prisma_client_rust::sel(targa::NAME),
                ::prisma_client_rust::sel(tipo_proprieta::NAME),
                ::prisma_client_rust::sel(proprieta::NAME),
                ::prisma_client_rust::sel(impresa_id::NAME),
                ::prisma_client_rust::sel(data_dimissioni::NAME),
                ::prisma_client_rust::sel(rfid_1::NAME),
                ::prisma_client_rust::sel(rfid_2::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            modello: String,
            targa: String,
            proprieta: String,
            data_dimissioni: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
            rfid_1: String,
            rfid_2: String,
            impresa: super::imprese::UniqueWhereParam,
            tipo: super::tipi_proprieta::UniqueWhereParam,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                modello::set(modello),
                targa::set(targa),
                proprieta::set(proprieta),
                data_dimissioni::set(data_dimissioni),
                rfid_1::set(rfid_1),
                rfid_2::set(rfid_2),
                impresa::connect(impresa),
                tipo::connect(tipo),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            modello: String,
            targa: String,
            tipo_proprieta: i32,
            proprieta: String,
            impresa_id: i32,
            data_dimissioni: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
            rfid_1: String,
            rfid_2: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                modello::set(modello),
                targa::set(targa),
                tipo_proprieta::set(tipo_proprieta),
                proprieta::set(proprieta),
                impresa_id::set(impresa_id),
                data_dimissioni::set(data_dimissioni),
                rfid_1::set(rfid_1),
                rfid_2::set(rfid_2),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(
            self,
            data: Vec<(
                String,
                String,
                i32,
                String,
                i32,
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
                String,
                String,
                Vec<SetParam>,
            )>,
        ) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(
                    |(
                        modello,
                        targa,
                        tipo_proprieta,
                        proprieta,
                        impresa_id,
                        data_dimissioni,
                        rfid_1,
                        rfid_2,
                        mut _params,
                    )| {
                        _params.extend([
                            modello::set(modello),
                            targa::set(targa),
                            tipo_proprieta::set(tipo_proprieta),
                            proprieta::set(proprieta),
                            impresa_id::set(impresa_id),
                            data_dimissioni::set(data_dimissioni),
                            rfid_1::set(rfid_1),
                            rfid_2::set(rfid_2),
                        ]);
                        _params
                    },
                )
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (
                modello,
                targa,
                proprieta,
                data_dimissioni,
                rfid_1,
                rfid_2,
                impresa,
                tipo,
                mut _params,
            ): (
                String,
                String,
                String,
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
                String,
                String,
                super::imprese::UniqueWhereParam,
                super::tipi_proprieta::UniqueWhereParam,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                modello::set(modello),
                targa::set(targa),
                proprieta::set(proprieta),
                data_dimissioni::set(data_dimissioni),
                rfid_1::set(rfid_1),
                rfid_2::set(rfid_2),
                impresa::connect(impresa),
                tipo::connect(tipo),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod dipendenti {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Dipendenti";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod nome {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "nome";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetNome(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Nome(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Nome(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Nome(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Nome, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn mode(_: super::super::QueryMode) -> Mode;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Nome(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Nome(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod cognome {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "cognome";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetCognome(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Cognome(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Cognome(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Cognome(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Cognome,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Cognome(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Cognome(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod matricola {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "matricola";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetMatricola(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Matricola(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Matricola(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::Matricola(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            Matricola,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Matricola(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Matricola(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod data_di_nascita {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "data_di_nascita";
        pub struct Set(
            pub ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        );
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDataDiNascita(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::DataDiNascita(v)
            }
        }
        pub fn set<T: From<Set>>(
            value: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
        ) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::DataDiNascita(direction)
        }
        pub fn equals(
            value: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
        ) -> WhereParam {
            WhereParam::DataDiNascita(_prisma::read_filters::DateTimeFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::DateTimeFilter,
            DataDiNascita,
            {
                fn in_vec(
                    _: Vec<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> InVec;
                fn not_in_vec(
                    _: Vec<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> NotInVec;
                fn lt(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Lt;
                fn lte(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Lte;
                fn gt(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Gt;
                fn gte(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Gte;
                fn not(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::DataDiNascita(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::DataDiNascita(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod luogo_di_nascita {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "luogo_di_nascita";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetLuogoDiNascita(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::LuogoDiNascita(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::LuogoDiNascita(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::LuogoDiNascita(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            LuogoDiNascita,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::LuogoDiNascita(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::LuogoDiNascita(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod codice_fiscale {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "codice_fiscale";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetCodiceFiscale(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::CodiceFiscale(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::CodiceFiscale(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::CodiceFiscale(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            CodiceFiscale,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::CodiceFiscale(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::CodiceFiscale(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetImpresaId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ImpresaId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ImpresaId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::ImpresaId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            ImpresaId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementImpresaId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementImpresaId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyImpresaId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideImpresaId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpresaId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpresaId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod qualifica_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "qualifica_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetQualificaId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::QualificaId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::QualificaId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::QualificaId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            QualificaId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementQualificaId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementQualificaId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyQualificaId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideQualificaId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::QualificaId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::QualificaId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod mansione_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "mansione_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetMansioneId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::MansioneId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::MansioneId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::MansioneId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            MansioneId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementMansioneId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementMansioneId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyMansioneId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideMansioneId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::MansioneId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::MansioneId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod data_dimissioni {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "data_dimissioni";
        pub struct Set(
            pub  Option<
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
            >,
        );
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDataDimissioni(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::DataDimissioni(v)
            }
        }
        pub fn set<T: From<Set>>(
            value: Option<
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
            >,
        ) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::DataDimissioni(direction)
        }
        pub fn equals(
            value: Option<
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
            >,
        ) -> WhereParam {
            WhereParam::DataDimissioni(_prisma::read_filters::DateTimeNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::DateTimeNullableFilter,
            DataDimissioni,
            {
                fn in_vec(
                    _: Vec<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> InVec;
                fn not_in_vec(
                    _: Vec<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> NotInVec;
                fn lt(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Lt;
                fn lte(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Lte;
                fn gt(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Gt;
                fn gte(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Gte;
                fn not(
                    _: Option<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::DataDimissioni(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::DataDimissioni(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod rfid_1 {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "rfid1";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRfid1(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Rfid1(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Rfid1(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::Rfid1(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            Rfid1,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Rfid1(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Rfid1(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod rfid_2 {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "rfid2";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRfid2(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Rfid2(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Rfid2(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::Rfid2(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            Rfid2,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Rfid2(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Rfid2(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa";
        pub struct Fetch(pub imprese::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Impresa(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(imprese::UniqueArgs::new())
        }
        pub struct Connect(imprese::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpresa(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: imprese::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIs(value)
        }
        pub fn is_not(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIsNot(value)
        }
        pub enum Include {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Impresa(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Impresa(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod qualifica {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "qualifica";
        pub struct Fetch(pub qualifica::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<qualifica::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Qualifica(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(qualifica::UniqueArgs::new())
        }
        pub struct Connect(qualifica::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectQualifica(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: qualifica::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<qualifica::WhereParam>) -> WhereParam {
            WhereParam::QualificaIs(value)
        }
        pub fn is_not(value: Vec<qualifica::WhereParam>) -> WhereParam {
            WhereParam::QualificaIsNot(value)
        }
        pub enum Include {
            Select(Vec<qualifica::SelectParam>),
            Include(Vec<qualifica::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Qualifica(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = < qualifica :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <qualifica::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("qualifica", None, [], selections)
            }
            pub fn select(nested_selections: Vec<qualifica::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<qualifica::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<qualifica::SelectParam>),
            Include(Vec<qualifica::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Qualifica(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <qualifica::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("qualifica", None, [], selections)
            }
            pub fn select(nested_selections: Vec<qualifica::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<qualifica::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod mansione {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "mansione";
        pub struct Fetch(pub mansione::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<mansione::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Mansione(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(mansione::UniqueArgs::new())
        }
        pub struct Connect(mansione::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectMansione(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: mansione::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<mansione::WhereParam>) -> WhereParam {
            WhereParam::MansioneIs(value)
        }
        pub fn is_not(value: Vec<mansione::WhereParam>) -> WhereParam {
            WhereParam::MansioneIsNot(value)
        }
        pub enum Include {
            Select(Vec<mansione::SelectParam>),
            Include(Vec<mansione::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Mansione(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = < mansione :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <mansione::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("mansione", None, [], selections)
            }
            pub fn select(nested_selections: Vec<mansione::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<mansione::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<mansione::SelectParam>),
            Include(Vec<mansione::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Mansione(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <mansione::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("mansione", None, [], selections)
            }
            pub fn select(nested_selections: Vec<mansione::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<mansione::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub fn create(
        nome: String,
        cognome: String,
        data_di_nascita: ::prisma_client_rust::chrono::DateTime<
            ::prisma_client_rust::chrono::FixedOffset,
        >,
        luogo_di_nascita: String,
        codice_fiscale: String,
        impresa: super::imprese::UniqueWhereParam,
        qualifica: super::qualifica::UniqueWhereParam,
        mansione: super::mansione::UniqueWhereParam,
        _params: Vec<SetParam>,
    ) -> (
        String,
        String,
        ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        String,
        String,
        super::imprese::UniqueWhereParam,
        super::qualifica::UniqueWhereParam,
        super::mansione::UniqueWhereParam,
        Vec<SetParam>,
    ) {
        (
            nome,
            cognome,
            data_di_nascita,
            luogo_di_nascita,
            codice_fiscale,
            impresa,
            qualifica,
            mansione,
            _params,
        )
    }
    pub fn create_unchecked(
        nome: String,
        cognome: String,
        data_di_nascita: ::prisma_client_rust::chrono::DateTime<
            ::prisma_client_rust::chrono::FixedOffset,
        >,
        luogo_di_nascita: String,
        codice_fiscale: String,
        impresa_id: i32,
        qualifica_id: i32,
        mansione_id: i32,
        _params: Vec<SetParam>,
    ) -> (
        String,
        String,
        ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        String,
        String,
        i32,
        i32,
        i32,
        Vec<SetParam>,
    ) {
        (
            nome,
            cognome,
            data_di_nascita,
            luogo_di_nascita,
            codice_fiscale,
            impresa_id,
            qualifica_id,
            mansione_id,
            _params,
        )
    }
    #[macro_export]
    macro_rules ! _select_dipendenti { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: dipendenti :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: dipendenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: dipendenti :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: dipendenti :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: dipendenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: dipendenti :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , nome , cognome , matricola , data_di_nascita , luogo_di_nascita , codice_fiscale , impresa_id , qualifica_id , mansione_id , data_dimissioni , rfid_1 , rfid_2 , impresa , qualifica , mansione } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: dipendenti :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: dipendenti :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: dipendenti :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: dipendenti :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "nome" , "cognome" , "matricola" , "data_di_nascita" , "luogo_di_nascita" , "codice_fiscale" , "impresa_id" , "qualifica_id" , "mansione_id" , "data_dimissioni" , "rfid1" , "rfid2" , "impresa" , "qualifica" , "mansione"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: dipendenti :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; nome) => { String } ; (@ field_type ; cognome) => { String } ; (@ field_type ; matricola) => { Option < String > } ; (@ field_type ; data_di_nascita) => { :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > } ; (@ field_type ; luogo_di_nascita) => { String } ; (@ field_type ; codice_fiscale) => { String } ; (@ field_type ; impresa_id) => { i32 } ; (@ field_type ; qualifica_id) => { i32 } ; (@ field_type ; mansione_id) => { i32 } ; (@ field_type ; data_dimissioni) => { Option < :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > > } ; (@ field_type ; rfid_1) => { Option < String > } ; (@ field_type ; rfid_2) => { Option < String > } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; qualifica : $ selection_mode : ident { $ ($ selections : tt) + }) => { qualifica :: Data } ; (@ field_type ; qualifica) => { crate :: prisma :: qualifica :: Data } ; (@ field_type ; mansione : $ selection_mode : ident { $ ($ selections : tt) + }) => { mansione :: Data } ; (@ field_type ; mansione) => { crate :: prisma :: mansione :: Data } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Dipendenti" , available relations are "id, nome, cognome, matricola, data_di_nascita, luogo_di_nascita, codice_fiscale, impresa_id, qualifica_id, mansione_id, data_dimissioni, rfid_1, rfid_2, impresa, qualifica, mansione")) } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; qualifica : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: qualifica :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; mansione : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: mansione :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: id :: Select) } ; (@ selection_field_to_selection_param ; nome) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: nome :: Select) } ; (@ selection_field_to_selection_param ; cognome) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: cognome :: Select) } ; (@ selection_field_to_selection_param ; matricola) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: matricola :: Select) } ; (@ selection_field_to_selection_param ; data_di_nascita) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: data_di_nascita :: Select) } ; (@ selection_field_to_selection_param ; luogo_di_nascita) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: luogo_di_nascita :: Select) } ; (@ selection_field_to_selection_param ; codice_fiscale) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: codice_fiscale :: Select) } ; (@ selection_field_to_selection_param ; impresa_id) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: impresa_id :: Select) } ; (@ selection_field_to_selection_param ; qualifica_id) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: qualifica_id :: Select) } ; (@ selection_field_to_selection_param ; mansione_id) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: mansione_id :: Select) } ; (@ selection_field_to_selection_param ; data_dimissioni) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: data_dimissioni :: Select) } ; (@ selection_field_to_selection_param ; rfid_1) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: rfid_1 :: Select) } ; (@ selection_field_to_selection_param ; rfid_2) => { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: rfid_2 :: Select) } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: impresa :: Select :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: impresa :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; qualifica $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: qualifica :: Select :: $ selection_mode (crate :: prisma :: qualifica :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; qualifica $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: qualifica :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; mansione $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: mansione :: Select :: $ selection_mode (crate :: prisma :: mansione :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; mansione $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: dipendenti :: SelectParam > :: into (crate :: prisma :: dipendenti :: mansione :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: dipendenti :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; nome) => { "nome" } ; (@ field_serde_name ; cognome) => { "cognome" } ; (@ field_serde_name ; matricola) => { "matricola" } ; (@ field_serde_name ; data_di_nascita) => { "data_di_nascita" } ; (@ field_serde_name ; luogo_di_nascita) => { "luogo_di_nascita" } ; (@ field_serde_name ; codice_fiscale) => { "codice_fiscale" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; qualifica_id) => { "qualifica_id" } ; (@ field_serde_name ; mansione_id) => { "mansione_id" } ; (@ field_serde_name ; data_dimissioni) => { "data_dimissioni" } ; (@ field_serde_name ; rfid_1) => { "rfid1" } ; (@ field_serde_name ; rfid_2) => { "rfid2" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; qualifica) => { "qualifica" } ; (@ field_serde_name ; mansione) => { "mansione" } ; }
    pub use _select_dipendenti as select;
    pub enum SelectParam {
        Id(id::Select),
        Nome(nome::Select),
        Cognome(cognome::Select),
        Matricola(matricola::Select),
        DataDiNascita(data_di_nascita::Select),
        LuogoDiNascita(luogo_di_nascita::Select),
        CodiceFiscale(codice_fiscale::Select),
        ImpresaId(impresa_id::Select),
        QualificaId(qualifica_id::Select),
        MansioneId(mansione_id::Select),
        DataDimissioni(data_dimissioni::Select),
        Rfid1(rfid_1::Select),
        Rfid2(rfid_2::Select),
        Impresa(impresa::Select),
        Qualifica(qualifica::Select),
        Mansione(mansione::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Nome(data) => data.to_selection(),
                Self::Cognome(data) => data.to_selection(),
                Self::Matricola(data) => data.to_selection(),
                Self::DataDiNascita(data) => data.to_selection(),
                Self::LuogoDiNascita(data) => data.to_selection(),
                Self::CodiceFiscale(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::QualificaId(data) => data.to_selection(),
                Self::MansioneId(data) => data.to_selection(),
                Self::DataDimissioni(data) => data.to_selection(),
                Self::Rfid1(data) => data.to_selection(),
                Self::Rfid2(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Qualifica(data) => data.to_selection(),
                Self::Mansione(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_dipendenti { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: dipendenti :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: dipendenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: dipendenti :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: dipendenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: dipendenti :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: dipendenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: dipendenti :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: dipendenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { impresa , qualifica , mansione } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub nome : String , pub cognome : String , pub matricola : Option < String > , pub data_di_nascita : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > , pub luogo_di_nascita : String , pub codice_fiscale : String , pub impresa_id : i32 , pub qualifica_id : i32 , pub mansione_id : i32 , pub data_dimissioni : Option < :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > > , pub rfid_1 : Option < String > , pub rfid_2 : Option < String > , $ (pub $ field : crate :: prisma :: dipendenti :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (nome) , stringify ! (cognome) , stringify ! (matricola) , stringify ! (data_di_nascita) , stringify ! (luogo_di_nascita) , stringify ! (codice_fiscale) , stringify ! (impresa_id) , stringify ! (qualifica_id) , stringify ! (mansione_id) , stringify ! (data_dimissioni) , stringify ! (rfid_1) , stringify ! (rfid_2)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: dipendenti :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: dipendenti :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: dipendenti :: nome :: NAME , & self . nome) ? ; state . serialize_field (crate :: prisma :: dipendenti :: cognome :: NAME , & self . cognome) ? ; state . serialize_field (crate :: prisma :: dipendenti :: matricola :: NAME , & self . matricola) ? ; state . serialize_field (crate :: prisma :: dipendenti :: data_di_nascita :: NAME , & self . data_di_nascita) ? ; state . serialize_field (crate :: prisma :: dipendenti :: luogo_di_nascita :: NAME , & self . luogo_di_nascita) ? ; state . serialize_field (crate :: prisma :: dipendenti :: codice_fiscale :: NAME , & self . codice_fiscale) ? ; state . serialize_field (crate :: prisma :: dipendenti :: impresa_id :: NAME , & self . impresa_id) ? ; state . serialize_field (crate :: prisma :: dipendenti :: qualifica_id :: NAME , & self . qualifica_id) ? ; state . serialize_field (crate :: prisma :: dipendenti :: mansione_id :: NAME , & self . mansione_id) ? ; state . serialize_field (crate :: prisma :: dipendenti :: data_dimissioni :: NAME , & self . data_dimissioni) ? ; state . serialize_field (crate :: prisma :: dipendenti :: rfid_1 :: NAME , & self . rfid_1) ? ; state . serialize_field (crate :: prisma :: dipendenti :: rfid_2 :: NAME , & self . rfid_2) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , nome , cognome , matricola , data_di_nascita , luogo_di_nascita , codice_fiscale , impresa_id , qualifica_id , mansione_id , data_dimissioni , rfid_1 , rfid_2 } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: dipendenti :: $ field :: NAME) , + , crate :: prisma :: dipendenti :: id :: NAME , crate :: prisma :: dipendenti :: nome :: NAME , crate :: prisma :: dipendenti :: cognome :: NAME , crate :: prisma :: dipendenti :: matricola :: NAME , crate :: prisma :: dipendenti :: data_di_nascita :: NAME , crate :: prisma :: dipendenti :: luogo_di_nascita :: NAME , crate :: prisma :: dipendenti :: codice_fiscale :: NAME , crate :: prisma :: dipendenti :: impresa_id :: NAME , crate :: prisma :: dipendenti :: qualifica_id :: NAME , crate :: prisma :: dipendenti :: mansione_id :: NAME , crate :: prisma :: dipendenti :: data_dimissioni :: NAME , crate :: prisma :: dipendenti :: rfid_1 :: NAME , crate :: prisma :: dipendenti :: rfid_2 :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: dipendenti :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: dipendenti :: id :: NAME => Ok (Field :: id) , crate :: prisma :: dipendenti :: nome :: NAME => Ok (Field :: nome) , crate :: prisma :: dipendenti :: cognome :: NAME => Ok (Field :: cognome) , crate :: prisma :: dipendenti :: matricola :: NAME => Ok (Field :: matricola) , crate :: prisma :: dipendenti :: data_di_nascita :: NAME => Ok (Field :: data_di_nascita) , crate :: prisma :: dipendenti :: luogo_di_nascita :: NAME => Ok (Field :: luogo_di_nascita) , crate :: prisma :: dipendenti :: codice_fiscale :: NAME => Ok (Field :: codice_fiscale) , crate :: prisma :: dipendenti :: impresa_id :: NAME => Ok (Field :: impresa_id) , crate :: prisma :: dipendenti :: qualifica_id :: NAME => Ok (Field :: qualifica_id) , crate :: prisma :: dipendenti :: mansione_id :: NAME => Ok (Field :: mansione_id) , crate :: prisma :: dipendenti :: data_dimissioni :: NAME => Ok (Field :: data_dimissioni) , crate :: prisma :: dipendenti :: rfid_1 :: NAME => Ok (Field :: rfid_1) , crate :: prisma :: dipendenti :: rfid_2 :: NAME => Ok (Field :: rfid_2) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut nome = None ; let mut cognome = None ; let mut matricola = None ; let mut data_di_nascita = None ; let mut luogo_di_nascita = None ; let mut codice_fiscale = None ; let mut impresa_id = None ; let mut qualifica_id = None ; let mut mansione_id = None ; let mut data_dimissioni = None ; let mut rfid_1 = None ; let mut rfid_2 = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: nome => { if nome . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: nome :: NAME)) ; } nome = Some (map . next_value () ?) ; } Field :: cognome => { if cognome . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: cognome :: NAME)) ; } cognome = Some (map . next_value () ?) ; } Field :: matricola => { if matricola . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: matricola :: NAME)) ; } matricola = Some (map . next_value () ?) ; } Field :: data_di_nascita => { if data_di_nascita . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: data_di_nascita :: NAME)) ; } data_di_nascita = Some (map . next_value () ?) ; } Field :: luogo_di_nascita => { if luogo_di_nascita . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: luogo_di_nascita :: NAME)) ; } luogo_di_nascita = Some (map . next_value () ?) ; } Field :: codice_fiscale => { if codice_fiscale . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: codice_fiscale :: NAME)) ; } codice_fiscale = Some (map . next_value () ?) ; } Field :: impresa_id => { if impresa_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: impresa_id :: NAME)) ; } impresa_id = Some (map . next_value () ?) ; } Field :: qualifica_id => { if qualifica_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: qualifica_id :: NAME)) ; } qualifica_id = Some (map . next_value () ?) ; } Field :: mansione_id => { if mansione_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: mansione_id :: NAME)) ; } mansione_id = Some (map . next_value () ?) ; } Field :: data_dimissioni => { if data_dimissioni . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: data_dimissioni :: NAME)) ; } data_dimissioni = Some (map . next_value () ?) ; } Field :: rfid_1 => { if rfid_1 . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: rfid_1 :: NAME)) ; } rfid_1 = Some (map . next_value () ?) ; } Field :: rfid_2 => { if rfid_2 . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: rfid_2 :: NAME)) ; } rfid_2 = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: dipendenti :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: id :: NAME)) ? ; let nome = nome . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: nome :: NAME)) ? ; let cognome = cognome . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: cognome :: NAME)) ? ; let matricola = matricola . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: matricola :: NAME)) ? ; let data_di_nascita = data_di_nascita . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: data_di_nascita :: NAME)) ? ; let luogo_di_nascita = luogo_di_nascita . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: luogo_di_nascita :: NAME)) ? ; let codice_fiscale = codice_fiscale . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: codice_fiscale :: NAME)) ? ; let impresa_id = impresa_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: impresa_id :: NAME)) ? ; let qualifica_id = qualifica_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: qualifica_id :: NAME)) ? ; let mansione_id = mansione_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: mansione_id :: NAME)) ? ; let data_dimissioni = data_dimissioni . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: data_dimissioni :: NAME)) ? ; let rfid_1 = rfid_1 . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: rfid_1 :: NAME)) ? ; let rfid_2 = rfid_2 . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: dipendenti :: rfid_2 :: NAME)) ? ; Ok (Data { id , nome , cognome , matricola , data_di_nascita , luogo_di_nascita , codice_fiscale , impresa_id , qualifica_id , mansione_id , data_dimissioni , rfid_1 , rfid_2 , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "nome" , "cognome" , "matricola" , "data_di_nascita" , "luogo_di_nascita" , "codice_fiscale" , "impresa_id" , "qualifica_id" , "mansione_id" , "data_dimissioni" , "rfid1" , "rfid2" , "impresa" , "qualifica" , "mansione"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: dipendenti :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; qualifica : $ selection_mode : ident { $ ($ selections : tt) + }) => { qualifica :: Data } ; (@ field_type ; qualifica) => { crate :: prisma :: qualifica :: Data } ; (@ field_type ; mansione : $ selection_mode : ident { $ ($ selections : tt) + }) => { mansione :: Data } ; (@ field_type ; mansione) => { crate :: prisma :: mansione :: Data } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Dipendenti" , available relations are "impresa, qualifica, mansione")) } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; qualifica : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: qualifica :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; mansione : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: mansione :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: dipendenti :: IncludeParam > :: into (crate :: prisma :: dipendenti :: impresa :: Include :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: dipendenti :: IncludeParam > :: into (crate :: prisma :: dipendenti :: impresa :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; qualifica $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: dipendenti :: IncludeParam > :: into (crate :: prisma :: dipendenti :: qualifica :: Include :: $ selection_mode (crate :: prisma :: qualifica :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; qualifica $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: dipendenti :: IncludeParam > :: into (crate :: prisma :: dipendenti :: qualifica :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; mansione $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: dipendenti :: IncludeParam > :: into (crate :: prisma :: dipendenti :: mansione :: Include :: $ selection_mode (crate :: prisma :: mansione :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; mansione $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: dipendenti :: IncludeParam > :: into (crate :: prisma :: dipendenti :: mansione :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: dipendenti :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; nome) => { "nome" } ; (@ field_serde_name ; cognome) => { "cognome" } ; (@ field_serde_name ; matricola) => { "matricola" } ; (@ field_serde_name ; data_di_nascita) => { "data_di_nascita" } ; (@ field_serde_name ; luogo_di_nascita) => { "luogo_di_nascita" } ; (@ field_serde_name ; codice_fiscale) => { "codice_fiscale" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; qualifica_id) => { "qualifica_id" } ; (@ field_serde_name ; mansione_id) => { "mansione_id" } ; (@ field_serde_name ; data_dimissioni) => { "data_dimissioni" } ; (@ field_serde_name ; rfid_1) => { "rfid1" } ; (@ field_serde_name ; rfid_2) => { "rfid2" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; qualifica) => { "qualifica" } ; (@ field_serde_name ; mansione) => { "mansione" } ; }
    pub use _include_dipendenti as include;
    pub enum IncludeParam {
        Id(id::Include),
        Nome(nome::Include),
        Cognome(cognome::Include),
        Matricola(matricola::Include),
        DataDiNascita(data_di_nascita::Include),
        LuogoDiNascita(luogo_di_nascita::Include),
        CodiceFiscale(codice_fiscale::Include),
        ImpresaId(impresa_id::Include),
        QualificaId(qualifica_id::Include),
        MansioneId(mansione_id::Include),
        DataDimissioni(data_dimissioni::Include),
        Rfid1(rfid_1::Include),
        Rfid2(rfid_2::Include),
        Impresa(impresa::Include),
        Qualifica(qualifica::Include),
        Mansione(mansione::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Nome(data) => data.to_selection(),
                Self::Cognome(data) => data.to_selection(),
                Self::Matricola(data) => data.to_selection(),
                Self::DataDiNascita(data) => data.to_selection(),
                Self::LuogoDiNascita(data) => data.to_selection(),
                Self::CodiceFiscale(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::QualificaId(data) => data.to_selection(),
                Self::MansioneId(data) => data.to_selection(),
                Self::DataDimissioni(data) => data.to_selection(),
                Self::Rfid1(data) => data.to_selection(),
                Self::Rfid2(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Qualifica(data) => data.to_selection(),
                Self::Mansione(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_dipendenti { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: dipendenti struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "nome")] pub nome : String , # [serde (rename = "cognome")] pub cognome : String , # [serde (rename = "matricola")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub matricola : Option < String > , # [serde (rename = "data_di_nascita")] pub data_di_nascita : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > , # [serde (rename = "luogo_di_nascita")] pub luogo_di_nascita : String , # [serde (rename = "codice_fiscale")] pub codice_fiscale : String , # [serde (rename = "impresa_id")] pub impresa_id : i32 , # [serde (rename = "qualifica_id")] pub qualifica_id : i32 , # [serde (rename = "mansione_id")] pub mansione_id : i32 , # [serde (rename = "data_dimissioni")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub data_dimissioni : Option < :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > > , # [serde (rename = "rfid1")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub rfid_1 : Option < String > , # [serde (rename = "rfid2")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub rfid_2 : Option < String > } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_dipendenti as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "nome")]
        pub nome: String,
        #[serde(rename = "cognome")]
        pub cognome: String,
        #[serde(rename = "matricola")]
        pub matricola: Option<String>,
        #[serde(rename = "data_di_nascita")]
        pub data_di_nascita:
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        #[serde(rename = "luogo_di_nascita")]
        pub luogo_di_nascita: String,
        #[serde(rename = "codice_fiscale")]
        pub codice_fiscale: String,
        #[serde(rename = "impresa_id")]
        pub impresa_id: i32,
        #[serde(rename = "qualifica_id")]
        pub qualifica_id: i32,
        #[serde(rename = "mansione_id")]
        pub mansione_id: i32,
        #[serde(rename = "data_dimissioni")]
        pub data_dimissioni: Option<
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        >,
        #[serde(rename = "rfid1")]
        pub rfid_1: Option<String>,
        #[serde(rename = "rfid2")]
        pub rfid_2: Option<String>,
        #[serde(rename = "impresa")]
        pub impresa: Option<Box<super::imprese::Data>>,
        #[serde(rename = "qualifica")]
        pub qualifica: Option<Box<super::qualifica::Data>>,
        #[serde(rename = "mansione")]
        pub mansione: Option<Box<super::mansione::Data>>,
    }
    impl Data {
        pub fn impresa(
            &self,
        ) -> Result<&super::imprese::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.impresa
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(impresa),
                ))
                .map(|v| v.as_ref())
        }
        pub fn qualifica(
            &self,
        ) -> Result<&super::qualifica::Data, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.qualifica
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(qualifica),
                ))
                .map(|v| v.as_ref())
        }
        pub fn mansione(
            &self,
        ) -> Result<&super::mansione::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.mansione
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(mansione),
                ))
                .map(|v| v.as_ref())
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Impresa(super::imprese::UniqueArgs),
        Qualifica(super::qualifica::UniqueArgs),
        Mansione(super::mansione::UniqueArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Impresa(args) => {
                    let mut selections = < super :: imprese :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(impresa::NAME, None, [], selections)
                }
                Self::Qualifica(args) => {
                    let mut selections = < super :: qualifica :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(qualifica::NAME, None, [], selections)
                }
                Self::Mansione(args) => {
                    let mut selections = < super :: mansione :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(mansione::NAME, None, [], selections)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetNome(String),
        SetCognome(String),
        SetMatricola(Option<String>),
        SetDataDiNascita(
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        ),
        SetLuogoDiNascita(String),
        SetCodiceFiscale(String),
        SetImpresaId(i32),
        IncrementImpresaId(i32),
        DecrementImpresaId(i32),
        MultiplyImpresaId(i32),
        DivideImpresaId(i32),
        SetQualificaId(i32),
        IncrementQualificaId(i32),
        DecrementQualificaId(i32),
        MultiplyQualificaId(i32),
        DivideQualificaId(i32),
        SetMansioneId(i32),
        IncrementMansioneId(i32),
        DecrementMansioneId(i32),
        MultiplyMansioneId(i32),
        DivideMansioneId(i32),
        SetDataDimissioni(
            Option<
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
            >,
        ),
        SetRfid1(Option<String>),
        SetRfid2(Option<String>),
        ConnectImpresa(super::imprese::UniqueWhereParam),
        ConnectQualifica(super::qualifica::UniqueWhereParam),
        ConnectMansione(super::mansione::UniqueWhereParam),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetNome(value) => (
                    nome::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetCognome(value) => (
                    cognome::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetMatricola(value) => (
                    matricola::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetDataDiNascita(value) => (
                    data_di_nascita::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::DateTime(value),
                ),
                SetParam::SetLuogoDiNascita(value) => (
                    luogo_di_nascita::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetCodiceFiscale(value) => (
                    codice_fiscale::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetQualificaId(value) => (
                    qualifica_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementQualificaId(value) => (
                    qualifica_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementQualificaId(value) => (
                    qualifica_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyQualificaId(value) => (
                    qualifica_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideQualificaId(value) => (
                    qualifica_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetMansioneId(value) => (
                    mansione_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementMansioneId(value) => (
                    mansione_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementMansioneId(value) => (
                    mansione_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyMansioneId(value) => (
                    mansione_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideMansioneId(value) => (
                    mansione_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDataDimissioni(value) => (
                    data_dimissioni::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::DateTime(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetRfid1(value) => (
                    rfid_1::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetRfid2(value) => (
                    rfid_2::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::ConnectImpresa(where_param) => (
                    impresa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::imprese::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectQualifica(where_param) => (
                    qualifica::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::qualifica::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectMansione(where_param) => (
                    mansione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::mansione::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        Nome(String),
        Cognome(String),
        Matricola(Option<String>),
        DataDiNascita(
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        ),
        LuogoDiNascita(String),
        CodiceFiscale(String),
        ImpresaId(i32),
        QualificaId(i32),
        MansioneId(i32),
        DataDimissioni(
            Option<
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
            >,
        ),
        Rfid1(Option<String>),
        Rfid2(Option<String>),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Nome(value) => Self::SetNome(value),
                UncheckedSetParam::Cognome(value) => Self::SetCognome(value),
                UncheckedSetParam::Matricola(value) => Self::SetMatricola(value),
                UncheckedSetParam::DataDiNascita(value) => Self::SetDataDiNascita(value),
                UncheckedSetParam::LuogoDiNascita(value) => Self::SetLuogoDiNascita(value),
                UncheckedSetParam::CodiceFiscale(value) => Self::SetCodiceFiscale(value),
                UncheckedSetParam::ImpresaId(value) => Self::SetImpresaId(value),
                UncheckedSetParam::QualificaId(value) => Self::SetQualificaId(value),
                UncheckedSetParam::MansioneId(value) => Self::SetMansioneId(value),
                UncheckedSetParam::DataDimissioni(value) => Self::SetDataDimissioni(value),
                UncheckedSetParam::Rfid1(value) => Self::SetRfid1(value),
                UncheckedSetParam::Rfid2(value) => Self::SetRfid2(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Nome(::prisma_client_rust::Direction),
        Cognome(::prisma_client_rust::Direction),
        Matricola(::prisma_client_rust::Direction),
        DataDiNascita(::prisma_client_rust::Direction),
        LuogoDiNascita(::prisma_client_rust::Direction),
        CodiceFiscale(::prisma_client_rust::Direction),
        ImpresaId(::prisma_client_rust::Direction),
        QualificaId(::prisma_client_rust::Direction),
        MansioneId(::prisma_client_rust::Direction),
        DataDimissioni(::prisma_client_rust::Direction),
        Rfid1(::prisma_client_rust::Direction),
        Rfid2(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Nome(direction) => (
                    nome::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Cognome(direction) => (
                    cognome::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Matricola(direction) => (
                    matricola::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::DataDiNascita(direction) => (
                    data_di_nascita::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::LuogoDiNascita(direction) => (
                    luogo_di_nascita::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::CodiceFiscale(direction) => (
                    codice_fiscale::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ImpresaId(direction) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::QualificaId(direction) => (
                    qualifica_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::MansioneId(direction) => (
                    mansione_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::DataDimissioni(direction) => (
                    data_dimissioni::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Rfid1(direction) => (
                    rfid_1::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Rfid2(direction) => (
                    rfid_2::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        Nome(_prisma::read_filters::StringFilter),
        Cognome(_prisma::read_filters::StringFilter),
        Matricola(_prisma::read_filters::StringNullableFilter),
        DataDiNascita(_prisma::read_filters::DateTimeFilter),
        LuogoDiNascita(_prisma::read_filters::StringFilter),
        CodiceFiscale(_prisma::read_filters::StringFilter),
        ImpresaId(_prisma::read_filters::IntFilter),
        QualificaId(_prisma::read_filters::IntFilter),
        MansioneId(_prisma::read_filters::IntFilter),
        DataDimissioni(_prisma::read_filters::DateTimeNullableFilter),
        Rfid1(_prisma::read_filters::StringNullableFilter),
        Rfid2(_prisma::read_filters::StringNullableFilter),
        ImpresaIs(Vec<super::imprese::WhereParam>),
        ImpresaIsNot(Vec<super::imprese::WhereParam>),
        QualificaIs(Vec<super::qualifica::WhereParam>),
        QualificaIsNot(Vec<super::qualifica::WhereParam>),
        MansioneIs(Vec<super::mansione::WhereParam>),
        MansioneIsNot(Vec<super::mansione::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Nome(value) => (nome::NAME, value.into()),
                Self::Cognome(value) => (cognome::NAME, value.into()),
                Self::Matricola(value) => (matricola::NAME, value.into()),
                Self::DataDiNascita(value) => (data_di_nascita::NAME, value.into()),
                Self::LuogoDiNascita(value) => (luogo_di_nascita::NAME, value.into()),
                Self::CodiceFiscale(value) => (codice_fiscale::NAME, value.into()),
                Self::ImpresaId(value) => (impresa_id::NAME, value.into()),
                Self::QualificaId(value) => (qualifica_id::NAME, value.into()),
                Self::MansioneId(value) => (mansione_id::NAME, value.into()),
                Self::DataDimissioni(value) => (data_dimissioni::NAME, value.into()),
                Self::Rfid1(value) => (rfid_1::NAME, value.into()),
                Self::Rfid2(value) => (rfid_2::NAME, value.into()),
                Self::ImpresaIs(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpresaIsNot(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::QualificaIs(where_params) => (
                    qualifica::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::QualificaIsNot(where_params) => (
                    qualifica::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::MansioneIs(where_params) => (
                    mansione::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::MansioneIsNot(where_params) => (
                    mansione::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(nome::NAME),
                ::prisma_client_rust::sel(cognome::NAME),
                ::prisma_client_rust::sel(matricola::NAME),
                ::prisma_client_rust::sel(data_di_nascita::NAME),
                ::prisma_client_rust::sel(luogo_di_nascita::NAME),
                ::prisma_client_rust::sel(codice_fiscale::NAME),
                ::prisma_client_rust::sel(impresa_id::NAME),
                ::prisma_client_rust::sel(qualifica_id::NAME),
                ::prisma_client_rust::sel(mansione_id::NAME),
                ::prisma_client_rust::sel(data_dimissioni::NAME),
                ::prisma_client_rust::sel(rfid_1::NAME),
                ::prisma_client_rust::sel(rfid_2::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            nome: String,
            cognome: String,
            data_di_nascita: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
            luogo_di_nascita: String,
            codice_fiscale: String,
            impresa: super::imprese::UniqueWhereParam,
            qualifica: super::qualifica::UniqueWhereParam,
            mansione: super::mansione::UniqueWhereParam,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                nome::set(nome),
                cognome::set(cognome),
                data_di_nascita::set(data_di_nascita),
                luogo_di_nascita::set(luogo_di_nascita),
                codice_fiscale::set(codice_fiscale),
                impresa::connect(impresa),
                qualifica::connect(qualifica),
                mansione::connect(mansione),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            nome: String,
            cognome: String,
            data_di_nascita: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
            luogo_di_nascita: String,
            codice_fiscale: String,
            impresa_id: i32,
            qualifica_id: i32,
            mansione_id: i32,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                nome::set(nome),
                cognome::set(cognome),
                data_di_nascita::set(data_di_nascita),
                luogo_di_nascita::set(luogo_di_nascita),
                codice_fiscale::set(codice_fiscale),
                impresa_id::set(impresa_id),
                qualifica_id::set(qualifica_id),
                mansione_id::set(mansione_id),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(
            self,
            data: Vec<(
                String,
                String,
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
                String,
                String,
                i32,
                i32,
                i32,
                Vec<SetParam>,
            )>,
        ) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(
                    |(
                        nome,
                        cognome,
                        data_di_nascita,
                        luogo_di_nascita,
                        codice_fiscale,
                        impresa_id,
                        qualifica_id,
                        mansione_id,
                        mut _params,
                    )| {
                        _params.extend([
                            nome::set(nome),
                            cognome::set(cognome),
                            data_di_nascita::set(data_di_nascita),
                            luogo_di_nascita::set(luogo_di_nascita),
                            codice_fiscale::set(codice_fiscale),
                            impresa_id::set(impresa_id),
                            qualifica_id::set(qualifica_id),
                            mansione_id::set(mansione_id),
                        ]);
                        _params
                    },
                )
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (
                nome,
                cognome,
                data_di_nascita,
                luogo_di_nascita,
                codice_fiscale,
                impresa,
                qualifica,
                mansione,
                mut _params,
            ): (
                String,
                String,
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
                String,
                String,
                super::imprese::UniqueWhereParam,
                super::qualifica::UniqueWhereParam,
                super::mansione::UniqueWhereParam,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                nome::set(nome),
                cognome::set(cognome),
                data_di_nascita::set(data_di_nascita),
                luogo_di_nascita::set(luogo_di_nascita),
                codice_fiscale::set(codice_fiscale),
                impresa::connect(impresa),
                qualifica::connect(qualifica),
                mansione::connect(mansione),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod imprese_associate_utenti {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "ImpreseAssociateUtenti";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod utente_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "utente_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetUtenteId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::UtenteId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::UtenteId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::UtenteId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            UtenteId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementUtenteId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementUtenteId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyUtenteId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideUtenteId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::UtenteId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::UtenteId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetImpresaId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ImpresaId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ImpresaId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::ImpresaId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            ImpresaId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementImpresaId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementImpresaId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyImpresaId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideImpresaId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpresaId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpresaId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod utente {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "utente";
        pub struct Fetch(pub utenti::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<utenti::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Utente(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(utenti::UniqueArgs::new())
        }
        pub struct Connect(utenti::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectUtente(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: utenti::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<utenti::WhereParam>) -> WhereParam {
            WhereParam::UtenteIs(value)
        }
        pub fn is_not(value: Vec<utenti::WhereParam>) -> WhereParam {
            WhereParam::UtenteIsNot(value)
        }
        pub enum Include {
            Select(Vec<utenti::SelectParam>),
            Include(Vec<utenti::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Utente(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <utenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <utenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("utente", None, [], selections)
            }
            pub fn select(nested_selections: Vec<utenti::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<utenti::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<utenti::SelectParam>),
            Include(Vec<utenti::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Utente(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <utenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("utente", None, [], selections)
            }
            pub fn select(nested_selections: Vec<utenti::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<utenti::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod impresa {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa";
        pub struct Fetch(pub imprese::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Impresa(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(imprese::UniqueArgs::new())
        }
        pub struct Connect(imprese::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpresa(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: imprese::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIs(value)
        }
        pub fn is_not(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIsNot(value)
        }
        pub enum Include {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Impresa(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Impresa(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub fn create(
        utente: super::utenti::UniqueWhereParam,
        impresa: super::imprese::UniqueWhereParam,
        _params: Vec<SetParam>,
    ) -> (
        super::utenti::UniqueWhereParam,
        super::imprese::UniqueWhereParam,
        Vec<SetParam>,
    ) {
        (utente, impresa, _params)
    }
    pub fn create_unchecked(
        utente_id: i32,
        impresa_id: i32,
        _params: Vec<SetParam>,
    ) -> (i32, i32, Vec<SetParam>) {
        (utente_id, impresa_id, _params)
    }
    #[macro_export]
    macro_rules ! _select_imprese_associate_utenti { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: imprese_associate_utenti :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese_associate_utenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: imprese_associate_utenti :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: imprese_associate_utenti :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese_associate_utenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: imprese_associate_utenti :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , utente_id , impresa_id , utente , impresa } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: imprese_associate_utenti :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: imprese_associate_utenti :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: imprese_associate_utenti :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: imprese_associate_utenti :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_associate_utenti :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_associate_utenti :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "utente_id" , "impresa_id" , "utente" , "impresa"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: imprese_associate_utenti :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; utente_id) => { i32 } ; (@ field_type ; impresa_id) => { i32 } ; (@ field_type ; utente : $ selection_mode : ident { $ ($ selections : tt) + }) => { utente :: Data } ; (@ field_type ; utente) => { crate :: prisma :: utenti :: Data } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "ImpreseAssociateUtenti" , available relations are "id, utente_id, impresa_id, utente, impresa")) } ; (@ field_module ; utente : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: utenti :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: imprese_associate_utenti :: SelectParam > :: into (crate :: prisma :: imprese_associate_utenti :: id :: Select) } ; (@ selection_field_to_selection_param ; utente_id) => { Into :: < crate :: prisma :: imprese_associate_utenti :: SelectParam > :: into (crate :: prisma :: imprese_associate_utenti :: utente_id :: Select) } ; (@ selection_field_to_selection_param ; impresa_id) => { Into :: < crate :: prisma :: imprese_associate_utenti :: SelectParam > :: into (crate :: prisma :: imprese_associate_utenti :: impresa_id :: Select) } ; (@ selection_field_to_selection_param ; utente $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese_associate_utenti :: SelectParam > :: into (crate :: prisma :: imprese_associate_utenti :: utente :: Select :: $ selection_mode (crate :: prisma :: utenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; utente $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese_associate_utenti :: SelectParam > :: into (crate :: prisma :: imprese_associate_utenti :: utente :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese_associate_utenti :: SelectParam > :: into (crate :: prisma :: imprese_associate_utenti :: impresa :: Select :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese_associate_utenti :: SelectParam > :: into (crate :: prisma :: imprese_associate_utenti :: impresa :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: imprese_associate_utenti :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; utente_id) => { "utente_id" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; utente) => { "utente" } ; (@ field_serde_name ; impresa) => { "impresa" } ; }
    pub use _select_imprese_associate_utenti as select;
    pub enum SelectParam {
        Id(id::Select),
        UtenteId(utente_id::Select),
        ImpresaId(impresa_id::Select),
        Utente(utente::Select),
        Impresa(impresa::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::UtenteId(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::Utente(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_imprese_associate_utenti { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: imprese_associate_utenti :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese_associate_utenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: imprese_associate_utenti :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: imprese_associate_utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: imprese_associate_utenti :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese_associate_utenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: imprese_associate_utenti :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: imprese_associate_utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { utente , impresa } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub utente_id : i32 , pub impresa_id : i32 , $ (pub $ field : crate :: prisma :: imprese_associate_utenti :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (utente_id) , stringify ! (impresa_id)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: imprese_associate_utenti :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: imprese_associate_utenti :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: imprese_associate_utenti :: utente_id :: NAME , & self . utente_id) ? ; state . serialize_field (crate :: prisma :: imprese_associate_utenti :: impresa_id :: NAME , & self . impresa_id) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , utente_id , impresa_id } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: imprese_associate_utenti :: $ field :: NAME) , + , crate :: prisma :: imprese_associate_utenti :: id :: NAME , crate :: prisma :: imprese_associate_utenti :: utente_id :: NAME , crate :: prisma :: imprese_associate_utenti :: impresa_id :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: imprese_associate_utenti :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: imprese_associate_utenti :: id :: NAME => Ok (Field :: id) , crate :: prisma :: imprese_associate_utenti :: utente_id :: NAME => Ok (Field :: utente_id) , crate :: prisma :: imprese_associate_utenti :: impresa_id :: NAME => Ok (Field :: impresa_id) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut utente_id = None ; let mut impresa_id = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_associate_utenti :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: utente_id => { if utente_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_associate_utenti :: utente_id :: NAME)) ; } utente_id = Some (map . next_value () ?) ; } Field :: impresa_id => { if impresa_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_associate_utenti :: impresa_id :: NAME)) ; } impresa_id = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_associate_utenti :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_associate_utenti :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_associate_utenti :: id :: NAME)) ? ; let utente_id = utente_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_associate_utenti :: utente_id :: NAME)) ? ; let impresa_id = impresa_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_associate_utenti :: impresa_id :: NAME)) ? ; Ok (Data { id , utente_id , impresa_id , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "utente_id" , "impresa_id" , "utente" , "impresa"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: imprese_associate_utenti :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; utente : $ selection_mode : ident { $ ($ selections : tt) + }) => { utente :: Data } ; (@ field_type ; utente) => { crate :: prisma :: utenti :: Data } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "ImpreseAssociateUtenti" , available relations are "utente, impresa")) } ; (@ field_module ; utente : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: utenti :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; utente $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese_associate_utenti :: IncludeParam > :: into (crate :: prisma :: imprese_associate_utenti :: utente :: Include :: $ selection_mode (crate :: prisma :: utenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; utente $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese_associate_utenti :: IncludeParam > :: into (crate :: prisma :: imprese_associate_utenti :: utente :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese_associate_utenti :: IncludeParam > :: into (crate :: prisma :: imprese_associate_utenti :: impresa :: Include :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese_associate_utenti :: IncludeParam > :: into (crate :: prisma :: imprese_associate_utenti :: impresa :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: imprese_associate_utenti :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; utente_id) => { "utente_id" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; utente) => { "utente" } ; (@ field_serde_name ; impresa) => { "impresa" } ; }
    pub use _include_imprese_associate_utenti as include;
    pub enum IncludeParam {
        Id(id::Include),
        UtenteId(utente_id::Include),
        ImpresaId(impresa_id::Include),
        Utente(utente::Include),
        Impresa(impresa::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::UtenteId(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::Utente(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_imprese_associate_utenti { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: imprese_associate_utenti struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "utente_id")] pub utente_id : i32 , # [serde (rename = "impresa_id")] pub impresa_id : i32 } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_imprese_associate_utenti as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "utente_id")]
        pub utente_id: i32,
        #[serde(rename = "impresa_id")]
        pub impresa_id: i32,
        #[serde(rename = "utente")]
        pub utente: Option<Box<super::utenti::Data>>,
        #[serde(rename = "impresa")]
        pub impresa: Option<Box<super::imprese::Data>>,
    }
    impl Data {
        pub fn utente(
            &self,
        ) -> Result<&super::utenti::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.utente
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(utente),
                ))
                .map(|v| v.as_ref())
        }
        pub fn impresa(
            &self,
        ) -> Result<&super::imprese::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.impresa
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(impresa),
                ))
                .map(|v| v.as_ref())
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Utente(super::utenti::UniqueArgs),
        Impresa(super::imprese::UniqueArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Utente(args) => {
                    let mut selections = < super :: utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(utente::NAME, None, [], selections)
                }
                Self::Impresa(args) => {
                    let mut selections = < super :: imprese :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(impresa::NAME, None, [], selections)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetUtenteId(i32),
        IncrementUtenteId(i32),
        DecrementUtenteId(i32),
        MultiplyUtenteId(i32),
        DivideUtenteId(i32),
        SetImpresaId(i32),
        IncrementImpresaId(i32),
        DecrementImpresaId(i32),
        MultiplyImpresaId(i32),
        DivideImpresaId(i32),
        ConnectUtente(super::utenti::UniqueWhereParam),
        ConnectImpresa(super::imprese::UniqueWhereParam),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetUtenteId(value) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementUtenteId(value) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementUtenteId(value) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyUtenteId(value) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideUtenteId(value) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::ConnectUtente(where_param) => (
                    utente::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectImpresa(where_param) => (
                    impresa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::imprese::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        UtenteId(i32),
        ImpresaId(i32),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::UtenteId(value) => Self::SetUtenteId(value),
                UncheckedSetParam::ImpresaId(value) => Self::SetImpresaId(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        UtenteId(::prisma_client_rust::Direction),
        ImpresaId(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::UtenteId(direction) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ImpresaId(direction) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        UtenteId(_prisma::read_filters::IntFilter),
        ImpresaId(_prisma::read_filters::IntFilter),
        UtenteIs(Vec<super::utenti::WhereParam>),
        UtenteIsNot(Vec<super::utenti::WhereParam>),
        ImpresaIs(Vec<super::imprese::WhereParam>),
        ImpresaIsNot(Vec<super::imprese::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::UtenteId(value) => (utente_id::NAME, value.into()),
                Self::ImpresaId(value) => (impresa_id::NAME, value.into()),
                Self::UtenteIs(where_params) => (
                    utente::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::UtenteIsNot(where_params) => (
                    utente::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpresaIs(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpresaIsNot(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(utente_id::NAME),
                ::prisma_client_rust::sel(impresa_id::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            utente: super::utenti::UniqueWhereParam,
            impresa: super::imprese::UniqueWhereParam,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([utente::connect(utente), impresa::connect(impresa)]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            utente_id: i32,
            impresa_id: i32,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([utente_id::set(utente_id), impresa_id::set(impresa_id)]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(i32, i32, Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(utente_id, impresa_id, mut _params)| {
                    _params.extend([utente_id::set(utente_id), impresa_id::set(impresa_id)]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (utente, impresa, mut _params): (
                super::utenti::UniqueWhereParam,
                super::imprese::UniqueWhereParam,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([utente::connect(utente), impresa::connect(impresa)]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod imprese_collegate {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "ImpreseCollegate";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetImpresaId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ImpresaId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ImpresaId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::ImpresaId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            ImpresaId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementImpresaId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementImpresaId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyImpresaId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideImpresaId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpresaId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpresaId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod imprese_collegata_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "imprese_collegata_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetImpreseCollegataId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ImpreseCollegataId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ImpreseCollegataId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::ImpreseCollegataId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            ImpreseCollegataId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementImpreseCollegataId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementImpreseCollegataId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyImpreseCollegataId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideImpreseCollegataId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpreseCollegataId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpreseCollegataId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod ruolo_impresa {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "ruolo_impresa";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRuoloImpresa(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::RuoloImpresa(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::RuoloImpresa(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::RuoloImpresa(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            RuoloImpresa,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::RuoloImpresa(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::RuoloImpresa(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa";
        pub struct Fetch(pub imprese::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Impresa(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(imprese::UniqueArgs::new())
        }
        pub struct Connect(imprese::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpresa(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: imprese::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIs(value)
        }
        pub fn is_not(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIsNot(value)
        }
        pub enum Include {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Impresa(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Impresa(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod collegata {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "collegata";
        pub struct Fetch(pub imprese::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Collegata(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(imprese::UniqueArgs::new())
        }
        pub struct Connect(imprese::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectCollegata(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: imprese::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::CollegataIs(value)
        }
        pub fn is_not(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::CollegataIsNot(value)
        }
        pub enum Include {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Collegata(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("collegata", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Collegata(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("collegata", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub fn create(
        ruolo_impresa: String,
        impresa: super::imprese::UniqueWhereParam,
        collegata: super::imprese::UniqueWhereParam,
        _params: Vec<SetParam>,
    ) -> (
        String,
        super::imprese::UniqueWhereParam,
        super::imprese::UniqueWhereParam,
        Vec<SetParam>,
    ) {
        (ruolo_impresa, impresa, collegata, _params)
    }
    pub fn create_unchecked(
        impresa_id: i32,
        imprese_collegata_id: i32,
        ruolo_impresa: String,
        _params: Vec<SetParam>,
    ) -> (i32, i32, String, Vec<SetParam>) {
        (impresa_id, imprese_collegata_id, ruolo_impresa, _params)
    }
    #[macro_export]
    macro_rules ! _select_imprese_collegate { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: imprese_collegate :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese_collegate :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: imprese_collegate :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: imprese_collegate :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese_collegate :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: imprese_collegate :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , impresa_id , imprese_collegata_id , ruolo_impresa , impresa , collegata } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: imprese_collegate :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: imprese_collegate :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: imprese_collegate :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: imprese_collegate :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_collegate :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_collegate :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "impresa_id" , "imprese_collegata_id" , "ruolo_impresa" , "impresa" , "collegata"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: imprese_collegate :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; impresa_id) => { i32 } ; (@ field_type ; imprese_collegata_id) => { i32 } ; (@ field_type ; ruolo_impresa) => { String } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; collegata : $ selection_mode : ident { $ ($ selections : tt) + }) => { collegata :: Data } ; (@ field_type ; collegata) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "ImpreseCollegate" , available relations are "id, impresa_id, imprese_collegata_id, ruolo_impresa, impresa, collegata")) } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; collegata : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: imprese_collegate :: SelectParam > :: into (crate :: prisma :: imprese_collegate :: id :: Select) } ; (@ selection_field_to_selection_param ; impresa_id) => { Into :: < crate :: prisma :: imprese_collegate :: SelectParam > :: into (crate :: prisma :: imprese_collegate :: impresa_id :: Select) } ; (@ selection_field_to_selection_param ; imprese_collegata_id) => { Into :: < crate :: prisma :: imprese_collegate :: SelectParam > :: into (crate :: prisma :: imprese_collegate :: imprese_collegata_id :: Select) } ; (@ selection_field_to_selection_param ; ruolo_impresa) => { Into :: < crate :: prisma :: imprese_collegate :: SelectParam > :: into (crate :: prisma :: imprese_collegate :: ruolo_impresa :: Select) } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese_collegate :: SelectParam > :: into (crate :: prisma :: imprese_collegate :: impresa :: Select :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese_collegate :: SelectParam > :: into (crate :: prisma :: imprese_collegate :: impresa :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; collegata $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese_collegate :: SelectParam > :: into (crate :: prisma :: imprese_collegate :: collegata :: Select :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; collegata $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese_collegate :: SelectParam > :: into (crate :: prisma :: imprese_collegate :: collegata :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: imprese_collegate :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; imprese_collegata_id) => { "imprese_collegata_id" } ; (@ field_serde_name ; ruolo_impresa) => { "ruolo_impresa" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; collegata) => { "collegata" } ; }
    pub use _select_imprese_collegate as select;
    pub enum SelectParam {
        Id(id::Select),
        ImpresaId(impresa_id::Select),
        ImpreseCollegataId(imprese_collegata_id::Select),
        RuoloImpresa(ruolo_impresa::Select),
        Impresa(impresa::Select),
        Collegata(collegata::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::ImpreseCollegataId(data) => data.to_selection(),
                Self::RuoloImpresa(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Collegata(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_imprese_collegate { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: imprese_collegate :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese_collegate :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: imprese_collegate :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: imprese_collegate :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: imprese_collegate :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese_collegate :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: imprese_collegate :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: imprese_collegate :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { impresa , collegata } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub impresa_id : i32 , pub imprese_collegata_id : i32 , pub ruolo_impresa : String , $ (pub $ field : crate :: prisma :: imprese_collegate :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (impresa_id) , stringify ! (imprese_collegata_id) , stringify ! (ruolo_impresa)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: imprese_collegate :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: imprese_collegate :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: imprese_collegate :: impresa_id :: NAME , & self . impresa_id) ? ; state . serialize_field (crate :: prisma :: imprese_collegate :: imprese_collegata_id :: NAME , & self . imprese_collegata_id) ? ; state . serialize_field (crate :: prisma :: imprese_collegate :: ruolo_impresa :: NAME , & self . ruolo_impresa) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , impresa_id , imprese_collegata_id , ruolo_impresa } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: imprese_collegate :: $ field :: NAME) , + , crate :: prisma :: imprese_collegate :: id :: NAME , crate :: prisma :: imprese_collegate :: impresa_id :: NAME , crate :: prisma :: imprese_collegate :: imprese_collegata_id :: NAME , crate :: prisma :: imprese_collegate :: ruolo_impresa :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: imprese_collegate :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: imprese_collegate :: id :: NAME => Ok (Field :: id) , crate :: prisma :: imprese_collegate :: impresa_id :: NAME => Ok (Field :: impresa_id) , crate :: prisma :: imprese_collegate :: imprese_collegata_id :: NAME => Ok (Field :: imprese_collegata_id) , crate :: prisma :: imprese_collegate :: ruolo_impresa :: NAME => Ok (Field :: ruolo_impresa) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut impresa_id = None ; let mut imprese_collegata_id = None ; let mut ruolo_impresa = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_collegate :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: impresa_id => { if impresa_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_collegate :: impresa_id :: NAME)) ; } impresa_id = Some (map . next_value () ?) ; } Field :: imprese_collegata_id => { if imprese_collegata_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_collegate :: imprese_collegata_id :: NAME)) ; } imprese_collegata_id = Some (map . next_value () ?) ; } Field :: ruolo_impresa => { if ruolo_impresa . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_collegate :: ruolo_impresa :: NAME)) ; } ruolo_impresa = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese_collegate :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_collegate :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_collegate :: id :: NAME)) ? ; let impresa_id = impresa_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_collegate :: impresa_id :: NAME)) ? ; let imprese_collegata_id = imprese_collegata_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_collegate :: imprese_collegata_id :: NAME)) ? ; let ruolo_impresa = ruolo_impresa . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese_collegate :: ruolo_impresa :: NAME)) ? ; Ok (Data { id , impresa_id , imprese_collegata_id , ruolo_impresa , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "impresa_id" , "imprese_collegata_id" , "ruolo_impresa" , "impresa" , "collegata"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: imprese_collegate :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; collegata : $ selection_mode : ident { $ ($ selections : tt) + }) => { collegata :: Data } ; (@ field_type ; collegata) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "ImpreseCollegate" , available relations are "impresa, collegata")) } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; collegata : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese_collegate :: IncludeParam > :: into (crate :: prisma :: imprese_collegate :: impresa :: Include :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese_collegate :: IncludeParam > :: into (crate :: prisma :: imprese_collegate :: impresa :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; collegata $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese_collegate :: IncludeParam > :: into (crate :: prisma :: imprese_collegate :: collegata :: Include :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; collegata $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese_collegate :: IncludeParam > :: into (crate :: prisma :: imprese_collegate :: collegata :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: imprese_collegate :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; imprese_collegata_id) => { "imprese_collegata_id" } ; (@ field_serde_name ; ruolo_impresa) => { "ruolo_impresa" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; collegata) => { "collegata" } ; }
    pub use _include_imprese_collegate as include;
    pub enum IncludeParam {
        Id(id::Include),
        ImpresaId(impresa_id::Include),
        ImpreseCollegataId(imprese_collegata_id::Include),
        RuoloImpresa(ruolo_impresa::Include),
        Impresa(impresa::Include),
        Collegata(collegata::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::ImpreseCollegataId(data) => data.to_selection(),
                Self::RuoloImpresa(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Collegata(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_imprese_collegate { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: imprese_collegate struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "impresa_id")] pub impresa_id : i32 , # [serde (rename = "imprese_collegata_id")] pub imprese_collegata_id : i32 , # [serde (rename = "ruolo_impresa")] pub ruolo_impresa : String } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_imprese_collegate as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "impresa_id")]
        pub impresa_id: i32,
        #[serde(rename = "imprese_collegata_id")]
        pub imprese_collegata_id: i32,
        #[serde(rename = "ruolo_impresa")]
        pub ruolo_impresa: String,
        #[serde(rename = "impresa")]
        pub impresa: Option<Box<super::imprese::Data>>,
        #[serde(rename = "collegata")]
        pub collegata: Option<Box<super::imprese::Data>>,
    }
    impl Data {
        pub fn impresa(
            &self,
        ) -> Result<&super::imprese::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.impresa
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(impresa),
                ))
                .map(|v| v.as_ref())
        }
        pub fn collegata(
            &self,
        ) -> Result<&super::imprese::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.collegata
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(collegata),
                ))
                .map(|v| v.as_ref())
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Impresa(super::imprese::UniqueArgs),
        Collegata(super::imprese::UniqueArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Impresa(args) => {
                    let mut selections = < super :: imprese :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(impresa::NAME, None, [], selections)
                }
                Self::Collegata(args) => {
                    let mut selections = < super :: imprese :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(collegata::NAME, None, [], selections)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetImpresaId(i32),
        IncrementImpresaId(i32),
        DecrementImpresaId(i32),
        MultiplyImpresaId(i32),
        DivideImpresaId(i32),
        SetImpreseCollegataId(i32),
        IncrementImpreseCollegataId(i32),
        DecrementImpreseCollegataId(i32),
        MultiplyImpreseCollegataId(i32),
        DivideImpreseCollegataId(i32),
        SetRuoloImpresa(String),
        ConnectImpresa(super::imprese::UniqueWhereParam),
        ConnectCollegata(super::imprese::UniqueWhereParam),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetImpreseCollegataId(value) => (
                    imprese_collegata_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementImpreseCollegataId(value) => (
                    imprese_collegata_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementImpreseCollegataId(value) => (
                    imprese_collegata_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyImpreseCollegataId(value) => (
                    imprese_collegata_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideImpreseCollegataId(value) => (
                    imprese_collegata_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetRuoloImpresa(value) => (
                    ruolo_impresa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::ConnectImpresa(where_param) => (
                    impresa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::imprese::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectCollegata(where_param) => (
                    collegata::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::imprese::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        ImpresaId(i32),
        ImpreseCollegataId(i32),
        RuoloImpresa(String),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::ImpresaId(value) => Self::SetImpresaId(value),
                UncheckedSetParam::ImpreseCollegataId(value) => Self::SetImpreseCollegataId(value),
                UncheckedSetParam::RuoloImpresa(value) => Self::SetRuoloImpresa(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        ImpresaId(::prisma_client_rust::Direction),
        ImpreseCollegataId(::prisma_client_rust::Direction),
        RuoloImpresa(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ImpresaId(direction) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ImpreseCollegataId(direction) => (
                    imprese_collegata_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::RuoloImpresa(direction) => (
                    ruolo_impresa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        ImpresaId(_prisma::read_filters::IntFilter),
        ImpreseCollegataId(_prisma::read_filters::IntFilter),
        RuoloImpresa(_prisma::read_filters::StringFilter),
        ImpresaIs(Vec<super::imprese::WhereParam>),
        ImpresaIsNot(Vec<super::imprese::WhereParam>),
        CollegataIs(Vec<super::imprese::WhereParam>),
        CollegataIsNot(Vec<super::imprese::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::ImpresaId(value) => (impresa_id::NAME, value.into()),
                Self::ImpreseCollegataId(value) => (imprese_collegata_id::NAME, value.into()),
                Self::RuoloImpresa(value) => (ruolo_impresa::NAME, value.into()),
                Self::ImpresaIs(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpresaIsNot(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::CollegataIs(where_params) => (
                    collegata::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::CollegataIsNot(where_params) => (
                    collegata::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(impresa_id::NAME),
                ::prisma_client_rust::sel(imprese_collegata_id::NAME),
                ::prisma_client_rust::sel(ruolo_impresa::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            ruolo_impresa: String,
            impresa: super::imprese::UniqueWhereParam,
            collegata: super::imprese::UniqueWhereParam,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                ruolo_impresa::set(ruolo_impresa),
                impresa::connect(impresa),
                collegata::connect(collegata),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            impresa_id: i32,
            imprese_collegata_id: i32,
            ruolo_impresa: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                impresa_id::set(impresa_id),
                imprese_collegata_id::set(imprese_collegata_id),
                ruolo_impresa::set(ruolo_impresa),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(i32, i32, String, Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(
                    |(impresa_id, imprese_collegata_id, ruolo_impresa, mut _params)| {
                        _params.extend([
                            impresa_id::set(impresa_id),
                            imprese_collegata_id::set(imprese_collegata_id),
                            ruolo_impresa::set(ruolo_impresa),
                        ]);
                        _params
                    },
                )
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (ruolo_impresa, impresa, collegata, mut _params): (
                String,
                super::imprese::UniqueWhereParam,
                super::imprese::UniqueWhereParam,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                ruolo_impresa::set(ruolo_impresa),
                impresa::connect(impresa),
                collegata::connect(collegata),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod imprese {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Imprese";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod ragione_sociale {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "ragione_sociale";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRagioneSociale(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::RagioneSociale(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::RagioneSociale(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::RagioneSociale(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            RagioneSociale,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::RagioneSociale(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::RagioneSociale(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod indirizzo {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "indirizzo";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIndirizzo(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Indirizzo(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Indirizzo(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Indirizzo(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Indirizzo,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Indirizzo(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Indirizzo(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod partita_iva {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "partita_iva";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetPartitaIva(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::PartitaIva(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::PartitaIva(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::PartitaIva(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            PartitaIva,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::PartitaIva(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::PartitaIva(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod utenti {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "utenti";
        pub struct Fetch(pub utenti::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<utenti::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: utenti::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: utenti::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Utenti(v)
            }
        }
        pub fn fetch(params: Vec<utenti::WhereParam>) -> Fetch {
            Fetch(utenti::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<utenti::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectUtenti(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<utenti::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<utenti::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectUtenti(params)
        }
        pub fn set(params: Vec<utenti::UniqueWhereParam>) -> SetParam {
            SetParam::SetUtenti(params)
        }
        pub fn some(value: Vec<utenti::WhereParam>) -> WhereParam {
            WhereParam::UtentiSome(value)
        }
        pub fn every(value: Vec<utenti::WhereParam>) -> WhereParam {
            WhereParam::UtentiEvery(value)
        }
        pub fn none(value: Vec<utenti::WhereParam>) -> WhereParam {
            WhereParam::UtentiNone(value)
        }
        pub enum Include {
            Select(utenti::ManyArgs, Vec<utenti::SelectParam>),
            Include(utenti::ManyArgs, Vec<utenti::IncludeParam>),
            Fetch(utenti::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Utenti(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections =
                            <utenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <utenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: utenti::ManyArgs,
                nested_selections: Vec<utenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: utenti::ManyArgs,
                nested_selections: Vec<utenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(utenti::ManyArgs, Vec<utenti::SelectParam>),
            Include(utenti::ManyArgs, Vec<utenti::IncludeParam>),
            Fetch(utenti::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Utenti(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <utenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: utenti::ManyArgs,
                nested_selections: Vec<utenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: utenti::ManyArgs,
                nested_selections: Vec<utenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod autovetture {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "autovetture";
        pub struct Fetch(pub autovetture::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<autovetture::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: autovetture::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: autovetture::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Autovetture(v)
            }
        }
        pub fn fetch(params: Vec<autovetture::WhereParam>) -> Fetch {
            Fetch(autovetture::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<autovetture::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectAutovetture(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<autovetture::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<autovetture::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectAutovetture(params)
        }
        pub fn set(params: Vec<autovetture::UniqueWhereParam>) -> SetParam {
            SetParam::SetAutovetture(params)
        }
        pub fn some(value: Vec<autovetture::WhereParam>) -> WhereParam {
            WhereParam::AutovettureSome(value)
        }
        pub fn every(value: Vec<autovetture::WhereParam>) -> WhereParam {
            WhereParam::AutovettureEvery(value)
        }
        pub fn none(value: Vec<autovetture::WhereParam>) -> WhereParam {
            WhereParam::AutovettureNone(value)
        }
        pub enum Include {
            Select(autovetture::ManyArgs, Vec<autovetture::SelectParam>),
            Include(autovetture::ManyArgs, Vec<autovetture::IncludeParam>),
            Fetch(autovetture::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Autovetture(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < autovetture :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <autovetture::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: autovetture::ManyArgs,
                nested_selections: Vec<autovetture::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: autovetture::ManyArgs,
                nested_selections: Vec<autovetture::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(autovetture::ManyArgs, Vec<autovetture::SelectParam>),
            Include(autovetture::ManyArgs, Vec<autovetture::IncludeParam>),
            Fetch(autovetture::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Autovetture(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <autovetture::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: autovetture::ManyArgs,
                nested_selections: Vec<autovetture::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: autovetture::ManyArgs,
                nested_selections: Vec<autovetture::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod mezzi {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "mezzi";
        pub struct Fetch(pub mezzi::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<mezzi::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: mezzi::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: mezzi::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Mezzi(v)
            }
        }
        pub fn fetch(params: Vec<mezzi::WhereParam>) -> Fetch {
            Fetch(mezzi::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<mezzi::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectMezzi(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<mezzi::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<mezzi::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectMezzi(params)
        }
        pub fn set(params: Vec<mezzi::UniqueWhereParam>) -> SetParam {
            SetParam::SetMezzi(params)
        }
        pub fn some(value: Vec<mezzi::WhereParam>) -> WhereParam {
            WhereParam::MezziSome(value)
        }
        pub fn every(value: Vec<mezzi::WhereParam>) -> WhereParam {
            WhereParam::MezziEvery(value)
        }
        pub fn none(value: Vec<mezzi::WhereParam>) -> WhereParam {
            WhereParam::MezziNone(value)
        }
        pub enum Include {
            Select(mezzi::ManyArgs, Vec<mezzi::SelectParam>),
            Include(mezzi::ManyArgs, Vec<mezzi::IncludeParam>),
            Fetch(mezzi::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Mezzi(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections =
                            <mezzi::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <mezzi::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: mezzi::ManyArgs,
                nested_selections: Vec<mezzi::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: mezzi::ManyArgs,
                nested_selections: Vec<mezzi::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(mezzi::ManyArgs, Vec<mezzi::SelectParam>),
            Include(mezzi::ManyArgs, Vec<mezzi::IncludeParam>),
            Fetch(mezzi::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Mezzi(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <mezzi::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: mezzi::ManyArgs,
                nested_selections: Vec<mezzi::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: mezzi::ManyArgs,
                nested_selections: Vec<mezzi::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod dipendenti {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "dipendenti";
        pub struct Fetch(pub dipendenti::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<dipendenti::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: dipendenti::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: dipendenti::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Dipendenti(v)
            }
        }
        pub fn fetch(params: Vec<dipendenti::WhereParam>) -> Fetch {
            Fetch(dipendenti::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<dipendenti::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectDipendenti(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<dipendenti::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<dipendenti::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectDipendenti(params)
        }
        pub fn set(params: Vec<dipendenti::UniqueWhereParam>) -> SetParam {
            SetParam::SetDipendenti(params)
        }
        pub fn some(value: Vec<dipendenti::WhereParam>) -> WhereParam {
            WhereParam::DipendentiSome(value)
        }
        pub fn every(value: Vec<dipendenti::WhereParam>) -> WhereParam {
            WhereParam::DipendentiEvery(value)
        }
        pub fn none(value: Vec<dipendenti::WhereParam>) -> WhereParam {
            WhereParam::DipendentiNone(value)
        }
        pub enum Include {
            Select(dipendenti::ManyArgs, Vec<dipendenti::SelectParam>),
            Include(dipendenti::ManyArgs, Vec<dipendenti::IncludeParam>),
            Fetch(dipendenti::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Dipendenti(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < dipendenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <dipendenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(dipendenti::ManyArgs, Vec<dipendenti::SelectParam>),
            Include(dipendenti::ManyArgs, Vec<dipendenti::IncludeParam>),
            Fetch(dipendenti::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Dipendenti(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <dipendenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod imprese_collegate {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "imprese_collegate";
        pub struct Fetch(pub imprese_collegate::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese_collegate::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: imprese_collegate::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: imprese_collegate::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::ImpreseCollegate(v)
            }
        }
        pub fn fetch(params: Vec<imprese_collegate::WhereParam>) -> Fetch {
            Fetch(imprese_collegate::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<imprese_collegate::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpreseCollegate(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<imprese_collegate::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<imprese_collegate::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectImpreseCollegate(params)
        }
        pub fn set(params: Vec<imprese_collegate::UniqueWhereParam>) -> SetParam {
            SetParam::SetImpreseCollegate(params)
        }
        pub fn some(value: Vec<imprese_collegate::WhereParam>) -> WhereParam {
            WhereParam::ImpreseCollegateSome(value)
        }
        pub fn every(value: Vec<imprese_collegate::WhereParam>) -> WhereParam {
            WhereParam::ImpreseCollegateEvery(value)
        }
        pub fn none(value: Vec<imprese_collegate::WhereParam>) -> WhereParam {
            WhereParam::ImpreseCollegateNone(value)
        }
        pub enum Include {
            Select(
                imprese_collegate::ManyArgs,
                Vec<imprese_collegate::SelectParam>,
            ),
            Include(
                imprese_collegate::ManyArgs,
                Vec<imprese_collegate::IncludeParam>,
            ),
            Fetch(imprese_collegate::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpreseCollegate(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args , selections) = match self { Self :: Select (args , selections) => (args . to_graphql () . 0 , selections . into_iter () . map (| s | s . to_selection ()) . collect ()) , Self :: Include (args , selections) => (args . to_graphql () . 0 , { let mut nested_selections = < imprese_collegate :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections }) , Self :: Fetch (args) => (args . to_graphql () . 0 , < imprese_collegate :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) } ;
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: imprese_collegate::ManyArgs,
                nested_selections: Vec<imprese_collegate::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: imprese_collegate::ManyArgs,
                nested_selections: Vec<imprese_collegate::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(
                imprese_collegate::ManyArgs,
                Vec<imprese_collegate::SelectParam>,
            ),
            Include(
                imprese_collegate::ManyArgs,
                Vec<imprese_collegate::IncludeParam>,
            ),
            Fetch(imprese_collegate::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpreseCollegate(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args , selections) = match self { Self :: Select (args , selections) => (args . to_graphql () . 0 , selections . into_iter () . map (| s | s . to_selection ()) . collect ()) , Self :: Include (args , selections) => (args . to_graphql () . 0 , { let mut nested_selections = vec ! [] ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections }) , Self :: Fetch (args) => (args . to_graphql () . 0 , < imprese_collegate :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) } ;
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: imprese_collegate::ManyArgs,
                nested_selections: Vec<imprese_collegate::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: imprese_collegate::ManyArgs,
                nested_selections: Vec<imprese_collegate::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod imprese_associate {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "imprese_associate";
        pub struct Fetch(pub imprese_associate_utenti::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese_associate_utenti::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: imprese_associate_utenti::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: imprese_associate_utenti::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::ImpreseAssociate(v)
            }
        }
        pub fn fetch(params: Vec<imprese_associate_utenti::WhereParam>) -> Fetch {
            Fetch(imprese_associate_utenti::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<imprese_associate_utenti::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpreseAssociate(v)
            }
        }
        pub fn connect<T: From<Connect>>(
            params: Vec<imprese_associate_utenti::UniqueWhereParam>,
        ) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<imprese_associate_utenti::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectImpreseAssociate(params)
        }
        pub fn set(params: Vec<imprese_associate_utenti::UniqueWhereParam>) -> SetParam {
            SetParam::SetImpreseAssociate(params)
        }
        pub fn some(value: Vec<imprese_associate_utenti::WhereParam>) -> WhereParam {
            WhereParam::ImpreseAssociateSome(value)
        }
        pub fn every(value: Vec<imprese_associate_utenti::WhereParam>) -> WhereParam {
            WhereParam::ImpreseAssociateEvery(value)
        }
        pub fn none(value: Vec<imprese_associate_utenti::WhereParam>) -> WhereParam {
            WhereParam::ImpreseAssociateNone(value)
        }
        pub enum Include {
            Select(
                imprese_associate_utenti::ManyArgs,
                Vec<imprese_associate_utenti::SelectParam>,
            ),
            Include(
                imprese_associate_utenti::ManyArgs,
                Vec<imprese_associate_utenti::IncludeParam>,
            ),
            Fetch(imprese_associate_utenti::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpreseAssociate(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args , selections) = match self { Self :: Select (args , selections) => (args . to_graphql () . 0 , selections . into_iter () . map (| s | s . to_selection ()) . collect ()) , Self :: Include (args , selections) => (args . to_graphql () . 0 , { let mut nested_selections = < imprese_associate_utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections }) , Self :: Fetch (args) => (args . to_graphql () . 0 , < imprese_associate_utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) } ;
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: imprese_associate_utenti::ManyArgs,
                nested_selections: Vec<imprese_associate_utenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: imprese_associate_utenti::ManyArgs,
                nested_selections: Vec<imprese_associate_utenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(
                imprese_associate_utenti::ManyArgs,
                Vec<imprese_associate_utenti::SelectParam>,
            ),
            Include(
                imprese_associate_utenti::ManyArgs,
                Vec<imprese_associate_utenti::IncludeParam>,
            ),
            Fetch(imprese_associate_utenti::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpreseAssociate(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args , selections) = match self { Self :: Select (args , selections) => (args . to_graphql () . 0 , selections . into_iter () . map (| s | s . to_selection ()) . collect ()) , Self :: Include (args , selections) => (args . to_graphql () . 0 , { let mut nested_selections = vec ! [] ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections }) , Self :: Fetch (args) => (args . to_graphql () . 0 , < imprese_associate_utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) } ;
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: imprese_associate_utenti::ManyArgs,
                nested_selections: Vec<imprese_associate_utenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: imprese_associate_utenti::ManyArgs,
                nested_selections: Vec<imprese_associate_utenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod imprese_collegate_inverso {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "imprese_collegate_inverso";
        pub struct Fetch(pub imprese_collegate::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese_collegate::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: imprese_collegate::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: imprese_collegate::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::ImpreseCollegateInverso(v)
            }
        }
        pub fn fetch(params: Vec<imprese_collegate::WhereParam>) -> Fetch {
            Fetch(imprese_collegate::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<imprese_collegate::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpreseCollegateInverso(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<imprese_collegate::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<imprese_collegate::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectImpreseCollegateInverso(params)
        }
        pub fn set(params: Vec<imprese_collegate::UniqueWhereParam>) -> SetParam {
            SetParam::SetImpreseCollegateInverso(params)
        }
        pub fn some(value: Vec<imprese_collegate::WhereParam>) -> WhereParam {
            WhereParam::ImpreseCollegateInversoSome(value)
        }
        pub fn every(value: Vec<imprese_collegate::WhereParam>) -> WhereParam {
            WhereParam::ImpreseCollegateInversoEvery(value)
        }
        pub fn none(value: Vec<imprese_collegate::WhereParam>) -> WhereParam {
            WhereParam::ImpreseCollegateInversoNone(value)
        }
        pub enum Include {
            Select(
                imprese_collegate::ManyArgs,
                Vec<imprese_collegate::SelectParam>,
            ),
            Include(
                imprese_collegate::ManyArgs,
                Vec<imprese_collegate::IncludeParam>,
            ),
            Fetch(imprese_collegate::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpreseCollegateInverso(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args , selections) = match self { Self :: Select (args , selections) => (args . to_graphql () . 0 , selections . into_iter () . map (| s | s . to_selection ()) . collect ()) , Self :: Include (args , selections) => (args . to_graphql () . 0 , { let mut nested_selections = < imprese_collegate :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections }) , Self :: Fetch (args) => (args . to_graphql () . 0 , < imprese_collegate :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) } ;
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: imprese_collegate::ManyArgs,
                nested_selections: Vec<imprese_collegate::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: imprese_collegate::ManyArgs,
                nested_selections: Vec<imprese_collegate::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(
                imprese_collegate::ManyArgs,
                Vec<imprese_collegate::SelectParam>,
            ),
            Include(
                imprese_collegate::ManyArgs,
                Vec<imprese_collegate::IncludeParam>,
            ),
            Fetch(imprese_collegate::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpreseCollegateInverso(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args , selections) = match self { Self :: Select (args , selections) => (args . to_graphql () . 0 , selections . into_iter () . map (| s | s . to_selection ()) . collect ()) , Self :: Include (args , selections) => (args . to_graphql () . 0 , { let mut nested_selections = vec ! [] ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections }) , Self :: Fetch (args) => (args . to_graphql () . 0 , < imprese_collegate :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) } ;
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: imprese_collegate::ManyArgs,
                nested_selections: Vec<imprese_collegate::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: imprese_collegate::ManyArgs,
                nested_selections: Vec<imprese_collegate::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod settimanali {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "settimanali";
        pub struct Fetch(pub settimanale::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<settimanale::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: settimanale::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: settimanale::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Settimanali(v)
            }
        }
        pub fn fetch(params: Vec<settimanale::WhereParam>) -> Fetch {
            Fetch(settimanale::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<settimanale::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectSettimanali(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<settimanale::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectSettimanali(params)
        }
        pub fn set(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::SetSettimanali(params)
        }
        pub fn some(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliSome(value)
        }
        pub fn every(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliEvery(value)
        }
        pub fn none(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliNone(value)
        }
        pub enum Include {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Settimanali(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Settimanali(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub fn create(
        ragione_sociale: String,
        indirizzo: String,
        partita_iva: String,
        _params: Vec<SetParam>,
    ) -> (String, String, String, Vec<SetParam>) {
        (ragione_sociale, indirizzo, partita_iva, _params)
    }
    pub fn create_unchecked(
        ragione_sociale: String,
        indirizzo: String,
        partita_iva: String,
        _params: Vec<SetParam>,
    ) -> (String, String, String, Vec<SetParam>) {
        (ragione_sociale, indirizzo, partita_iva, _params)
    }
    #[macro_export]
    macro_rules ! _select_imprese { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: imprese :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: imprese :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: imprese :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: imprese :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , ragione_sociale , indirizzo , partita_iva , utenti , autovetture , mezzi , dipendenti , imprese_collegate , imprese_associate , imprese_collegate_inverso , settimanali } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: imprese :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: imprese :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: imprese :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: imprese :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "ragione_sociale" , "indirizzo" , "partita_iva" , "utenti" , "autovetture" , "mezzi" , "dipendenti" , "imprese_collegate" , "imprese_associate" , "imprese_collegate_inverso" , "settimanali"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: imprese :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; ragione_sociale) => { String } ; (@ field_type ; indirizzo) => { String } ; (@ field_type ; partita_iva) => { String } ; (@ field_type ; utenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < utenti :: Data > } ; (@ field_type ; utenti) => { Vec < crate :: prisma :: utenti :: Data > } ; (@ field_type ; autovetture : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < autovetture :: Data > } ; (@ field_type ; autovetture) => { Vec < crate :: prisma :: autovetture :: Data > } ; (@ field_type ; mezzi : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < mezzi :: Data > } ; (@ field_type ; mezzi) => { Vec < crate :: prisma :: mezzi :: Data > } ; (@ field_type ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < dipendenti :: Data > } ; (@ field_type ; dipendenti) => { Vec < crate :: prisma :: dipendenti :: Data > } ; (@ field_type ; imprese_collegate : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < imprese_collegate :: Data > } ; (@ field_type ; imprese_collegate) => { Vec < crate :: prisma :: imprese_collegate :: Data > } ; (@ field_type ; imprese_associate : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < imprese_associate :: Data > } ; (@ field_type ; imprese_associate) => { Vec < crate :: prisma :: imprese_associate_utenti :: Data > } ; (@ field_type ; imprese_collegate_inverso : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < imprese_collegate_inverso :: Data > } ; (@ field_type ; imprese_collegate_inverso) => { Vec < crate :: prisma :: imprese_collegate :: Data > } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Imprese" , available relations are "id, ragione_sociale, indirizzo, partita_iva, utenti, autovetture, mezzi, dipendenti, imprese_collegate, imprese_associate, imprese_collegate_inverso, settimanali")) } ; (@ field_module ; utenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: utenti :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; autovetture : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: autovetture :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; mezzi : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: mezzi :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: dipendenti :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; imprese_collegate : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese_collegate :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; imprese_associate : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese_associate_utenti :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; imprese_collegate_inverso : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese_collegate :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: id :: Select) } ; (@ selection_field_to_selection_param ; ragione_sociale) => { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: ragione_sociale :: Select) } ; (@ selection_field_to_selection_param ; indirizzo) => { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: indirizzo :: Select) } ; (@ selection_field_to_selection_param ; partita_iva) => { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: partita_iva :: Select) } ; (@ selection_field_to_selection_param ; utenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: utenti :: Select :: $ selection_mode (crate :: prisma :: utenti :: ManyArgs :: new (crate :: prisma :: utenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: utenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; utenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: utenti :: Select :: Fetch (crate :: prisma :: utenti :: ManyArgs :: new (crate :: prisma :: utenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; autovetture $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: autovetture :: Select :: $ selection_mode (crate :: prisma :: autovetture :: ManyArgs :: new (crate :: prisma :: autovetture :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: autovetture :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; autovetture $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: autovetture :: Select :: Fetch (crate :: prisma :: autovetture :: ManyArgs :: new (crate :: prisma :: autovetture :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; mezzi $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: mezzi :: Select :: $ selection_mode (crate :: prisma :: mezzi :: ManyArgs :: new (crate :: prisma :: mezzi :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: mezzi :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; mezzi $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: mezzi :: Select :: Fetch (crate :: prisma :: mezzi :: ManyArgs :: new (crate :: prisma :: mezzi :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: dipendenti :: Select :: $ selection_mode (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: dipendenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: dipendenti :: Select :: Fetch (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; imprese_collegate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: imprese_collegate :: Select :: $ selection_mode (crate :: prisma :: imprese_collegate :: ManyArgs :: new (crate :: prisma :: imprese_collegate :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: imprese_collegate :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; imprese_collegate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: imprese_collegate :: Select :: Fetch (crate :: prisma :: imprese_collegate :: ManyArgs :: new (crate :: prisma :: imprese_collegate :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; imprese_associate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: imprese_associate :: Select :: $ selection_mode (crate :: prisma :: imprese_associate_utenti :: ManyArgs :: new (crate :: prisma :: imprese_associate_utenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: imprese_associate_utenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; imprese_associate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: imprese_associate :: Select :: Fetch (crate :: prisma :: imprese_associate_utenti :: ManyArgs :: new (crate :: prisma :: imprese_associate_utenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; imprese_collegate_inverso $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: imprese_collegate_inverso :: Select :: $ selection_mode (crate :: prisma :: imprese_collegate :: ManyArgs :: new (crate :: prisma :: imprese_collegate :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: imprese_collegate :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; imprese_collegate_inverso $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: imprese_collegate_inverso :: Select :: Fetch (crate :: prisma :: imprese_collegate :: ManyArgs :: new (crate :: prisma :: imprese_collegate :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: settimanali :: Select :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: SelectParam > :: into (crate :: prisma :: imprese :: settimanali :: Select :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: imprese :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; ragione_sociale) => { "ragione_sociale" } ; (@ field_serde_name ; indirizzo) => { "indirizzo" } ; (@ field_serde_name ; partita_iva) => { "partita_iva" } ; (@ field_serde_name ; utenti) => { "utenti" } ; (@ field_serde_name ; autovetture) => { "autovetture" } ; (@ field_serde_name ; mezzi) => { "mezzi" } ; (@ field_serde_name ; dipendenti) => { "dipendenti" } ; (@ field_serde_name ; imprese_collegate) => { "imprese_collegate" } ; (@ field_serde_name ; imprese_associate) => { "imprese_associate" } ; (@ field_serde_name ; imprese_collegate_inverso) => { "imprese_collegate_inverso" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; }
    pub use _select_imprese as select;
    pub enum SelectParam {
        Id(id::Select),
        RagioneSociale(ragione_sociale::Select),
        Indirizzo(indirizzo::Select),
        PartitaIva(partita_iva::Select),
        Utenti(utenti::Select),
        Autovetture(autovetture::Select),
        Mezzi(mezzi::Select),
        Dipendenti(dipendenti::Select),
        ImpreseCollegate(imprese_collegate::Select),
        ImpreseAssociate(imprese_associate::Select),
        ImpreseCollegateInverso(imprese_collegate_inverso::Select),
        Settimanali(settimanali::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::RagioneSociale(data) => data.to_selection(),
                Self::Indirizzo(data) => data.to_selection(),
                Self::PartitaIva(data) => data.to_selection(),
                Self::Utenti(data) => data.to_selection(),
                Self::Autovetture(data) => data.to_selection(),
                Self::Mezzi(data) => data.to_selection(),
                Self::Dipendenti(data) => data.to_selection(),
                Self::ImpreseCollegate(data) => data.to_selection(),
                Self::ImpreseAssociate(data) => data.to_selection(),
                Self::ImpreseCollegateInverso(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_imprese { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: imprese :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: imprese :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: imprese :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: imprese :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: imprese :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: imprese :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: imprese :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { utenti , autovetture , mezzi , dipendenti , imprese_collegate , imprese_associate , imprese_collegate_inverso , settimanali } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub ragione_sociale : String , pub indirizzo : String , pub partita_iva : String , $ (pub $ field : crate :: prisma :: imprese :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (ragione_sociale) , stringify ! (indirizzo) , stringify ! (partita_iva)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: imprese :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: imprese :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: imprese :: ragione_sociale :: NAME , & self . ragione_sociale) ? ; state . serialize_field (crate :: prisma :: imprese :: indirizzo :: NAME , & self . indirizzo) ? ; state . serialize_field (crate :: prisma :: imprese :: partita_iva :: NAME , & self . partita_iva) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , ragione_sociale , indirizzo , partita_iva } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: imprese :: $ field :: NAME) , + , crate :: prisma :: imprese :: id :: NAME , crate :: prisma :: imprese :: ragione_sociale :: NAME , crate :: prisma :: imprese :: indirizzo :: NAME , crate :: prisma :: imprese :: partita_iva :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: imprese :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: imprese :: id :: NAME => Ok (Field :: id) , crate :: prisma :: imprese :: ragione_sociale :: NAME => Ok (Field :: ragione_sociale) , crate :: prisma :: imprese :: indirizzo :: NAME => Ok (Field :: indirizzo) , crate :: prisma :: imprese :: partita_iva :: NAME => Ok (Field :: partita_iva) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut ragione_sociale = None ; let mut indirizzo = None ; let mut partita_iva = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: ragione_sociale => { if ragione_sociale . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese :: ragione_sociale :: NAME)) ; } ragione_sociale = Some (map . next_value () ?) ; } Field :: indirizzo => { if indirizzo . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese :: indirizzo :: NAME)) ; } indirizzo = Some (map . next_value () ?) ; } Field :: partita_iva => { if partita_iva . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese :: partita_iva :: NAME)) ; } partita_iva = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: imprese :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese :: id :: NAME)) ? ; let ragione_sociale = ragione_sociale . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese :: ragione_sociale :: NAME)) ? ; let indirizzo = indirizzo . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese :: indirizzo :: NAME)) ? ; let partita_iva = partita_iva . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: imprese :: partita_iva :: NAME)) ? ; Ok (Data { id , ragione_sociale , indirizzo , partita_iva , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "ragione_sociale" , "indirizzo" , "partita_iva" , "utenti" , "autovetture" , "mezzi" , "dipendenti" , "imprese_collegate" , "imprese_associate" , "imprese_collegate_inverso" , "settimanali"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: imprese :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; utenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < utenti :: Data > } ; (@ field_type ; utenti) => { Vec < crate :: prisma :: utenti :: Data > } ; (@ field_type ; autovetture : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < autovetture :: Data > } ; (@ field_type ; autovetture) => { Vec < crate :: prisma :: autovetture :: Data > } ; (@ field_type ; mezzi : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < mezzi :: Data > } ; (@ field_type ; mezzi) => { Vec < crate :: prisma :: mezzi :: Data > } ; (@ field_type ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < dipendenti :: Data > } ; (@ field_type ; dipendenti) => { Vec < crate :: prisma :: dipendenti :: Data > } ; (@ field_type ; imprese_collegate : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < imprese_collegate :: Data > } ; (@ field_type ; imprese_collegate) => { Vec < crate :: prisma :: imprese_collegate :: Data > } ; (@ field_type ; imprese_associate : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < imprese_associate :: Data > } ; (@ field_type ; imprese_associate) => { Vec < crate :: prisma :: imprese_associate_utenti :: Data > } ; (@ field_type ; imprese_collegate_inverso : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < imprese_collegate_inverso :: Data > } ; (@ field_type ; imprese_collegate_inverso) => { Vec < crate :: prisma :: imprese_collegate :: Data > } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Imprese" , available relations are "utenti, autovetture, mezzi, dipendenti, imprese_collegate, imprese_associate, imprese_collegate_inverso, settimanali")) } ; (@ field_module ; utenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: utenti :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; autovetture : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: autovetture :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; mezzi : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: mezzi :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: dipendenti :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; imprese_collegate : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese_collegate :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; imprese_associate : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese_associate_utenti :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; imprese_collegate_inverso : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese_collegate :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; utenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: utenti :: Include :: $ selection_mode (crate :: prisma :: utenti :: ManyArgs :: new (crate :: prisma :: utenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: utenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; utenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: utenti :: Include :: Fetch (crate :: prisma :: utenti :: ManyArgs :: new (crate :: prisma :: utenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; autovetture $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: autovetture :: Include :: $ selection_mode (crate :: prisma :: autovetture :: ManyArgs :: new (crate :: prisma :: autovetture :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: autovetture :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; autovetture $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: autovetture :: Include :: Fetch (crate :: prisma :: autovetture :: ManyArgs :: new (crate :: prisma :: autovetture :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; mezzi $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: mezzi :: Include :: $ selection_mode (crate :: prisma :: mezzi :: ManyArgs :: new (crate :: prisma :: mezzi :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: mezzi :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; mezzi $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: mezzi :: Include :: Fetch (crate :: prisma :: mezzi :: ManyArgs :: new (crate :: prisma :: mezzi :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: dipendenti :: Include :: $ selection_mode (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: dipendenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: dipendenti :: Include :: Fetch (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; imprese_collegate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: imprese_collegate :: Include :: $ selection_mode (crate :: prisma :: imprese_collegate :: ManyArgs :: new (crate :: prisma :: imprese_collegate :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: imprese_collegate :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; imprese_collegate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: imprese_collegate :: Include :: Fetch (crate :: prisma :: imprese_collegate :: ManyArgs :: new (crate :: prisma :: imprese_collegate :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; imprese_associate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: imprese_associate :: Include :: $ selection_mode (crate :: prisma :: imprese_associate_utenti :: ManyArgs :: new (crate :: prisma :: imprese_associate_utenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: imprese_associate_utenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; imprese_associate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: imprese_associate :: Include :: Fetch (crate :: prisma :: imprese_associate_utenti :: ManyArgs :: new (crate :: prisma :: imprese_associate_utenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; imprese_collegate_inverso $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: imprese_collegate_inverso :: Include :: $ selection_mode (crate :: prisma :: imprese_collegate :: ManyArgs :: new (crate :: prisma :: imprese_collegate :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: imprese_collegate :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; imprese_collegate_inverso $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: imprese_collegate_inverso :: Include :: Fetch (crate :: prisma :: imprese_collegate :: ManyArgs :: new (crate :: prisma :: imprese_collegate :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: settimanali :: Include :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: imprese :: IncludeParam > :: into (crate :: prisma :: imprese :: settimanali :: Include :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: imprese :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; ragione_sociale) => { "ragione_sociale" } ; (@ field_serde_name ; indirizzo) => { "indirizzo" } ; (@ field_serde_name ; partita_iva) => { "partita_iva" } ; (@ field_serde_name ; utenti) => { "utenti" } ; (@ field_serde_name ; autovetture) => { "autovetture" } ; (@ field_serde_name ; mezzi) => { "mezzi" } ; (@ field_serde_name ; dipendenti) => { "dipendenti" } ; (@ field_serde_name ; imprese_collegate) => { "imprese_collegate" } ; (@ field_serde_name ; imprese_associate) => { "imprese_associate" } ; (@ field_serde_name ; imprese_collegate_inverso) => { "imprese_collegate_inverso" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; }
    pub use _include_imprese as include;
    pub enum IncludeParam {
        Id(id::Include),
        RagioneSociale(ragione_sociale::Include),
        Indirizzo(indirizzo::Include),
        PartitaIva(partita_iva::Include),
        Utenti(utenti::Include),
        Autovetture(autovetture::Include),
        Mezzi(mezzi::Include),
        Dipendenti(dipendenti::Include),
        ImpreseCollegate(imprese_collegate::Include),
        ImpreseAssociate(imprese_associate::Include),
        ImpreseCollegateInverso(imprese_collegate_inverso::Include),
        Settimanali(settimanali::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::RagioneSociale(data) => data.to_selection(),
                Self::Indirizzo(data) => data.to_selection(),
                Self::PartitaIva(data) => data.to_selection(),
                Self::Utenti(data) => data.to_selection(),
                Self::Autovetture(data) => data.to_selection(),
                Self::Mezzi(data) => data.to_selection(),
                Self::Dipendenti(data) => data.to_selection(),
                Self::ImpreseCollegate(data) => data.to_selection(),
                Self::ImpreseAssociate(data) => data.to_selection(),
                Self::ImpreseCollegateInverso(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_imprese { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: imprese struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "ragione_sociale")] pub ragione_sociale : String , # [serde (rename = "indirizzo")] pub indirizzo : String , # [serde (rename = "partita_iva")] pub partita_iva : String } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_imprese as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "ragione_sociale")]
        pub ragione_sociale: String,
        #[serde(rename = "indirizzo")]
        pub indirizzo: String,
        #[serde(rename = "partita_iva")]
        pub partita_iva: String,
        #[serde(rename = "utenti")]
        pub utenti: Option<Vec<super::utenti::Data>>,
        #[serde(rename = "autovetture")]
        pub autovetture: Option<Vec<super::autovetture::Data>>,
        #[serde(rename = "mezzi")]
        pub mezzi: Option<Vec<super::mezzi::Data>>,
        #[serde(rename = "dipendenti")]
        pub dipendenti: Option<Vec<super::dipendenti::Data>>,
        #[serde(rename = "imprese_collegate")]
        pub imprese_collegate: Option<Vec<super::imprese_collegate::Data>>,
        #[serde(rename = "imprese_associate")]
        pub imprese_associate: Option<Vec<super::imprese_associate_utenti::Data>>,
        #[serde(rename = "imprese_collegate_inverso")]
        pub imprese_collegate_inverso: Option<Vec<super::imprese_collegate::Data>>,
        #[serde(rename = "settimanali")]
        pub settimanali: Option<Vec<super::settimanale::Data>>,
    }
    impl Data {
        pub fn utenti(
            &self,
        ) -> Result<&Vec<super::utenti::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.utenti
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(utenti),
                ))
        }
        pub fn autovetture(
            &self,
        ) -> Result<&Vec<super::autovetture::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.autovetture
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(autovetture),
                ))
        }
        pub fn mezzi(
            &self,
        ) -> Result<&Vec<super::mezzi::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.mezzi
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(mezzi),
                ))
        }
        pub fn dipendenti(
            &self,
        ) -> Result<&Vec<super::dipendenti::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.dipendenti
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(dipendenti),
                ))
        }
        pub fn imprese_collegate(
            &self,
        ) -> Result<
            &Vec<super::imprese_collegate::Data>,
            ::prisma_client_rust::RelationNotFetchedError,
        > {
            self.imprese_collegate.as_ref().ok_or(
                ::prisma_client_rust::RelationNotFetchedError::new(stringify!(imprese_collegate)),
            )
        }
        pub fn imprese_associate(
            &self,
        ) -> Result<
            &Vec<super::imprese_associate_utenti::Data>,
            ::prisma_client_rust::RelationNotFetchedError,
        > {
            self.imprese_associate.as_ref().ok_or(
                ::prisma_client_rust::RelationNotFetchedError::new(stringify!(imprese_associate)),
            )
        }
        pub fn imprese_collegate_inverso(
            &self,
        ) -> Result<
            &Vec<super::imprese_collegate::Data>,
            ::prisma_client_rust::RelationNotFetchedError,
        > {
            self.imprese_collegate_inverso.as_ref().ok_or(
                ::prisma_client_rust::RelationNotFetchedError::new(stringify!(
                    imprese_collegate_inverso
                )),
            )
        }
        pub fn settimanali(
            &self,
        ) -> Result<&Vec<super::settimanale::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.settimanali
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(settimanali),
                ))
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Utenti(super::utenti::ManyArgs),
        Autovetture(super::autovetture::ManyArgs),
        Mezzi(super::mezzi::ManyArgs),
        Dipendenti(super::dipendenti::ManyArgs),
        ImpreseCollegate(super::imprese_collegate::ManyArgs),
        ImpreseAssociate(super::imprese_associate_utenti::ManyArgs),
        ImpreseCollegateInverso(super::imprese_collegate::ManyArgs),
        Settimanali(super::settimanale::ManyArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Utenti(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        utenti::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
                Self::Autovetture(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: autovetture :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        autovetture::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
                Self::Mezzi(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: mezzi :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        mezzi::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
                Self::Dipendenti(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: dipendenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        dipendenti::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
                Self::ImpreseCollegate(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: imprese_collegate :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        imprese_collegate::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
                Self::ImpreseAssociate(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: imprese_associate_utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        imprese_associate::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
                Self::ImpreseCollegateInverso(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: imprese_collegate :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        imprese_collegate_inverso::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
                Self::Settimanali(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        settimanali::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetRagioneSociale(String),
        SetIndirizzo(String),
        SetPartitaIva(String),
        ConnectUtenti(Vec<super::utenti::UniqueWhereParam>),
        DisconnectUtenti(Vec<super::utenti::UniqueWhereParam>),
        SetUtenti(Vec<super::utenti::UniqueWhereParam>),
        ConnectAutovetture(Vec<super::autovetture::UniqueWhereParam>),
        DisconnectAutovetture(Vec<super::autovetture::UniqueWhereParam>),
        SetAutovetture(Vec<super::autovetture::UniqueWhereParam>),
        ConnectMezzi(Vec<super::mezzi::UniqueWhereParam>),
        DisconnectMezzi(Vec<super::mezzi::UniqueWhereParam>),
        SetMezzi(Vec<super::mezzi::UniqueWhereParam>),
        ConnectDipendenti(Vec<super::dipendenti::UniqueWhereParam>),
        DisconnectDipendenti(Vec<super::dipendenti::UniqueWhereParam>),
        SetDipendenti(Vec<super::dipendenti::UniqueWhereParam>),
        ConnectImpreseCollegate(Vec<super::imprese_collegate::UniqueWhereParam>),
        DisconnectImpreseCollegate(Vec<super::imprese_collegate::UniqueWhereParam>),
        SetImpreseCollegate(Vec<super::imprese_collegate::UniqueWhereParam>),
        ConnectImpreseAssociate(Vec<super::imprese_associate_utenti::UniqueWhereParam>),
        DisconnectImpreseAssociate(Vec<super::imprese_associate_utenti::UniqueWhereParam>),
        SetImpreseAssociate(Vec<super::imprese_associate_utenti::UniqueWhereParam>),
        ConnectImpreseCollegateInverso(Vec<super::imprese_collegate::UniqueWhereParam>),
        DisconnectImpreseCollegateInverso(Vec<super::imprese_collegate::UniqueWhereParam>),
        SetImpreseCollegateInverso(Vec<super::imprese_collegate::UniqueWhereParam>),
        ConnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        DisconnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        SetSettimanali(Vec<super::settimanale::UniqueWhereParam>),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetRagioneSociale(value) => (
                    ragione_sociale::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetIndirizzo(value) => (
                    indirizzo::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetPartitaIva(value) => (
                    partita_iva::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::ConnectUtenti(where_params) => (
                    utenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectUtenti(where_params) => (
                    utenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetUtenti(where_params) => (
                    utenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectAutovetture(where_params) => (
                    autovetture::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::autovetture::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectAutovetture(where_params) => (
                    autovetture::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::autovetture::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetAutovetture(where_params) => (
                    autovetture::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::autovetture::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectMezzi(where_params) => (
                    mezzi::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::mezzi::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectMezzi(where_params) => (
                    mezzi::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::mezzi::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetMezzi(where_params) => (
                    mezzi::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::mezzi::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectDipendenti(where_params) => (
                    dipendenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::dipendenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectDipendenti(where_params) => (
                    dipendenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::dipendenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetDipendenti(where_params) => (
                    dipendenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::dipendenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectImpreseCollegate(where_params) => (
                    imprese_collegate::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_collegate::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectImpreseCollegate(where_params) => (
                    imprese_collegate::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_collegate::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetImpreseCollegate(where_params) => (
                    imprese_collegate::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_collegate::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectImpreseAssociate(where_params) => (
                    imprese_associate::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_associate_utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectImpreseAssociate(where_params) => (
                    imprese_associate::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_associate_utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetImpreseAssociate(where_params) => (
                    imprese_associate::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_associate_utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectImpreseCollegateInverso(where_params) => (
                    imprese_collegate_inverso::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_collegate::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectImpreseCollegateInverso(where_params) => (
                    imprese_collegate_inverso::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_collegate::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetImpreseCollegateInverso(where_params) => (
                    imprese_collegate_inverso::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_collegate::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        RagioneSociale(String),
        Indirizzo(String),
        PartitaIva(String),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::RagioneSociale(value) => Self::SetRagioneSociale(value),
                UncheckedSetParam::Indirizzo(value) => Self::SetIndirizzo(value),
                UncheckedSetParam::PartitaIva(value) => Self::SetPartitaIva(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        RagioneSociale(::prisma_client_rust::Direction),
        Indirizzo(::prisma_client_rust::Direction),
        PartitaIva(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::RagioneSociale(direction) => (
                    ragione_sociale::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Indirizzo(direction) => (
                    indirizzo::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::PartitaIva(direction) => (
                    partita_iva::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        RagioneSociale(_prisma::read_filters::StringFilter),
        Indirizzo(_prisma::read_filters::StringFilter),
        PartitaIva(_prisma::read_filters::StringFilter),
        UtentiSome(Vec<super::utenti::WhereParam>),
        UtentiEvery(Vec<super::utenti::WhereParam>),
        UtentiNone(Vec<super::utenti::WhereParam>),
        AutovettureSome(Vec<super::autovetture::WhereParam>),
        AutovettureEvery(Vec<super::autovetture::WhereParam>),
        AutovettureNone(Vec<super::autovetture::WhereParam>),
        MezziSome(Vec<super::mezzi::WhereParam>),
        MezziEvery(Vec<super::mezzi::WhereParam>),
        MezziNone(Vec<super::mezzi::WhereParam>),
        DipendentiSome(Vec<super::dipendenti::WhereParam>),
        DipendentiEvery(Vec<super::dipendenti::WhereParam>),
        DipendentiNone(Vec<super::dipendenti::WhereParam>),
        ImpreseCollegateSome(Vec<super::imprese_collegate::WhereParam>),
        ImpreseCollegateEvery(Vec<super::imprese_collegate::WhereParam>),
        ImpreseCollegateNone(Vec<super::imprese_collegate::WhereParam>),
        ImpreseAssociateSome(Vec<super::imprese_associate_utenti::WhereParam>),
        ImpreseAssociateEvery(Vec<super::imprese_associate_utenti::WhereParam>),
        ImpreseAssociateNone(Vec<super::imprese_associate_utenti::WhereParam>),
        ImpreseCollegateInversoSome(Vec<super::imprese_collegate::WhereParam>),
        ImpreseCollegateInversoEvery(Vec<super::imprese_collegate::WhereParam>),
        ImpreseCollegateInversoNone(Vec<super::imprese_collegate::WhereParam>),
        SettimanaliSome(Vec<super::settimanale::WhereParam>),
        SettimanaliEvery(Vec<super::settimanale::WhereParam>),
        SettimanaliNone(Vec<super::settimanale::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::RagioneSociale(value) => (ragione_sociale::NAME, value.into()),
                Self::Indirizzo(value) => (indirizzo::NAME, value.into()),
                Self::PartitaIva(value) => (partita_iva::NAME, value.into()),
                Self::UtentiSome(where_params) => (
                    utenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::UtentiEvery(where_params) => (
                    utenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::UtentiNone(where_params) => (
                    utenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::AutovettureSome(where_params) => (
                    autovetture::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::AutovettureEvery(where_params) => (
                    autovetture::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::AutovettureNone(where_params) => (
                    autovetture::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::MezziSome(where_params) => (
                    mezzi::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::MezziEvery(where_params) => (
                    mezzi::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::MezziNone(where_params) => (
                    mezzi::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::DipendentiSome(where_params) => (
                    dipendenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::DipendentiEvery(where_params) => (
                    dipendenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::DipendentiNone(where_params) => (
                    dipendenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseCollegateSome(where_params) => (
                    imprese_collegate::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseCollegateEvery(where_params) => (
                    imprese_collegate::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseCollegateNone(where_params) => (
                    imprese_collegate::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseAssociateSome(where_params) => (
                    imprese_associate::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseAssociateEvery(where_params) => (
                    imprese_associate::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseAssociateNone(where_params) => (
                    imprese_associate::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseCollegateInversoSome(where_params) => (
                    imprese_collegate_inverso::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseCollegateInversoEvery(where_params) => (
                    imprese_collegate_inverso::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseCollegateInversoNone(where_params) => (
                    imprese_collegate_inverso::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliSome(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliEvery(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliNone(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(ragione_sociale::NAME),
                ::prisma_client_rust::sel(indirizzo::NAME),
                ::prisma_client_rust::sel(partita_iva::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            ragione_sociale: String,
            indirizzo: String,
            partita_iva: String,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                ragione_sociale::set(ragione_sociale),
                indirizzo::set(indirizzo),
                partita_iva::set(partita_iva),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            ragione_sociale: String,
            indirizzo: String,
            partita_iva: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                ragione_sociale::set(ragione_sociale),
                indirizzo::set(indirizzo),
                partita_iva::set(partita_iva),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(
            self,
            data: Vec<(String, String, String, Vec<SetParam>)>,
        ) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(ragione_sociale, indirizzo, partita_iva, mut _params)| {
                    _params.extend([
                        ragione_sociale::set(ragione_sociale),
                        indirizzo::set(indirizzo),
                        partita_iva::set(partita_iva),
                    ]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (ragione_sociale, indirizzo, partita_iva, mut _params): (
                String,
                String,
                String,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                ragione_sociale::set(ragione_sociale),
                indirizzo::set(indirizzo),
                partita_iva::set(partita_iva),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod mansione {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Mansione";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod descrizione {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "descrizione";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDescrizione(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Descrizione(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Descrizione(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Descrizione(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Descrizione,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Descrizione(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Descrizione(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod dipendenti {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "dipendenti";
        pub struct Fetch(pub dipendenti::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<dipendenti::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: dipendenti::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: dipendenti::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Dipendenti(v)
            }
        }
        pub fn fetch(params: Vec<dipendenti::WhereParam>) -> Fetch {
            Fetch(dipendenti::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<dipendenti::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectDipendenti(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<dipendenti::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<dipendenti::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectDipendenti(params)
        }
        pub fn set(params: Vec<dipendenti::UniqueWhereParam>) -> SetParam {
            SetParam::SetDipendenti(params)
        }
        pub fn some(value: Vec<dipendenti::WhereParam>) -> WhereParam {
            WhereParam::DipendentiSome(value)
        }
        pub fn every(value: Vec<dipendenti::WhereParam>) -> WhereParam {
            WhereParam::DipendentiEvery(value)
        }
        pub fn none(value: Vec<dipendenti::WhereParam>) -> WhereParam {
            WhereParam::DipendentiNone(value)
        }
        pub enum Include {
            Select(dipendenti::ManyArgs, Vec<dipendenti::SelectParam>),
            Include(dipendenti::ManyArgs, Vec<dipendenti::IncludeParam>),
            Fetch(dipendenti::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Dipendenti(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < dipendenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <dipendenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(dipendenti::ManyArgs, Vec<dipendenti::SelectParam>),
            Include(dipendenti::ManyArgs, Vec<dipendenti::IncludeParam>),
            Fetch(dipendenti::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Dipendenti(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <dipendenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub fn create(descrizione: String, _params: Vec<SetParam>) -> (String, Vec<SetParam>) {
        (descrizione, _params)
    }
    pub fn create_unchecked(
        descrizione: String,
        _params: Vec<SetParam>,
    ) -> (String, Vec<SetParam>) {
        (descrizione, _params)
    }
    #[macro_export]
    macro_rules ! _select_mansione { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: mansione :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: mansione :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: mansione :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: mansione :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: mansione :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: mansione :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , descrizione , dipendenti } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: mansione :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: mansione :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: mansione :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: mansione :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mansione :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mansione :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "dipendenti"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: mansione :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; descrizione) => { String } ; (@ field_type ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < dipendenti :: Data > } ; (@ field_type ; dipendenti) => { Vec < crate :: prisma :: dipendenti :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Mansione" , available relations are "id, descrizione, dipendenti")) } ; (@ field_module ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: dipendenti :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: mansione :: SelectParam > :: into (crate :: prisma :: mansione :: id :: Select) } ; (@ selection_field_to_selection_param ; descrizione) => { Into :: < crate :: prisma :: mansione :: SelectParam > :: into (crate :: prisma :: mansione :: descrizione :: Select) } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: mansione :: SelectParam > :: into (crate :: prisma :: mansione :: dipendenti :: Select :: $ selection_mode (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: dipendenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: mansione :: SelectParam > :: into (crate :: prisma :: mansione :: dipendenti :: Select :: Fetch (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: mansione :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; dipendenti) => { "dipendenti" } ; }
    pub use _select_mansione as select;
    pub enum SelectParam {
        Id(id::Select),
        Descrizione(descrizione::Select),
        Dipendenti(dipendenti::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Dipendenti(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_mansione { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: mansione :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: mansione :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: mansione :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: mansione :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: mansione :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: mansione :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: mansione :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: mansione :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { dipendenti } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub descrizione : String , $ (pub $ field : crate :: prisma :: mansione :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (descrizione)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: mansione :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: mansione :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: mansione :: descrizione :: NAME , & self . descrizione) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , descrizione } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: mansione :: $ field :: NAME) , + , crate :: prisma :: mansione :: id :: NAME , crate :: prisma :: mansione :: descrizione :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: mansione :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: mansione :: id :: NAME => Ok (Field :: id) , crate :: prisma :: mansione :: descrizione :: NAME => Ok (Field :: descrizione) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut descrizione = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mansione :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: descrizione => { if descrizione . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mansione :: descrizione :: NAME)) ; } descrizione = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mansione :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mansione :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mansione :: id :: NAME)) ? ; let descrizione = descrizione . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mansione :: descrizione :: NAME)) ? ; Ok (Data { id , descrizione , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "dipendenti"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: mansione :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < dipendenti :: Data > } ; (@ field_type ; dipendenti) => { Vec < crate :: prisma :: dipendenti :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Mansione" , available relations are "dipendenti")) } ; (@ field_module ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: dipendenti :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: mansione :: IncludeParam > :: into (crate :: prisma :: mansione :: dipendenti :: Include :: $ selection_mode (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: dipendenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: mansione :: IncludeParam > :: into (crate :: prisma :: mansione :: dipendenti :: Include :: Fetch (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: mansione :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; dipendenti) => { "dipendenti" } ; }
    pub use _include_mansione as include;
    pub enum IncludeParam {
        Id(id::Include),
        Descrizione(descrizione::Include),
        Dipendenti(dipendenti::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Dipendenti(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_mansione { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: mansione struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "descrizione")] pub descrizione : String } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_mansione as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "descrizione")]
        pub descrizione: String,
        #[serde(rename = "dipendenti")]
        pub dipendenti: Option<Vec<super::dipendenti::Data>>,
    }
    impl Data {
        pub fn dipendenti(
            &self,
        ) -> Result<&Vec<super::dipendenti::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.dipendenti
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(dipendenti),
                ))
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Dipendenti(super::dipendenti::ManyArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Dipendenti(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: dipendenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        dipendenti::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetDescrizione(String),
        ConnectDipendenti(Vec<super::dipendenti::UniqueWhereParam>),
        DisconnectDipendenti(Vec<super::dipendenti::UniqueWhereParam>),
        SetDipendenti(Vec<super::dipendenti::UniqueWhereParam>),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDescrizione(value) => (
                    descrizione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::ConnectDipendenti(where_params) => (
                    dipendenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::dipendenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectDipendenti(where_params) => (
                    dipendenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::dipendenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetDipendenti(where_params) => (
                    dipendenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::dipendenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        Descrizione(String),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Descrizione(value) => Self::SetDescrizione(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Descrizione(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Descrizione(direction) => (
                    descrizione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        Descrizione(_prisma::read_filters::StringFilter),
        DipendentiSome(Vec<super::dipendenti::WhereParam>),
        DipendentiEvery(Vec<super::dipendenti::WhereParam>),
        DipendentiNone(Vec<super::dipendenti::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Descrizione(value) => (descrizione::NAME, value.into()),
                Self::DipendentiSome(where_params) => (
                    dipendenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::DipendentiEvery(where_params) => (
                    dipendenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::DipendentiNone(where_params) => (
                    dipendenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(descrizione::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(self, descrizione: String, mut _params: Vec<SetParam>) -> Create<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            descrizione: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(String, Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(descrizione, mut _params)| {
                    _params.extend([descrizione::set(descrizione)]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (descrizione, mut _params): (String, Vec<SetParam>),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod mezzi {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Mezzi";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod descrizione {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "descrizione";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDescrizione(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Descrizione(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Descrizione(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::Descrizione(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            Descrizione,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Descrizione(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Descrizione(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod modello {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "modello";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetModello(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Modello(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Modello(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Modello(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Modello,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Modello(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Modello(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod tipo_proprieta {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "tipo_proprieta";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTipoProprieta(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::TipoProprieta(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::TipoProprieta(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::TipoProprieta(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            TipoProprieta,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementTipoProprieta(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementTipoProprieta(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyTipoProprieta(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideTipoProprieta(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::TipoProprieta(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::TipoProprieta(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod proprieta {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "proprieta";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetProprieta(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Proprieta(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Proprieta(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Proprieta(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Proprieta,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Proprieta(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Proprieta(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetImpresaId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ImpresaId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ImpresaId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::ImpresaId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            ImpresaId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementImpresaId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementImpresaId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyImpresaId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideImpresaId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpresaId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpresaId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod data_dimissioni {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "data_dimissioni";
        pub struct Set(
            pub ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        );
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDataDimissioni(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::DataDimissioni(v)
            }
        }
        pub fn set<T: From<Set>>(
            value: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
        ) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::DataDimissioni(direction)
        }
        pub fn equals(
            value: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
        ) -> WhereParam {
            WhereParam::DataDimissioni(_prisma::read_filters::DateTimeFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::DateTimeFilter,
            DataDimissioni,
            {
                fn in_vec(
                    _: Vec<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> InVec;
                fn not_in_vec(
                    _: Vec<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> NotInVec;
                fn lt(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Lt;
                fn lte(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Lte;
                fn gt(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Gt;
                fn gte(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Gte;
                fn not(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::DataDimissioni(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::DataDimissioni(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod rfid_1 {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "rfid1";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRfid1(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Rfid1(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Rfid1(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Rfid1(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Rfid1,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Rfid1(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Rfid1(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod rfid_2 {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "rfid2";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRfid2(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Rfid2(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Rfid2(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Rfid2(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Rfid2,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Rfid2(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Rfid2(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa";
        pub struct Fetch(pub imprese::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Impresa(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(imprese::UniqueArgs::new())
        }
        pub struct Connect(imprese::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpresa(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: imprese::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIs(value)
        }
        pub fn is_not(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIsNot(value)
        }
        pub enum Include {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Impresa(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Impresa(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod tipo {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "tipo";
        pub struct Fetch(pub tipi_proprieta::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<tipi_proprieta::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Tipo(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(tipi_proprieta::UniqueArgs::new())
        }
        pub struct Connect(tipi_proprieta::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectTipo(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: tipi_proprieta::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<tipi_proprieta::WhereParam>) -> WhereParam {
            WhereParam::TipoIs(value)
        }
        pub fn is_not(value: Vec<tipi_proprieta::WhereParam>) -> WhereParam {
            WhereParam::TipoIsNot(value)
        }
        pub enum Include {
            Select(Vec<tipi_proprieta::SelectParam>),
            Include(Vec<tipi_proprieta::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Tipo(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self { Self :: Select (selections) => { selections . into_iter () . map (| s | s . to_selection ()) . collect () } , Self :: Include (selections) => { let mut nested_selections = < tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections } , Self :: Fetch => { < tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () } } ;
                ::prisma_client_rust::Selection::new("tipo", None, [], selections)
            }
            pub fn select(nested_selections: Vec<tipi_proprieta::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<tipi_proprieta::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<tipi_proprieta::SelectParam>),
            Include(Vec<tipi_proprieta::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Tipo(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self { Self :: Select (selections) => { selections . into_iter () . map (| s | s . to_selection ()) . collect () } , Self :: Include (selections) => { let mut nested_selections = vec ! [] ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections } , Self :: Fetch => { < tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () } } ;
                ::prisma_client_rust::Selection::new("tipo", None, [], selections)
            }
            pub fn select(nested_selections: Vec<tipi_proprieta::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<tipi_proprieta::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod settimanali {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "settimanali";
        pub struct Fetch(pub settimanale::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<settimanale::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: settimanale::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: settimanale::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Settimanali(v)
            }
        }
        pub fn fetch(params: Vec<settimanale::WhereParam>) -> Fetch {
            Fetch(settimanale::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<settimanale::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectSettimanali(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<settimanale::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectSettimanali(params)
        }
        pub fn set(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::SetSettimanali(params)
        }
        pub fn some(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliSome(value)
        }
        pub fn every(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliEvery(value)
        }
        pub fn none(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliNone(value)
        }
        pub enum Include {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Settimanali(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Settimanali(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub fn create(
        modello: String,
        proprieta: String,
        data_dimissioni: ::prisma_client_rust::chrono::DateTime<
            ::prisma_client_rust::chrono::FixedOffset,
        >,
        rfid_1: String,
        rfid_2: String,
        impresa: super::imprese::UniqueWhereParam,
        tipo: super::tipi_proprieta::UniqueWhereParam,
        _params: Vec<SetParam>,
    ) -> (
        String,
        String,
        ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        String,
        String,
        super::imprese::UniqueWhereParam,
        super::tipi_proprieta::UniqueWhereParam,
        Vec<SetParam>,
    ) {
        (
            modello,
            proprieta,
            data_dimissioni,
            rfid_1,
            rfid_2,
            impresa,
            tipo,
            _params,
        )
    }
    pub fn create_unchecked(
        modello: String,
        tipo_proprieta: i32,
        proprieta: String,
        impresa_id: i32,
        data_dimissioni: ::prisma_client_rust::chrono::DateTime<
            ::prisma_client_rust::chrono::FixedOffset,
        >,
        rfid_1: String,
        rfid_2: String,
        _params: Vec<SetParam>,
    ) -> (
        String,
        i32,
        String,
        i32,
        ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        String,
        String,
        Vec<SetParam>,
    ) {
        (
            modello,
            tipo_proprieta,
            proprieta,
            impresa_id,
            data_dimissioni,
            rfid_1,
            rfid_2,
            _params,
        )
    }
    #[macro_export]
    macro_rules ! _select_mezzi { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: mezzi :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: mezzi :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: mezzi :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: mezzi :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: mezzi :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: mezzi :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , descrizione , modello , tipo_proprieta , proprieta , impresa_id , data_dimissioni , rfid_1 , rfid_2 , impresa , tipo , settimanali } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: mezzi :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: mezzi :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: mezzi :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: mezzi :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "modello" , "tipo_proprieta" , "proprieta" , "impresa_id" , "data_dimissioni" , "rfid1" , "rfid2" , "impresa" , "tipo" , "settimanali"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: mezzi :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; descrizione) => { Option < String > } ; (@ field_type ; modello) => { String } ; (@ field_type ; tipo_proprieta) => { i32 } ; (@ field_type ; proprieta) => { String } ; (@ field_type ; impresa_id) => { i32 } ; (@ field_type ; data_dimissioni) => { :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > } ; (@ field_type ; rfid_1) => { String } ; (@ field_type ; rfid_2) => { String } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { tipo :: Data } ; (@ field_type ; tipo) => { crate :: prisma :: tipi_proprieta :: Data } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Mezzi" , available relations are "id, descrizione, modello, tipo_proprieta, proprieta, impresa_id, data_dimissioni, rfid_1, rfid_2, impresa, tipo, settimanali")) } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: tipi_proprieta :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: id :: Select) } ; (@ selection_field_to_selection_param ; descrizione) => { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: descrizione :: Select) } ; (@ selection_field_to_selection_param ; modello) => { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: modello :: Select) } ; (@ selection_field_to_selection_param ; tipo_proprieta) => { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: tipo_proprieta :: Select) } ; (@ selection_field_to_selection_param ; proprieta) => { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: proprieta :: Select) } ; (@ selection_field_to_selection_param ; impresa_id) => { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: impresa_id :: Select) } ; (@ selection_field_to_selection_param ; data_dimissioni) => { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: data_dimissioni :: Select) } ; (@ selection_field_to_selection_param ; rfid_1) => { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: rfid_1 :: Select) } ; (@ selection_field_to_selection_param ; rfid_2) => { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: rfid_2 :: Select) } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: impresa :: Select :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: impresa :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: tipo :: Select :: $ selection_mode (crate :: prisma :: tipi_proprieta :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: tipo :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: settimanali :: Select :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: mezzi :: SelectParam > :: into (crate :: prisma :: mezzi :: settimanali :: Select :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: mezzi :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; modello) => { "modello" } ; (@ field_serde_name ; tipo_proprieta) => { "tipo_proprieta" } ; (@ field_serde_name ; proprieta) => { "proprieta" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; data_dimissioni) => { "data_dimissioni" } ; (@ field_serde_name ; rfid_1) => { "rfid1" } ; (@ field_serde_name ; rfid_2) => { "rfid2" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; tipo) => { "tipo" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; }
    pub use _select_mezzi as select;
    pub enum SelectParam {
        Id(id::Select),
        Descrizione(descrizione::Select),
        Modello(modello::Select),
        TipoProprieta(tipo_proprieta::Select),
        Proprieta(proprieta::Select),
        ImpresaId(impresa_id::Select),
        DataDimissioni(data_dimissioni::Select),
        Rfid1(rfid_1::Select),
        Rfid2(rfid_2::Select),
        Impresa(impresa::Select),
        Tipo(tipo::Select),
        Settimanali(settimanali::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Modello(data) => data.to_selection(),
                Self::TipoProprieta(data) => data.to_selection(),
                Self::Proprieta(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::DataDimissioni(data) => data.to_selection(),
                Self::Rfid1(data) => data.to_selection(),
                Self::Rfid2(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Tipo(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_mezzi { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: mezzi :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: mezzi :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: mezzi :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: mezzi :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: mezzi :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: mezzi :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: mezzi :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: mezzi :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { impresa , tipo , settimanali } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub descrizione : Option < String > , pub modello : String , pub tipo_proprieta : i32 , pub proprieta : String , pub impresa_id : i32 , pub data_dimissioni : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > , pub rfid_1 : String , pub rfid_2 : String , $ (pub $ field : crate :: prisma :: mezzi :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (descrizione) , stringify ! (modello) , stringify ! (tipo_proprieta) , stringify ! (proprieta) , stringify ! (impresa_id) , stringify ! (data_dimissioni) , stringify ! (rfid_1) , stringify ! (rfid_2)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: mezzi :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: mezzi :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: mezzi :: descrizione :: NAME , & self . descrizione) ? ; state . serialize_field (crate :: prisma :: mezzi :: modello :: NAME , & self . modello) ? ; state . serialize_field (crate :: prisma :: mezzi :: tipo_proprieta :: NAME , & self . tipo_proprieta) ? ; state . serialize_field (crate :: prisma :: mezzi :: proprieta :: NAME , & self . proprieta) ? ; state . serialize_field (crate :: prisma :: mezzi :: impresa_id :: NAME , & self . impresa_id) ? ; state . serialize_field (crate :: prisma :: mezzi :: data_dimissioni :: NAME , & self . data_dimissioni) ? ; state . serialize_field (crate :: prisma :: mezzi :: rfid_1 :: NAME , & self . rfid_1) ? ; state . serialize_field (crate :: prisma :: mezzi :: rfid_2 :: NAME , & self . rfid_2) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , descrizione , modello , tipo_proprieta , proprieta , impresa_id , data_dimissioni , rfid_1 , rfid_2 } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: mezzi :: $ field :: NAME) , + , crate :: prisma :: mezzi :: id :: NAME , crate :: prisma :: mezzi :: descrizione :: NAME , crate :: prisma :: mezzi :: modello :: NAME , crate :: prisma :: mezzi :: tipo_proprieta :: NAME , crate :: prisma :: mezzi :: proprieta :: NAME , crate :: prisma :: mezzi :: impresa_id :: NAME , crate :: prisma :: mezzi :: data_dimissioni :: NAME , crate :: prisma :: mezzi :: rfid_1 :: NAME , crate :: prisma :: mezzi :: rfid_2 :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: mezzi :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: mezzi :: id :: NAME => Ok (Field :: id) , crate :: prisma :: mezzi :: descrizione :: NAME => Ok (Field :: descrizione) , crate :: prisma :: mezzi :: modello :: NAME => Ok (Field :: modello) , crate :: prisma :: mezzi :: tipo_proprieta :: NAME => Ok (Field :: tipo_proprieta) , crate :: prisma :: mezzi :: proprieta :: NAME => Ok (Field :: proprieta) , crate :: prisma :: mezzi :: impresa_id :: NAME => Ok (Field :: impresa_id) , crate :: prisma :: mezzi :: data_dimissioni :: NAME => Ok (Field :: data_dimissioni) , crate :: prisma :: mezzi :: rfid_1 :: NAME => Ok (Field :: rfid_1) , crate :: prisma :: mezzi :: rfid_2 :: NAME => Ok (Field :: rfid_2) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut descrizione = None ; let mut modello = None ; let mut tipo_proprieta = None ; let mut proprieta = None ; let mut impresa_id = None ; let mut data_dimissioni = None ; let mut rfid_1 = None ; let mut rfid_2 = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: descrizione => { if descrizione . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: descrizione :: NAME)) ; } descrizione = Some (map . next_value () ?) ; } Field :: modello => { if modello . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: modello :: NAME)) ; } modello = Some (map . next_value () ?) ; } Field :: tipo_proprieta => { if tipo_proprieta . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: tipo_proprieta :: NAME)) ; } tipo_proprieta = Some (map . next_value () ?) ; } Field :: proprieta => { if proprieta . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: proprieta :: NAME)) ; } proprieta = Some (map . next_value () ?) ; } Field :: impresa_id => { if impresa_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: impresa_id :: NAME)) ; } impresa_id = Some (map . next_value () ?) ; } Field :: data_dimissioni => { if data_dimissioni . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: data_dimissioni :: NAME)) ; } data_dimissioni = Some (map . next_value () ?) ; } Field :: rfid_1 => { if rfid_1 . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: rfid_1 :: NAME)) ; } rfid_1 = Some (map . next_value () ?) ; } Field :: rfid_2 => { if rfid_2 . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: rfid_2 :: NAME)) ; } rfid_2 = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: mezzi :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: id :: NAME)) ? ; let descrizione = descrizione . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: descrizione :: NAME)) ? ; let modello = modello . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: modello :: NAME)) ? ; let tipo_proprieta = tipo_proprieta . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: tipo_proprieta :: NAME)) ? ; let proprieta = proprieta . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: proprieta :: NAME)) ? ; let impresa_id = impresa_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: impresa_id :: NAME)) ? ; let data_dimissioni = data_dimissioni . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: data_dimissioni :: NAME)) ? ; let rfid_1 = rfid_1 . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: rfid_1 :: NAME)) ? ; let rfid_2 = rfid_2 . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: mezzi :: rfid_2 :: NAME)) ? ; Ok (Data { id , descrizione , modello , tipo_proprieta , proprieta , impresa_id , data_dimissioni , rfid_1 , rfid_2 , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "modello" , "tipo_proprieta" , "proprieta" , "impresa_id" , "data_dimissioni" , "rfid1" , "rfid2" , "impresa" , "tipo" , "settimanali"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: mezzi :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { tipo :: Data } ; (@ field_type ; tipo) => { crate :: prisma :: tipi_proprieta :: Data } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Mezzi" , available relations are "impresa, tipo, settimanali")) } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: tipi_proprieta :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: mezzi :: IncludeParam > :: into (crate :: prisma :: mezzi :: impresa :: Include :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: mezzi :: IncludeParam > :: into (crate :: prisma :: mezzi :: impresa :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: mezzi :: IncludeParam > :: into (crate :: prisma :: mezzi :: tipo :: Include :: $ selection_mode (crate :: prisma :: tipi_proprieta :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: mezzi :: IncludeParam > :: into (crate :: prisma :: mezzi :: tipo :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: mezzi :: IncludeParam > :: into (crate :: prisma :: mezzi :: settimanali :: Include :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: mezzi :: IncludeParam > :: into (crate :: prisma :: mezzi :: settimanali :: Include :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: mezzi :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; modello) => { "modello" } ; (@ field_serde_name ; tipo_proprieta) => { "tipo_proprieta" } ; (@ field_serde_name ; proprieta) => { "proprieta" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; data_dimissioni) => { "data_dimissioni" } ; (@ field_serde_name ; rfid_1) => { "rfid1" } ; (@ field_serde_name ; rfid_2) => { "rfid2" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; tipo) => { "tipo" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; }
    pub use _include_mezzi as include;
    pub enum IncludeParam {
        Id(id::Include),
        Descrizione(descrizione::Include),
        Modello(modello::Include),
        TipoProprieta(tipo_proprieta::Include),
        Proprieta(proprieta::Include),
        ImpresaId(impresa_id::Include),
        DataDimissioni(data_dimissioni::Include),
        Rfid1(rfid_1::Include),
        Rfid2(rfid_2::Include),
        Impresa(impresa::Include),
        Tipo(tipo::Include),
        Settimanali(settimanali::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Modello(data) => data.to_selection(),
                Self::TipoProprieta(data) => data.to_selection(),
                Self::Proprieta(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::DataDimissioni(data) => data.to_selection(),
                Self::Rfid1(data) => data.to_selection(),
                Self::Rfid2(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Tipo(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_mezzi { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: mezzi struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "descrizione")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub descrizione : Option < String > , # [serde (rename = "modello")] pub modello : String , # [serde (rename = "tipo_proprieta")] pub tipo_proprieta : i32 , # [serde (rename = "proprieta")] pub proprieta : String , # [serde (rename = "impresa_id")] pub impresa_id : i32 , # [serde (rename = "data_dimissioni")] pub data_dimissioni : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > , # [serde (rename = "rfid1")] pub rfid_1 : String , # [serde (rename = "rfid2")] pub rfid_2 : String } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_mezzi as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "descrizione")]
        pub descrizione: Option<String>,
        #[serde(rename = "modello")]
        pub modello: String,
        #[serde(rename = "tipo_proprieta")]
        pub tipo_proprieta: i32,
        #[serde(rename = "proprieta")]
        pub proprieta: String,
        #[serde(rename = "impresa_id")]
        pub impresa_id: i32,
        #[serde(rename = "data_dimissioni")]
        pub data_dimissioni:
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        #[serde(rename = "rfid1")]
        pub rfid_1: String,
        #[serde(rename = "rfid2")]
        pub rfid_2: String,
        #[serde(rename = "impresa")]
        pub impresa: Option<Box<super::imprese::Data>>,
        #[serde(rename = "tipo")]
        pub tipo: Option<Box<super::tipi_proprieta::Data>>,
        #[serde(rename = "settimanali")]
        pub settimanali: Option<Vec<super::settimanale::Data>>,
    }
    impl Data {
        pub fn impresa(
            &self,
        ) -> Result<&super::imprese::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.impresa
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(impresa),
                ))
                .map(|v| v.as_ref())
        }
        pub fn tipo(
            &self,
        ) -> Result<&super::tipi_proprieta::Data, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.tipo
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(tipo),
                ))
                .map(|v| v.as_ref())
        }
        pub fn settimanali(
            &self,
        ) -> Result<&Vec<super::settimanale::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.settimanali
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(settimanali),
                ))
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Impresa(super::imprese::UniqueArgs),
        Tipo(super::tipi_proprieta::UniqueArgs),
        Settimanali(super::settimanale::ManyArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Impresa(args) => {
                    let mut selections = < super :: imprese :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(impresa::NAME, None, [], selections)
                }
                Self::Tipo(args) => {
                    let mut selections = < super :: tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(tipo::NAME, None, [], selections)
                }
                Self::Settimanali(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        settimanali::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetDescrizione(Option<String>),
        SetModello(String),
        SetTipoProprieta(i32),
        IncrementTipoProprieta(i32),
        DecrementTipoProprieta(i32),
        MultiplyTipoProprieta(i32),
        DivideTipoProprieta(i32),
        SetProprieta(String),
        SetImpresaId(i32),
        IncrementImpresaId(i32),
        DecrementImpresaId(i32),
        MultiplyImpresaId(i32),
        DivideImpresaId(i32),
        SetDataDimissioni(
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        ),
        SetRfid1(String),
        SetRfid2(String),
        ConnectImpresa(super::imprese::UniqueWhereParam),
        ConnectTipo(super::tipi_proprieta::UniqueWhereParam),
        ConnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        DisconnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        SetSettimanali(Vec<super::settimanale::UniqueWhereParam>),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDescrizione(value) => (
                    descrizione::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetModello(value) => (
                    modello::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetProprieta(value) => (
                    proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDataDimissioni(value) => (
                    data_dimissioni::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::DateTime(value),
                ),
                SetParam::SetRfid1(value) => (
                    rfid_1::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetRfid2(value) => (
                    rfid_2::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::ConnectImpresa(where_param) => (
                    impresa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::imprese::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectTipo(where_param) => (
                    tipo::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::tipi_proprieta::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        Descrizione(Option<String>),
        Modello(String),
        TipoProprieta(i32),
        Proprieta(String),
        ImpresaId(i32),
        DataDimissioni(
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        ),
        Rfid1(String),
        Rfid2(String),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Descrizione(value) => Self::SetDescrizione(value),
                UncheckedSetParam::Modello(value) => Self::SetModello(value),
                UncheckedSetParam::TipoProprieta(value) => Self::SetTipoProprieta(value),
                UncheckedSetParam::Proprieta(value) => Self::SetProprieta(value),
                UncheckedSetParam::ImpresaId(value) => Self::SetImpresaId(value),
                UncheckedSetParam::DataDimissioni(value) => Self::SetDataDimissioni(value),
                UncheckedSetParam::Rfid1(value) => Self::SetRfid1(value),
                UncheckedSetParam::Rfid2(value) => Self::SetRfid2(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Descrizione(::prisma_client_rust::Direction),
        Modello(::prisma_client_rust::Direction),
        TipoProprieta(::prisma_client_rust::Direction),
        Proprieta(::prisma_client_rust::Direction),
        ImpresaId(::prisma_client_rust::Direction),
        DataDimissioni(::prisma_client_rust::Direction),
        Rfid1(::prisma_client_rust::Direction),
        Rfid2(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Descrizione(direction) => (
                    descrizione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Modello(direction) => (
                    modello::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::TipoProprieta(direction) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Proprieta(direction) => (
                    proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ImpresaId(direction) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::DataDimissioni(direction) => (
                    data_dimissioni::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Rfid1(direction) => (
                    rfid_1::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Rfid2(direction) => (
                    rfid_2::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        Descrizione(_prisma::read_filters::StringNullableFilter),
        Modello(_prisma::read_filters::StringFilter),
        TipoProprieta(_prisma::read_filters::IntFilter),
        Proprieta(_prisma::read_filters::StringFilter),
        ImpresaId(_prisma::read_filters::IntFilter),
        DataDimissioni(_prisma::read_filters::DateTimeFilter),
        Rfid1(_prisma::read_filters::StringFilter),
        Rfid2(_prisma::read_filters::StringFilter),
        ImpresaIs(Vec<super::imprese::WhereParam>),
        ImpresaIsNot(Vec<super::imprese::WhereParam>),
        TipoIs(Vec<super::tipi_proprieta::WhereParam>),
        TipoIsNot(Vec<super::tipi_proprieta::WhereParam>),
        SettimanaliSome(Vec<super::settimanale::WhereParam>),
        SettimanaliEvery(Vec<super::settimanale::WhereParam>),
        SettimanaliNone(Vec<super::settimanale::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Descrizione(value) => (descrizione::NAME, value.into()),
                Self::Modello(value) => (modello::NAME, value.into()),
                Self::TipoProprieta(value) => (tipo_proprieta::NAME, value.into()),
                Self::Proprieta(value) => (proprieta::NAME, value.into()),
                Self::ImpresaId(value) => (impresa_id::NAME, value.into()),
                Self::DataDimissioni(value) => (data_dimissioni::NAME, value.into()),
                Self::Rfid1(value) => (rfid_1::NAME, value.into()),
                Self::Rfid2(value) => (rfid_2::NAME, value.into()),
                Self::ImpresaIs(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpresaIsNot(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::TipoIs(where_params) => (
                    tipo::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::TipoIsNot(where_params) => (
                    tipo::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliSome(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliEvery(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliNone(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(descrizione::NAME),
                ::prisma_client_rust::sel(modello::NAME),
                ::prisma_client_rust::sel(tipo_proprieta::NAME),
                ::prisma_client_rust::sel(proprieta::NAME),
                ::prisma_client_rust::sel(impresa_id::NAME),
                ::prisma_client_rust::sel(data_dimissioni::NAME),
                ::prisma_client_rust::sel(rfid_1::NAME),
                ::prisma_client_rust::sel(rfid_2::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            modello: String,
            proprieta: String,
            data_dimissioni: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
            rfid_1: String,
            rfid_2: String,
            impresa: super::imprese::UniqueWhereParam,
            tipo: super::tipi_proprieta::UniqueWhereParam,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                modello::set(modello),
                proprieta::set(proprieta),
                data_dimissioni::set(data_dimissioni),
                rfid_1::set(rfid_1),
                rfid_2::set(rfid_2),
                impresa::connect(impresa),
                tipo::connect(tipo),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            modello: String,
            tipo_proprieta: i32,
            proprieta: String,
            impresa_id: i32,
            data_dimissioni: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
            rfid_1: String,
            rfid_2: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                modello::set(modello),
                tipo_proprieta::set(tipo_proprieta),
                proprieta::set(proprieta),
                impresa_id::set(impresa_id),
                data_dimissioni::set(data_dimissioni),
                rfid_1::set(rfid_1),
                rfid_2::set(rfid_2),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(
            self,
            data: Vec<(
                String,
                i32,
                String,
                i32,
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
                String,
                String,
                Vec<SetParam>,
            )>,
        ) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(
                    |(
                        modello,
                        tipo_proprieta,
                        proprieta,
                        impresa_id,
                        data_dimissioni,
                        rfid_1,
                        rfid_2,
                        mut _params,
                    )| {
                        _params.extend([
                            modello::set(modello),
                            tipo_proprieta::set(tipo_proprieta),
                            proprieta::set(proprieta),
                            impresa_id::set(impresa_id),
                            data_dimissioni::set(data_dimissioni),
                            rfid_1::set(rfid_1),
                            rfid_2::set(rfid_2),
                        ]);
                        _params
                    },
                )
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (modello, proprieta, data_dimissioni, rfid_1, rfid_2, impresa, tipo, mut _params): (
                String,
                String,
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
                String,
                String,
                super::imprese::UniqueWhereParam,
                super::tipi_proprieta::UniqueWhereParam,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                modello::set(modello),
                proprieta::set(proprieta),
                data_dimissioni::set(data_dimissioni),
                rfid_1::set(rfid_1),
                rfid_2::set(rfid_2),
                impresa::connect(impresa),
                tipo::connect(tipo),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod opere {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Opere";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod descrizione {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "descrizione";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDescrizione(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Descrizione(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Descrizione(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Descrizione(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Descrizione,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Descrizione(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Descrizione(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod settimanali {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "settimanali";
        pub struct Fetch(pub settimanale::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<settimanale::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: settimanale::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: settimanale::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Settimanali(v)
            }
        }
        pub fn fetch(params: Vec<settimanale::WhereParam>) -> Fetch {
            Fetch(settimanale::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<settimanale::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectSettimanali(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<settimanale::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectSettimanali(params)
        }
        pub fn set(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::SetSettimanali(params)
        }
        pub fn some(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliSome(value)
        }
        pub fn every(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliEvery(value)
        }
        pub fn none(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliNone(value)
        }
        pub enum Include {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Settimanali(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Settimanali(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub fn create(descrizione: String, _params: Vec<SetParam>) -> (String, Vec<SetParam>) {
        (descrizione, _params)
    }
    pub fn create_unchecked(
        descrizione: String,
        _params: Vec<SetParam>,
    ) -> (String, Vec<SetParam>) {
        (descrizione, _params)
    }
    #[macro_export]
    macro_rules ! _select_opere { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: opere :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: opere :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: opere :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: opere :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: opere :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: opere :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , descrizione , settimanali } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: opere :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: opere :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: opere :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: opere :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: opere :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: opere :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "settimanali"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: opere :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; descrizione) => { String } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Opere" , available relations are "id, descrizione, settimanali")) } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: opere :: SelectParam > :: into (crate :: prisma :: opere :: id :: Select) } ; (@ selection_field_to_selection_param ; descrizione) => { Into :: < crate :: prisma :: opere :: SelectParam > :: into (crate :: prisma :: opere :: descrizione :: Select) } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: opere :: SelectParam > :: into (crate :: prisma :: opere :: settimanali :: Select :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: opere :: SelectParam > :: into (crate :: prisma :: opere :: settimanali :: Select :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: opere :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; }
    pub use _select_opere as select;
    pub enum SelectParam {
        Id(id::Select),
        Descrizione(descrizione::Select),
        Settimanali(settimanali::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_opere { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: opere :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: opere :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: opere :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: opere :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: opere :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: opere :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: opere :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: opere :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { settimanali } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub descrizione : String , $ (pub $ field : crate :: prisma :: opere :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (descrizione)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: opere :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: opere :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: opere :: descrizione :: NAME , & self . descrizione) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , descrizione } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: opere :: $ field :: NAME) , + , crate :: prisma :: opere :: id :: NAME , crate :: prisma :: opere :: descrizione :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: opere :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: opere :: id :: NAME => Ok (Field :: id) , crate :: prisma :: opere :: descrizione :: NAME => Ok (Field :: descrizione) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut descrizione = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: opere :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: descrizione => { if descrizione . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: opere :: descrizione :: NAME)) ; } descrizione = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: opere :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: opere :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: opere :: id :: NAME)) ? ; let descrizione = descrizione . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: opere :: descrizione :: NAME)) ? ; Ok (Data { id , descrizione , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "settimanali"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: opere :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Opere" , available relations are "settimanali")) } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: opere :: IncludeParam > :: into (crate :: prisma :: opere :: settimanali :: Include :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: opere :: IncludeParam > :: into (crate :: prisma :: opere :: settimanali :: Include :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: opere :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; }
    pub use _include_opere as include;
    pub enum IncludeParam {
        Id(id::Include),
        Descrizione(descrizione::Include),
        Settimanali(settimanali::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_opere { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: opere struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "descrizione")] pub descrizione : String } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_opere as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "descrizione")]
        pub descrizione: String,
        #[serde(rename = "settimanali")]
        pub settimanali: Option<Vec<super::settimanale::Data>>,
    }
    impl Data {
        pub fn settimanali(
            &self,
        ) -> Result<&Vec<super::settimanale::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.settimanali
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(settimanali),
                ))
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Settimanali(super::settimanale::ManyArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Settimanali(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        settimanali::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetDescrizione(String),
        ConnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        DisconnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        SetSettimanali(Vec<super::settimanale::UniqueWhereParam>),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDescrizione(value) => (
                    descrizione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::ConnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        Descrizione(String),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Descrizione(value) => Self::SetDescrizione(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Descrizione(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Descrizione(direction) => (
                    descrizione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        Descrizione(_prisma::read_filters::StringFilter),
        SettimanaliSome(Vec<super::settimanale::WhereParam>),
        SettimanaliEvery(Vec<super::settimanale::WhereParam>),
        SettimanaliNone(Vec<super::settimanale::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Descrizione(value) => (descrizione::NAME, value.into()),
                Self::SettimanaliSome(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliEvery(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliNone(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(descrizione::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(self, descrizione: String, mut _params: Vec<SetParam>) -> Create<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            descrizione: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(String, Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(descrizione, mut _params)| {
                    _params.extend([descrizione::set(descrizione)]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (descrizione, mut _params): (String, Vec<SetParam>),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod qualifica {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Qualifica";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod descrizione {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "descrizione";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDescrizione(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Descrizione(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Descrizione(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Descrizione(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Descrizione,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Descrizione(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Descrizione(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod dipendenti {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "dipendenti";
        pub struct Fetch(pub dipendenti::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<dipendenti::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: dipendenti::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: dipendenti::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Dipendenti(v)
            }
        }
        pub fn fetch(params: Vec<dipendenti::WhereParam>) -> Fetch {
            Fetch(dipendenti::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<dipendenti::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectDipendenti(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<dipendenti::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<dipendenti::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectDipendenti(params)
        }
        pub fn set(params: Vec<dipendenti::UniqueWhereParam>) -> SetParam {
            SetParam::SetDipendenti(params)
        }
        pub fn some(value: Vec<dipendenti::WhereParam>) -> WhereParam {
            WhereParam::DipendentiSome(value)
        }
        pub fn every(value: Vec<dipendenti::WhereParam>) -> WhereParam {
            WhereParam::DipendentiEvery(value)
        }
        pub fn none(value: Vec<dipendenti::WhereParam>) -> WhereParam {
            WhereParam::DipendentiNone(value)
        }
        pub enum Include {
            Select(dipendenti::ManyArgs, Vec<dipendenti::SelectParam>),
            Include(dipendenti::ManyArgs, Vec<dipendenti::IncludeParam>),
            Fetch(dipendenti::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Dipendenti(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < dipendenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <dipendenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(dipendenti::ManyArgs, Vec<dipendenti::SelectParam>),
            Include(dipendenti::ManyArgs, Vec<dipendenti::IncludeParam>),
            Fetch(dipendenti::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Dipendenti(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <dipendenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: dipendenti::ManyArgs,
                nested_selections: Vec<dipendenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub fn create(descrizione: String, _params: Vec<SetParam>) -> (String, Vec<SetParam>) {
        (descrizione, _params)
    }
    pub fn create_unchecked(
        descrizione: String,
        _params: Vec<SetParam>,
    ) -> (String, Vec<SetParam>) {
        (descrizione, _params)
    }
    #[macro_export]
    macro_rules ! _select_qualifica { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: qualifica :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: qualifica :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: qualifica :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: qualifica :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: qualifica :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: qualifica :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , descrizione , dipendenti } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: qualifica :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: qualifica :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: qualifica :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: qualifica :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: qualifica :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: qualifica :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "dipendenti"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: qualifica :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; descrizione) => { String } ; (@ field_type ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < dipendenti :: Data > } ; (@ field_type ; dipendenti) => { Vec < crate :: prisma :: dipendenti :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Qualifica" , available relations are "id, descrizione, dipendenti")) } ; (@ field_module ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: dipendenti :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: qualifica :: SelectParam > :: into (crate :: prisma :: qualifica :: id :: Select) } ; (@ selection_field_to_selection_param ; descrizione) => { Into :: < crate :: prisma :: qualifica :: SelectParam > :: into (crate :: prisma :: qualifica :: descrizione :: Select) } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: qualifica :: SelectParam > :: into (crate :: prisma :: qualifica :: dipendenti :: Select :: $ selection_mode (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: dipendenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: qualifica :: SelectParam > :: into (crate :: prisma :: qualifica :: dipendenti :: Select :: Fetch (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: qualifica :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; dipendenti) => { "dipendenti" } ; }
    pub use _select_qualifica as select;
    pub enum SelectParam {
        Id(id::Select),
        Descrizione(descrizione::Select),
        Dipendenti(dipendenti::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Dipendenti(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_qualifica { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: qualifica :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: qualifica :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: qualifica :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: qualifica :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: qualifica :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: qualifica :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: qualifica :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: qualifica :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { dipendenti } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub descrizione : String , $ (pub $ field : crate :: prisma :: qualifica :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (descrizione)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: qualifica :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: qualifica :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: qualifica :: descrizione :: NAME , & self . descrizione) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , descrizione } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: qualifica :: $ field :: NAME) , + , crate :: prisma :: qualifica :: id :: NAME , crate :: prisma :: qualifica :: descrizione :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: qualifica :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: qualifica :: id :: NAME => Ok (Field :: id) , crate :: prisma :: qualifica :: descrizione :: NAME => Ok (Field :: descrizione) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut descrizione = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: qualifica :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: descrizione => { if descrizione . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: qualifica :: descrizione :: NAME)) ; } descrizione = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: qualifica :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: qualifica :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: qualifica :: id :: NAME)) ? ; let descrizione = descrizione . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: qualifica :: descrizione :: NAME)) ? ; Ok (Data { id , descrizione , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "dipendenti"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: qualifica :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < dipendenti :: Data > } ; (@ field_type ; dipendenti) => { Vec < crate :: prisma :: dipendenti :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Qualifica" , available relations are "dipendenti")) } ; (@ field_module ; dipendenti : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: dipendenti :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: qualifica :: IncludeParam > :: into (crate :: prisma :: qualifica :: dipendenti :: Include :: $ selection_mode (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: dipendenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; dipendenti $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: qualifica :: IncludeParam > :: into (crate :: prisma :: qualifica :: dipendenti :: Include :: Fetch (crate :: prisma :: dipendenti :: ManyArgs :: new (crate :: prisma :: dipendenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: qualifica :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; dipendenti) => { "dipendenti" } ; }
    pub use _include_qualifica as include;
    pub enum IncludeParam {
        Id(id::Include),
        Descrizione(descrizione::Include),
        Dipendenti(dipendenti::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Dipendenti(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_qualifica { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: qualifica struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "descrizione")] pub descrizione : String } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_qualifica as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "descrizione")]
        pub descrizione: String,
        #[serde(rename = "dipendenti")]
        pub dipendenti: Option<Vec<super::dipendenti::Data>>,
    }
    impl Data {
        pub fn dipendenti(
            &self,
        ) -> Result<&Vec<super::dipendenti::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.dipendenti
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(dipendenti),
                ))
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Dipendenti(super::dipendenti::ManyArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Dipendenti(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: dipendenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        dipendenti::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetDescrizione(String),
        ConnectDipendenti(Vec<super::dipendenti::UniqueWhereParam>),
        DisconnectDipendenti(Vec<super::dipendenti::UniqueWhereParam>),
        SetDipendenti(Vec<super::dipendenti::UniqueWhereParam>),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDescrizione(value) => (
                    descrizione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::ConnectDipendenti(where_params) => (
                    dipendenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::dipendenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectDipendenti(where_params) => (
                    dipendenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::dipendenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetDipendenti(where_params) => (
                    dipendenti::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::dipendenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        Descrizione(String),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Descrizione(value) => Self::SetDescrizione(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Descrizione(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Descrizione(direction) => (
                    descrizione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        Descrizione(_prisma::read_filters::StringFilter),
        DipendentiSome(Vec<super::dipendenti::WhereParam>),
        DipendentiEvery(Vec<super::dipendenti::WhereParam>),
        DipendentiNone(Vec<super::dipendenti::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Descrizione(value) => (descrizione::NAME, value.into()),
                Self::DipendentiSome(where_params) => (
                    dipendenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::DipendentiEvery(where_params) => (
                    dipendenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::DipendentiNone(where_params) => (
                    dipendenti::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(descrizione::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(self, descrizione: String, mut _params: Vec<SetParam>) -> Create<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            descrizione: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(String, Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(descrizione, mut _params)| {
                    _params.extend([descrizione::set(descrizione)]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (descrizione, mut _params): (String, Vec<SetParam>),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod settimanale {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Settimanale";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod data_settimanale {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "data_settimanale";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDataSettimanale(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::DataSettimanale(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::DataSettimanale(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::DataSettimanale(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            DataSettimanale,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::DataSettimanale(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::DataSettimanale(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod utente_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "utente_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetUtenteId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::UtenteId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::UtenteId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::UtenteId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            UtenteId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementUtenteId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementUtenteId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyUtenteId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideUtenteId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::UtenteId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::UtenteId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod luogo_di_nascita {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "luogo_di_nascita";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetLuogoDiNascita(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::LuogoDiNascita(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::LuogoDiNascita(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::LuogoDiNascita(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            LuogoDiNascita,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::LuogoDiNascita(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::LuogoDiNascita(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod data_di_nascita {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "data_di_nascita";
        pub struct Set(
            pub ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        );
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDataDiNascita(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::DataDiNascita(v)
            }
        }
        pub fn set<T: From<Set>>(
            value: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
        ) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::DataDiNascita(direction)
        }
        pub fn equals(
            value: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
        ) -> WhereParam {
            WhereParam::DataDiNascita(_prisma::read_filters::DateTimeFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::DateTimeFilter,
            DataDiNascita,
            {
                fn in_vec(
                    _: Vec<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> InVec;
                fn not_in_vec(
                    _: Vec<
                        ::prisma_client_rust::chrono::DateTime<
                            ::prisma_client_rust::chrono::FixedOffset,
                        >,
                    >,
                ) -> NotInVec;
                fn lt(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Lt;
                fn lte(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Lte;
                fn gt(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Gt;
                fn gte(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Gte;
                fn not(
                    _: ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                ) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::DataDiNascita(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::DataDiNascita(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod tipo_proprieta {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "tipo_proprieta";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTipoProprieta(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::TipoProprieta(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::TipoProprieta(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::TipoProprieta(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            TipoProprieta,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementTipoProprieta(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementTipoProprieta(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyTipoProprieta(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideTipoProprieta(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::TipoProprieta(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::TipoProprieta(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod proprieta {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "proprieta";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetProprieta(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Proprieta(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Proprieta(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Proprieta(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Proprieta,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Proprieta(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Proprieta(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetImpresaId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ImpresaId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ImpresaId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::ImpresaId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            ImpresaId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementImpresaId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementImpresaId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyImpresaId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideImpresaId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpresaId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpresaId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod opera_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "opera_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetOperaId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::OperaId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::OperaId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::OperaId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, OperaId, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementOperaId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementOperaId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyOperaId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideOperaId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::OperaId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::OperaId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod mezzo_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "mezzo_id";
        pub struct Set(pub Option<i32>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetMezzoId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::MezzoId(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<i32>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::MezzoId(direction)
        }
        pub fn equals(value: Option<i32>) -> WhereParam {
            WhereParam::MezzoId(_prisma::read_filters::IntNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntNullableFilter,
            MezzoId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: Option<i32>) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementMezzoId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementMezzoId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyMezzoId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideMezzoId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::MezzoId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::MezzoId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod autovettura_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "autovettura_id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetAutovetturaId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::AutovetturaId(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::AutovetturaId(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::AutovetturaId(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            AutovetturaId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementAutovetturaId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementAutovetturaId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyAutovetturaId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideAutovetturaId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::AutovetturaId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::AutovetturaId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod matricola {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "matricola";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetMatricola(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Matricola(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Matricola(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::Matricola(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            Matricola,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Matricola(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Matricola(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod targa {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "targa";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTarga(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Targa(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Targa(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Targa(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Targa,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Targa(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Targa(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod utente {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "utente";
        pub struct Fetch(pub utenti::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<utenti::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Utente(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(utenti::UniqueArgs::new())
        }
        pub struct Connect(utenti::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectUtente(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: utenti::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<utenti::WhereParam>) -> WhereParam {
            WhereParam::UtenteIs(value)
        }
        pub fn is_not(value: Vec<utenti::WhereParam>) -> WhereParam {
            WhereParam::UtenteIsNot(value)
        }
        pub enum Include {
            Select(Vec<utenti::SelectParam>),
            Include(Vec<utenti::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Utente(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <utenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <utenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("utente", None, [], selections)
            }
            pub fn select(nested_selections: Vec<utenti::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<utenti::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<utenti::SelectParam>),
            Include(Vec<utenti::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Utente(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <utenti::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("utente", None, [], selections)
            }
            pub fn select(nested_selections: Vec<utenti::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<utenti::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod impresa {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa";
        pub struct Fetch(pub imprese::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Impresa(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(imprese::UniqueArgs::new())
        }
        pub struct Connect(imprese::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpresa(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: imprese::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIs(value)
        }
        pub fn is_not(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIsNot(value)
        }
        pub enum Include {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Impresa(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Impresa(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod opera {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "opera";
        pub struct Fetch(pub opere::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<opere::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Opera(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(opere::UniqueArgs::new())
        }
        pub struct Connect(opere::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectOpera(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: opere::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<opere::WhereParam>) -> WhereParam {
            WhereParam::OperaIs(value)
        }
        pub fn is_not(value: Vec<opere::WhereParam>) -> WhereParam {
            WhereParam::OperaIsNot(value)
        }
        pub enum Include {
            Select(Vec<opere::SelectParam>),
            Include(Vec<opere::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Opera(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <opere::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <opere::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("opera", None, [], selections)
            }
            pub fn select(nested_selections: Vec<opere::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<opere::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<opere::SelectParam>),
            Include(Vec<opere::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Opera(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <opere::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("opera", None, [], selections)
            }
            pub fn select(nested_selections: Vec<opere::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<opere::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod autovettura {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "autovettura";
        pub struct Fetch(pub autovetture::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<autovetture::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Autovettura(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(autovetture::UniqueArgs::new())
        }
        pub struct Connect(autovetture::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectAutovettura(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: autovetture::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<autovetture::WhereParam>) -> WhereParam {
            WhereParam::AutovetturaIs(value)
        }
        pub fn is_not(value: Vec<autovetture::WhereParam>) -> WhereParam {
            WhereParam::AutovetturaIsNot(value)
        }
        pub enum Include {
            Select(Vec<autovetture::SelectParam>),
            Include(Vec<autovetture::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Autovettura(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = < autovetture :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <autovetture::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        )
                    }
                };
                ::prisma_client_rust::Selection::new("autovettura", None, [], selections)
            }
            pub fn select(nested_selections: Vec<autovetture::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<autovetture::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<autovetture::SelectParam>),
            Include(Vec<autovetture::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Autovettura(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <autovetture::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        )
                    }
                };
                ::prisma_client_rust::Selection::new("autovettura", None, [], selections)
            }
            pub fn select(nested_selections: Vec<autovetture::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<autovetture::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod tipo {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "tipo";
        pub struct Fetch(pub tipi_proprieta::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<tipi_proprieta::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Tipo(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(tipi_proprieta::UniqueArgs::new())
        }
        pub struct Connect(tipi_proprieta::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectTipo(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: tipi_proprieta::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<tipi_proprieta::WhereParam>) -> WhereParam {
            WhereParam::TipoIs(value)
        }
        pub fn is_not(value: Vec<tipi_proprieta::WhereParam>) -> WhereParam {
            WhereParam::TipoIsNot(value)
        }
        pub enum Include {
            Select(Vec<tipi_proprieta::SelectParam>),
            Include(Vec<tipi_proprieta::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Tipo(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self { Self :: Select (selections) => { selections . into_iter () . map (| s | s . to_selection ()) . collect () } , Self :: Include (selections) => { let mut nested_selections = < tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections } , Self :: Fetch => { < tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () } } ;
                ::prisma_client_rust::Selection::new("tipo", None, [], selections)
            }
            pub fn select(nested_selections: Vec<tipi_proprieta::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<tipi_proprieta::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<tipi_proprieta::SelectParam>),
            Include(Vec<tipi_proprieta::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Tipo(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self { Self :: Select (selections) => { selections . into_iter () . map (| s | s . to_selection ()) . collect () } , Self :: Include (selections) => { let mut nested_selections = vec ! [] ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections } , Self :: Fetch => { < tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () } } ;
                ::prisma_client_rust::Selection::new("tipo", None, [], selections)
            }
            pub fn select(nested_selections: Vec<tipi_proprieta::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<tipi_proprieta::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod mezzo {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "mezzo";
        pub struct Fetch(pub mezzi::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<mezzi::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Mezzo(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(mezzi::UniqueArgs::new())
        }
        pub struct Connect(mezzi::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectMezzo(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: mezzi::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn disconnect() -> SetParam {
            SetParam::DisconnectMezzo
        }
        pub fn is_null() -> WhereParam {
            WhereParam::MezzoIsNull
        }
        pub fn is(value: Vec<mezzi::WhereParam>) -> WhereParam {
            WhereParam::MezzoIs(value)
        }
        pub fn is_not(value: Vec<mezzi::WhereParam>) -> WhereParam {
            WhereParam::MezzoIsNot(value)
        }
        pub enum Include {
            Select(Vec<mezzi::SelectParam>),
            Include(Vec<mezzi::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Mezzo(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <mezzi::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <mezzi::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("mezzo", None, [], selections)
            }
            pub fn select(nested_selections: Vec<mezzi::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<mezzi::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<mezzi::SelectParam>),
            Include(Vec<mezzi::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Mezzo(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <mezzi::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("mezzo", None, [], selections)
            }
            pub fn select(nested_selections: Vec<mezzi::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<mezzi::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub fn create(
        data_settimanale: String,
        luogo_di_nascita: String,
        data_di_nascita: ::prisma_client_rust::chrono::DateTime<
            ::prisma_client_rust::chrono::FixedOffset,
        >,
        proprieta: String,
        targa: String,
        utente: super::utenti::UniqueWhereParam,
        impresa: super::imprese::UniqueWhereParam,
        opera: super::opere::UniqueWhereParam,
        autovettura: super::autovetture::UniqueWhereParam,
        tipo: super::tipi_proprieta::UniqueWhereParam,
        _params: Vec<SetParam>,
    ) -> (
        String,
        String,
        ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        String,
        String,
        super::utenti::UniqueWhereParam,
        super::imprese::UniqueWhereParam,
        super::opere::UniqueWhereParam,
        super::autovetture::UniqueWhereParam,
        super::tipi_proprieta::UniqueWhereParam,
        Vec<SetParam>,
    ) {
        (
            data_settimanale,
            luogo_di_nascita,
            data_di_nascita,
            proprieta,
            targa,
            utente,
            impresa,
            opera,
            autovettura,
            tipo,
            _params,
        )
    }
    pub fn create_unchecked(
        data_settimanale: String,
        utente_id: i32,
        luogo_di_nascita: String,
        data_di_nascita: ::prisma_client_rust::chrono::DateTime<
            ::prisma_client_rust::chrono::FixedOffset,
        >,
        tipo_proprieta: i32,
        proprieta: String,
        impresa_id: i32,
        opera_id: i32,
        autovettura_id: i32,
        targa: String,
        _params: Vec<SetParam>,
    ) -> (
        String,
        i32,
        String,
        ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        i32,
        String,
        i32,
        i32,
        i32,
        String,
        Vec<SetParam>,
    ) {
        (
            data_settimanale,
            utente_id,
            luogo_di_nascita,
            data_di_nascita,
            tipo_proprieta,
            proprieta,
            impresa_id,
            opera_id,
            autovettura_id,
            targa,
            _params,
        )
    }
    #[macro_export]
    macro_rules ! _select_settimanale { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: settimanale :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: settimanale :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: settimanale :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: settimanale :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , data_settimanale , utente_id , luogo_di_nascita , data_di_nascita , tipo_proprieta , proprieta , impresa_id , opera_id , mezzo_id , autovettura_id , matricola , targa , utente , impresa , opera , autovettura , tipo , mezzo } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: settimanale :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: settimanale :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: settimanale :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: settimanale :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "data_settimanale" , "utente_id" , "luogo_di_nascita" , "data_di_nascita" , "tipo_proprieta" , "proprieta" , "impresa_id" , "opera_id" , "mezzo_id" , "autovettura_id" , "matricola" , "targa" , "utente" , "impresa" , "opera" , "autovettura" , "tipo" , "mezzo"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: settimanale :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; data_settimanale) => { String } ; (@ field_type ; utente_id) => { i32 } ; (@ field_type ; luogo_di_nascita) => { String } ; (@ field_type ; data_di_nascita) => { :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > } ; (@ field_type ; tipo_proprieta) => { i32 } ; (@ field_type ; proprieta) => { String } ; (@ field_type ; impresa_id) => { i32 } ; (@ field_type ; opera_id) => { i32 } ; (@ field_type ; mezzo_id) => { Option < i32 > } ; (@ field_type ; autovettura_id) => { i32 } ; (@ field_type ; matricola) => { Option < String > } ; (@ field_type ; targa) => { String } ; (@ field_type ; utente : $ selection_mode : ident { $ ($ selections : tt) + }) => { utente :: Data } ; (@ field_type ; utente) => { crate :: prisma :: utenti :: Data } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; opera : $ selection_mode : ident { $ ($ selections : tt) + }) => { opera :: Data } ; (@ field_type ; opera) => { crate :: prisma :: opere :: Data } ; (@ field_type ; autovettura : $ selection_mode : ident { $ ($ selections : tt) + }) => { autovettura :: Data } ; (@ field_type ; autovettura) => { crate :: prisma :: autovetture :: Data } ; (@ field_type ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { tipo :: Data } ; (@ field_type ; tipo) => { crate :: prisma :: tipi_proprieta :: Data } ; (@ field_type ; mezzo : $ selection_mode : ident { $ ($ selections : tt) + }) => { Option < mezzo :: Data > } ; (@ field_type ; mezzo) => { Option < crate :: prisma :: mezzi :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Settimanale" , available relations are "id, data_settimanale, utente_id, luogo_di_nascita, data_di_nascita, tipo_proprieta, proprieta, impresa_id, opera_id, mezzo_id, autovettura_id, matricola, targa, utente, impresa, opera, autovettura, tipo, mezzo")) } ; (@ field_module ; utente : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: utenti :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; opera : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: opere :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; autovettura : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: autovetture :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: tipi_proprieta :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; mezzo : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: mezzi :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: id :: Select) } ; (@ selection_field_to_selection_param ; data_settimanale) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: data_settimanale :: Select) } ; (@ selection_field_to_selection_param ; utente_id) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: utente_id :: Select) } ; (@ selection_field_to_selection_param ; luogo_di_nascita) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: luogo_di_nascita :: Select) } ; (@ selection_field_to_selection_param ; data_di_nascita) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: data_di_nascita :: Select) } ; (@ selection_field_to_selection_param ; tipo_proprieta) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: tipo_proprieta :: Select) } ; (@ selection_field_to_selection_param ; proprieta) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: proprieta :: Select) } ; (@ selection_field_to_selection_param ; impresa_id) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: impresa_id :: Select) } ; (@ selection_field_to_selection_param ; opera_id) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: opera_id :: Select) } ; (@ selection_field_to_selection_param ; mezzo_id) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: mezzo_id :: Select) } ; (@ selection_field_to_selection_param ; autovettura_id) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: autovettura_id :: Select) } ; (@ selection_field_to_selection_param ; matricola) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: matricola :: Select) } ; (@ selection_field_to_selection_param ; targa) => { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: targa :: Select) } ; (@ selection_field_to_selection_param ; utente $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: utente :: Select :: $ selection_mode (crate :: prisma :: utenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; utente $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: utente :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: impresa :: Select :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: impresa :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; opera $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: opera :: Select :: $ selection_mode (crate :: prisma :: opere :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; opera $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: opera :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; autovettura $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: autovettura :: Select :: $ selection_mode (crate :: prisma :: autovetture :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; autovettura $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: autovettura :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: tipo :: Select :: $ selection_mode (crate :: prisma :: tipi_proprieta :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: tipo :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; mezzo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: mezzo :: Select :: $ selection_mode (crate :: prisma :: mezzi :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; mezzo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: SelectParam > :: into (crate :: prisma :: settimanale :: mezzo :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: settimanale :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; data_settimanale) => { "data_settimanale" } ; (@ field_serde_name ; utente_id) => { "utente_id" } ; (@ field_serde_name ; luogo_di_nascita) => { "luogo_di_nascita" } ; (@ field_serde_name ; data_di_nascita) => { "data_di_nascita" } ; (@ field_serde_name ; tipo_proprieta) => { "tipo_proprieta" } ; (@ field_serde_name ; proprieta) => { "proprieta" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; opera_id) => { "opera_id" } ; (@ field_serde_name ; mezzo_id) => { "mezzo_id" } ; (@ field_serde_name ; autovettura_id) => { "autovettura_id" } ; (@ field_serde_name ; matricola) => { "matricola" } ; (@ field_serde_name ; targa) => { "targa" } ; (@ field_serde_name ; utente) => { "utente" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; opera) => { "opera" } ; (@ field_serde_name ; autovettura) => { "autovettura" } ; (@ field_serde_name ; tipo) => { "tipo" } ; (@ field_serde_name ; mezzo) => { "mezzo" } ; }
    pub use _select_settimanale as select;
    pub enum SelectParam {
        Id(id::Select),
        DataSettimanale(data_settimanale::Select),
        UtenteId(utente_id::Select),
        LuogoDiNascita(luogo_di_nascita::Select),
        DataDiNascita(data_di_nascita::Select),
        TipoProprieta(tipo_proprieta::Select),
        Proprieta(proprieta::Select),
        ImpresaId(impresa_id::Select),
        OperaId(opera_id::Select),
        MezzoId(mezzo_id::Select),
        AutovetturaId(autovettura_id::Select),
        Matricola(matricola::Select),
        Targa(targa::Select),
        Utente(utente::Select),
        Impresa(impresa::Select),
        Opera(opera::Select),
        Autovettura(autovettura::Select),
        Tipo(tipo::Select),
        Mezzo(mezzo::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::DataSettimanale(data) => data.to_selection(),
                Self::UtenteId(data) => data.to_selection(),
                Self::LuogoDiNascita(data) => data.to_selection(),
                Self::DataDiNascita(data) => data.to_selection(),
                Self::TipoProprieta(data) => data.to_selection(),
                Self::Proprieta(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::OperaId(data) => data.to_selection(),
                Self::MezzoId(data) => data.to_selection(),
                Self::AutovetturaId(data) => data.to_selection(),
                Self::Matricola(data) => data.to_selection(),
                Self::Targa(data) => data.to_selection(),
                Self::Utente(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Opera(data) => data.to_selection(),
                Self::Autovettura(data) => data.to_selection(),
                Self::Tipo(data) => data.to_selection(),
                Self::Mezzo(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_settimanale { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: settimanale :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: settimanale :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: settimanale :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: settimanale :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: settimanale :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: settimanale :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { utente , impresa , opera , autovettura , tipo , mezzo } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub data_settimanale : String , pub utente_id : i32 , pub luogo_di_nascita : String , pub data_di_nascita : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > , pub tipo_proprieta : i32 , pub proprieta : String , pub impresa_id : i32 , pub opera_id : i32 , pub mezzo_id : Option < i32 > , pub autovettura_id : i32 , pub matricola : Option < String > , pub targa : String , $ (pub $ field : crate :: prisma :: settimanale :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (data_settimanale) , stringify ! (utente_id) , stringify ! (luogo_di_nascita) , stringify ! (data_di_nascita) , stringify ! (tipo_proprieta) , stringify ! (proprieta) , stringify ! (impresa_id) , stringify ! (opera_id) , stringify ! (mezzo_id) , stringify ! (autovettura_id) , stringify ! (matricola) , stringify ! (targa)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: settimanale :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: settimanale :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: settimanale :: data_settimanale :: NAME , & self . data_settimanale) ? ; state . serialize_field (crate :: prisma :: settimanale :: utente_id :: NAME , & self . utente_id) ? ; state . serialize_field (crate :: prisma :: settimanale :: luogo_di_nascita :: NAME , & self . luogo_di_nascita) ? ; state . serialize_field (crate :: prisma :: settimanale :: data_di_nascita :: NAME , & self . data_di_nascita) ? ; state . serialize_field (crate :: prisma :: settimanale :: tipo_proprieta :: NAME , & self . tipo_proprieta) ? ; state . serialize_field (crate :: prisma :: settimanale :: proprieta :: NAME , & self . proprieta) ? ; state . serialize_field (crate :: prisma :: settimanale :: impresa_id :: NAME , & self . impresa_id) ? ; state . serialize_field (crate :: prisma :: settimanale :: opera_id :: NAME , & self . opera_id) ? ; state . serialize_field (crate :: prisma :: settimanale :: mezzo_id :: NAME , & self . mezzo_id) ? ; state . serialize_field (crate :: prisma :: settimanale :: autovettura_id :: NAME , & self . autovettura_id) ? ; state . serialize_field (crate :: prisma :: settimanale :: matricola :: NAME , & self . matricola) ? ; state . serialize_field (crate :: prisma :: settimanale :: targa :: NAME , & self . targa) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , data_settimanale , utente_id , luogo_di_nascita , data_di_nascita , tipo_proprieta , proprieta , impresa_id , opera_id , mezzo_id , autovettura_id , matricola , targa } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: settimanale :: $ field :: NAME) , + , crate :: prisma :: settimanale :: id :: NAME , crate :: prisma :: settimanale :: data_settimanale :: NAME , crate :: prisma :: settimanale :: utente_id :: NAME , crate :: prisma :: settimanale :: luogo_di_nascita :: NAME , crate :: prisma :: settimanale :: data_di_nascita :: NAME , crate :: prisma :: settimanale :: tipo_proprieta :: NAME , crate :: prisma :: settimanale :: proprieta :: NAME , crate :: prisma :: settimanale :: impresa_id :: NAME , crate :: prisma :: settimanale :: opera_id :: NAME , crate :: prisma :: settimanale :: mezzo_id :: NAME , crate :: prisma :: settimanale :: autovettura_id :: NAME , crate :: prisma :: settimanale :: matricola :: NAME , crate :: prisma :: settimanale :: targa :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: settimanale :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: settimanale :: id :: NAME => Ok (Field :: id) , crate :: prisma :: settimanale :: data_settimanale :: NAME => Ok (Field :: data_settimanale) , crate :: prisma :: settimanale :: utente_id :: NAME => Ok (Field :: utente_id) , crate :: prisma :: settimanale :: luogo_di_nascita :: NAME => Ok (Field :: luogo_di_nascita) , crate :: prisma :: settimanale :: data_di_nascita :: NAME => Ok (Field :: data_di_nascita) , crate :: prisma :: settimanale :: tipo_proprieta :: NAME => Ok (Field :: tipo_proprieta) , crate :: prisma :: settimanale :: proprieta :: NAME => Ok (Field :: proprieta) , crate :: prisma :: settimanale :: impresa_id :: NAME => Ok (Field :: impresa_id) , crate :: prisma :: settimanale :: opera_id :: NAME => Ok (Field :: opera_id) , crate :: prisma :: settimanale :: mezzo_id :: NAME => Ok (Field :: mezzo_id) , crate :: prisma :: settimanale :: autovettura_id :: NAME => Ok (Field :: autovettura_id) , crate :: prisma :: settimanale :: matricola :: NAME => Ok (Field :: matricola) , crate :: prisma :: settimanale :: targa :: NAME => Ok (Field :: targa) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut data_settimanale = None ; let mut utente_id = None ; let mut luogo_di_nascita = None ; let mut data_di_nascita = None ; let mut tipo_proprieta = None ; let mut proprieta = None ; let mut impresa_id = None ; let mut opera_id = None ; let mut mezzo_id = None ; let mut autovettura_id = None ; let mut matricola = None ; let mut targa = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: data_settimanale => { if data_settimanale . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: data_settimanale :: NAME)) ; } data_settimanale = Some (map . next_value () ?) ; } Field :: utente_id => { if utente_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: utente_id :: NAME)) ; } utente_id = Some (map . next_value () ?) ; } Field :: luogo_di_nascita => { if luogo_di_nascita . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: luogo_di_nascita :: NAME)) ; } luogo_di_nascita = Some (map . next_value () ?) ; } Field :: data_di_nascita => { if data_di_nascita . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: data_di_nascita :: NAME)) ; } data_di_nascita = Some (map . next_value () ?) ; } Field :: tipo_proprieta => { if tipo_proprieta . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: tipo_proprieta :: NAME)) ; } tipo_proprieta = Some (map . next_value () ?) ; } Field :: proprieta => { if proprieta . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: proprieta :: NAME)) ; } proprieta = Some (map . next_value () ?) ; } Field :: impresa_id => { if impresa_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: impresa_id :: NAME)) ; } impresa_id = Some (map . next_value () ?) ; } Field :: opera_id => { if opera_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: opera_id :: NAME)) ; } opera_id = Some (map . next_value () ?) ; } Field :: mezzo_id => { if mezzo_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: mezzo_id :: NAME)) ; } mezzo_id = Some (map . next_value () ?) ; } Field :: autovettura_id => { if autovettura_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: autovettura_id :: NAME)) ; } autovettura_id = Some (map . next_value () ?) ; } Field :: matricola => { if matricola . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: matricola :: NAME)) ; } matricola = Some (map . next_value () ?) ; } Field :: targa => { if targa . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: targa :: NAME)) ; } targa = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: settimanale :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: id :: NAME)) ? ; let data_settimanale = data_settimanale . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: data_settimanale :: NAME)) ? ; let utente_id = utente_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: utente_id :: NAME)) ? ; let luogo_di_nascita = luogo_di_nascita . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: luogo_di_nascita :: NAME)) ? ; let data_di_nascita = data_di_nascita . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: data_di_nascita :: NAME)) ? ; let tipo_proprieta = tipo_proprieta . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: tipo_proprieta :: NAME)) ? ; let proprieta = proprieta . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: proprieta :: NAME)) ? ; let impresa_id = impresa_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: impresa_id :: NAME)) ? ; let opera_id = opera_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: opera_id :: NAME)) ? ; let mezzo_id = mezzo_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: mezzo_id :: NAME)) ? ; let autovettura_id = autovettura_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: autovettura_id :: NAME)) ? ; let matricola = matricola . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: matricola :: NAME)) ? ; let targa = targa . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: settimanale :: targa :: NAME)) ? ; Ok (Data { id , data_settimanale , utente_id , luogo_di_nascita , data_di_nascita , tipo_proprieta , proprieta , impresa_id , opera_id , mezzo_id , autovettura_id , matricola , targa , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "data_settimanale" , "utente_id" , "luogo_di_nascita" , "data_di_nascita" , "tipo_proprieta" , "proprieta" , "impresa_id" , "opera_id" , "mezzo_id" , "autovettura_id" , "matricola" , "targa" , "utente" , "impresa" , "opera" , "autovettura" , "tipo" , "mezzo"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: settimanale :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; utente : $ selection_mode : ident { $ ($ selections : tt) + }) => { utente :: Data } ; (@ field_type ; utente) => { crate :: prisma :: utenti :: Data } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { impresa :: Data } ; (@ field_type ; impresa) => { crate :: prisma :: imprese :: Data } ; (@ field_type ; opera : $ selection_mode : ident { $ ($ selections : tt) + }) => { opera :: Data } ; (@ field_type ; opera) => { crate :: prisma :: opere :: Data } ; (@ field_type ; autovettura : $ selection_mode : ident { $ ($ selections : tt) + }) => { autovettura :: Data } ; (@ field_type ; autovettura) => { crate :: prisma :: autovetture :: Data } ; (@ field_type ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { tipo :: Data } ; (@ field_type ; tipo) => { crate :: prisma :: tipi_proprieta :: Data } ; (@ field_type ; mezzo : $ selection_mode : ident { $ ($ selections : tt) + }) => { Option < mezzo :: Data > } ; (@ field_type ; mezzo) => { Option < crate :: prisma :: mezzi :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Settimanale" , available relations are "utente, impresa, opera, autovettura, tipo, mezzo")) } ; (@ field_module ; utente : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: utenti :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; opera : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: opere :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; autovettura : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: autovetture :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; tipo : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: tipi_proprieta :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; mezzo : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: mezzi :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; utente $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: utente :: Include :: $ selection_mode (crate :: prisma :: utenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; utente $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: utente :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: impresa :: Include :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: impresa :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; opera $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: opera :: Include :: $ selection_mode (crate :: prisma :: opere :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; opera $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: opera :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; autovettura $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: autovettura :: Include :: $ selection_mode (crate :: prisma :: autovetture :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; autovettura $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: autovettura :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: tipo :: Include :: $ selection_mode (crate :: prisma :: tipi_proprieta :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; tipo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: tipo :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; mezzo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: mezzo :: Include :: $ selection_mode (crate :: prisma :: mezzi :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; mezzo $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: settimanale :: IncludeParam > :: into (crate :: prisma :: settimanale :: mezzo :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: settimanale :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; data_settimanale) => { "data_settimanale" } ; (@ field_serde_name ; utente_id) => { "utente_id" } ; (@ field_serde_name ; luogo_di_nascita) => { "luogo_di_nascita" } ; (@ field_serde_name ; data_di_nascita) => { "data_di_nascita" } ; (@ field_serde_name ; tipo_proprieta) => { "tipo_proprieta" } ; (@ field_serde_name ; proprieta) => { "proprieta" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; opera_id) => { "opera_id" } ; (@ field_serde_name ; mezzo_id) => { "mezzo_id" } ; (@ field_serde_name ; autovettura_id) => { "autovettura_id" } ; (@ field_serde_name ; matricola) => { "matricola" } ; (@ field_serde_name ; targa) => { "targa" } ; (@ field_serde_name ; utente) => { "utente" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; opera) => { "opera" } ; (@ field_serde_name ; autovettura) => { "autovettura" } ; (@ field_serde_name ; tipo) => { "tipo" } ; (@ field_serde_name ; mezzo) => { "mezzo" } ; }
    pub use _include_settimanale as include;
    pub enum IncludeParam {
        Id(id::Include),
        DataSettimanale(data_settimanale::Include),
        UtenteId(utente_id::Include),
        LuogoDiNascita(luogo_di_nascita::Include),
        DataDiNascita(data_di_nascita::Include),
        TipoProprieta(tipo_proprieta::Include),
        Proprieta(proprieta::Include),
        ImpresaId(impresa_id::Include),
        OperaId(opera_id::Include),
        MezzoId(mezzo_id::Include),
        AutovetturaId(autovettura_id::Include),
        Matricola(matricola::Include),
        Targa(targa::Include),
        Utente(utente::Include),
        Impresa(impresa::Include),
        Opera(opera::Include),
        Autovettura(autovettura::Include),
        Tipo(tipo::Include),
        Mezzo(mezzo::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::DataSettimanale(data) => data.to_selection(),
                Self::UtenteId(data) => data.to_selection(),
                Self::LuogoDiNascita(data) => data.to_selection(),
                Self::DataDiNascita(data) => data.to_selection(),
                Self::TipoProprieta(data) => data.to_selection(),
                Self::Proprieta(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::OperaId(data) => data.to_selection(),
                Self::MezzoId(data) => data.to_selection(),
                Self::AutovetturaId(data) => data.to_selection(),
                Self::Matricola(data) => data.to_selection(),
                Self::Targa(data) => data.to_selection(),
                Self::Utente(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Opera(data) => data.to_selection(),
                Self::Autovettura(data) => data.to_selection(),
                Self::Tipo(data) => data.to_selection(),
                Self::Mezzo(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_settimanale { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: settimanale struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "data_settimanale")] pub data_settimanale : String , # [serde (rename = "utente_id")] pub utente_id : i32 , # [serde (rename = "luogo_di_nascita")] pub luogo_di_nascita : String , # [serde (rename = "data_di_nascita")] pub data_di_nascita : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > , # [serde (rename = "tipo_proprieta")] pub tipo_proprieta : i32 , # [serde (rename = "proprieta")] pub proprieta : String , # [serde (rename = "impresa_id")] pub impresa_id : i32 , # [serde (rename = "opera_id")] pub opera_id : i32 , # [serde (rename = "mezzo_id")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub mezzo_id : Option < i32 > , # [serde (rename = "autovettura_id")] pub autovettura_id : i32 , # [serde (rename = "matricola")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub matricola : Option < String > , # [serde (rename = "targa")] pub targa : String } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_settimanale as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "data_settimanale")]
        pub data_settimanale: String,
        #[serde(rename = "utente_id")]
        pub utente_id: i32,
        #[serde(rename = "luogo_di_nascita")]
        pub luogo_di_nascita: String,
        #[serde(rename = "data_di_nascita")]
        pub data_di_nascita:
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        #[serde(rename = "tipo_proprieta")]
        pub tipo_proprieta: i32,
        #[serde(rename = "proprieta")]
        pub proprieta: String,
        #[serde(rename = "impresa_id")]
        pub impresa_id: i32,
        #[serde(rename = "opera_id")]
        pub opera_id: i32,
        #[serde(rename = "mezzo_id")]
        pub mezzo_id: Option<i32>,
        #[serde(rename = "autovettura_id")]
        pub autovettura_id: i32,
        #[serde(rename = "matricola")]
        pub matricola: Option<String>,
        #[serde(rename = "targa")]
        pub targa: String,
        #[serde(rename = "utente")]
        pub utente: Option<Box<super::utenti::Data>>,
        #[serde(rename = "impresa")]
        pub impresa: Option<Box<super::imprese::Data>>,
        #[serde(rename = "opera")]
        pub opera: Option<Box<super::opere::Data>>,
        #[serde(rename = "autovettura")]
        pub autovettura: Option<Box<super::autovetture::Data>>,
        #[serde(rename = "tipo")]
        pub tipo: Option<Box<super::tipi_proprieta::Data>>,
        #[serde(
            rename = "mezzo",
            default,
            skip_serializing_if = "Option::is_none",
            with = "prisma_client_rust::serde::double_option"
        )]
        pub mezzo: Option<Option<Box<super::mezzi::Data>>>,
    }
    impl Data {
        pub fn utente(
            &self,
        ) -> Result<&super::utenti::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.utente
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(utente),
                ))
                .map(|v| v.as_ref())
        }
        pub fn impresa(
            &self,
        ) -> Result<&super::imprese::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.impresa
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(impresa),
                ))
                .map(|v| v.as_ref())
        }
        pub fn opera(
            &self,
        ) -> Result<&super::opere::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.opera
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(opera),
                ))
                .map(|v| v.as_ref())
        }
        pub fn autovettura(
            &self,
        ) -> Result<&super::autovetture::Data, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.autovettura
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(autovettura),
                ))
                .map(|v| v.as_ref())
        }
        pub fn tipo(
            &self,
        ) -> Result<&super::tipi_proprieta::Data, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.tipo
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(tipo),
                ))
                .map(|v| v.as_ref())
        }
        pub fn mezzo(
            &self,
        ) -> Result<Option<&super::mezzi::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.mezzo
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(mezzo),
                ))
                .map(|v| v.as_ref().map(|v| v.as_ref()))
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Utente(super::utenti::UniqueArgs),
        Impresa(super::imprese::UniqueArgs),
        Opera(super::opere::UniqueArgs),
        Autovettura(super::autovetture::UniqueArgs),
        Tipo(super::tipi_proprieta::UniqueArgs),
        Mezzo(super::mezzi::UniqueArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Utente(args) => {
                    let mut selections = < super :: utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(utente::NAME, None, [], selections)
                }
                Self::Impresa(args) => {
                    let mut selections = < super :: imprese :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(impresa::NAME, None, [], selections)
                }
                Self::Opera(args) => {
                    let mut selections = < super :: opere :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(opera::NAME, None, [], selections)
                }
                Self::Autovettura(args) => {
                    let mut selections = < super :: autovetture :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(autovettura::NAME, None, [], selections)
                }
                Self::Tipo(args) => {
                    let mut selections = < super :: tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(tipo::NAME, None, [], selections)
                }
                Self::Mezzo(args) => {
                    let mut selections = < super :: mezzi :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(mezzo::NAME, None, [], selections)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetDataSettimanale(String),
        SetUtenteId(i32),
        IncrementUtenteId(i32),
        DecrementUtenteId(i32),
        MultiplyUtenteId(i32),
        DivideUtenteId(i32),
        SetLuogoDiNascita(String),
        SetDataDiNascita(
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        ),
        SetTipoProprieta(i32),
        IncrementTipoProprieta(i32),
        DecrementTipoProprieta(i32),
        MultiplyTipoProprieta(i32),
        DivideTipoProprieta(i32),
        SetProprieta(String),
        SetImpresaId(i32),
        IncrementImpresaId(i32),
        DecrementImpresaId(i32),
        MultiplyImpresaId(i32),
        DivideImpresaId(i32),
        SetOperaId(i32),
        IncrementOperaId(i32),
        DecrementOperaId(i32),
        MultiplyOperaId(i32),
        DivideOperaId(i32),
        SetMezzoId(Option<i32>),
        IncrementMezzoId(i32),
        DecrementMezzoId(i32),
        MultiplyMezzoId(i32),
        DivideMezzoId(i32),
        SetAutovetturaId(i32),
        IncrementAutovetturaId(i32),
        DecrementAutovetturaId(i32),
        MultiplyAutovetturaId(i32),
        DivideAutovetturaId(i32),
        SetMatricola(Option<String>),
        SetTarga(String),
        ConnectUtente(super::utenti::UniqueWhereParam),
        ConnectImpresa(super::imprese::UniqueWhereParam),
        ConnectOpera(super::opere::UniqueWhereParam),
        ConnectAutovettura(super::autovetture::UniqueWhereParam),
        ConnectTipo(super::tipi_proprieta::UniqueWhereParam),
        ConnectMezzo(super::mezzi::UniqueWhereParam),
        DisconnectMezzo,
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDataSettimanale(value) => (
                    data_settimanale::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetUtenteId(value) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementUtenteId(value) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementUtenteId(value) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyUtenteId(value) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideUtenteId(value) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetLuogoDiNascita(value) => (
                    luogo_di_nascita::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetDataDiNascita(value) => (
                    data_di_nascita::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::DateTime(value),
                ),
                SetParam::SetTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideTipoProprieta(value) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetProprieta(value) => (
                    proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetOperaId(value) => (
                    opera_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementOperaId(value) => (
                    opera_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementOperaId(value) => (
                    opera_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyOperaId(value) => (
                    opera_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideOperaId(value) => (
                    opera_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetMezzoId(value) => (
                    mezzo_id::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::IncrementMezzoId(value) => (
                    mezzo_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementMezzoId(value) => (
                    mezzo_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyMezzoId(value) => (
                    mezzo_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideMezzoId(value) => (
                    mezzo_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetAutovetturaId(value) => (
                    autovettura_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementAutovetturaId(value) => (
                    autovettura_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementAutovetturaId(value) => (
                    autovettura_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyAutovetturaId(value) => (
                    autovettura_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideAutovetturaId(value) => (
                    autovettura_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetMatricola(value) => (
                    matricola::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetTarga(value) => (
                    targa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::ConnectUtente(where_param) => (
                    utente::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectImpresa(where_param) => (
                    impresa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::imprese::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectOpera(where_param) => (
                    opera::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::opere::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectAutovettura(where_param) => (
                    autovettura::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::autovetture::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectTipo(where_param) => (
                    tipo::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::tipi_proprieta::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectMezzo(where_param) => (
                    mezzo::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::mezzi::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectMezzo => (
                    mezzo::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::Boolean(true),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        DataSettimanale(String),
        UtenteId(i32),
        LuogoDiNascita(String),
        DataDiNascita(
            ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
        ),
        TipoProprieta(i32),
        Proprieta(String),
        ImpresaId(i32),
        OperaId(i32),
        MezzoId(Option<i32>),
        AutovetturaId(i32),
        Matricola(Option<String>),
        Targa(String),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::DataSettimanale(value) => Self::SetDataSettimanale(value),
                UncheckedSetParam::UtenteId(value) => Self::SetUtenteId(value),
                UncheckedSetParam::LuogoDiNascita(value) => Self::SetLuogoDiNascita(value),
                UncheckedSetParam::DataDiNascita(value) => Self::SetDataDiNascita(value),
                UncheckedSetParam::TipoProprieta(value) => Self::SetTipoProprieta(value),
                UncheckedSetParam::Proprieta(value) => Self::SetProprieta(value),
                UncheckedSetParam::ImpresaId(value) => Self::SetImpresaId(value),
                UncheckedSetParam::OperaId(value) => Self::SetOperaId(value),
                UncheckedSetParam::MezzoId(value) => Self::SetMezzoId(value),
                UncheckedSetParam::AutovetturaId(value) => Self::SetAutovetturaId(value),
                UncheckedSetParam::Matricola(value) => Self::SetMatricola(value),
                UncheckedSetParam::Targa(value) => Self::SetTarga(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        DataSettimanale(::prisma_client_rust::Direction),
        UtenteId(::prisma_client_rust::Direction),
        LuogoDiNascita(::prisma_client_rust::Direction),
        DataDiNascita(::prisma_client_rust::Direction),
        TipoProprieta(::prisma_client_rust::Direction),
        Proprieta(::prisma_client_rust::Direction),
        ImpresaId(::prisma_client_rust::Direction),
        OperaId(::prisma_client_rust::Direction),
        MezzoId(::prisma_client_rust::Direction),
        AutovetturaId(::prisma_client_rust::Direction),
        Matricola(::prisma_client_rust::Direction),
        Targa(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::DataSettimanale(direction) => (
                    data_settimanale::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::UtenteId(direction) => (
                    utente_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::LuogoDiNascita(direction) => (
                    luogo_di_nascita::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::DataDiNascita(direction) => (
                    data_di_nascita::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::TipoProprieta(direction) => (
                    tipo_proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Proprieta(direction) => (
                    proprieta::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ImpresaId(direction) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::OperaId(direction) => (
                    opera_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::MezzoId(direction) => (
                    mezzo_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::AutovetturaId(direction) => (
                    autovettura_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Matricola(direction) => (
                    matricola::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Targa(direction) => (
                    targa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        DataSettimanale(_prisma::read_filters::StringFilter),
        UtenteId(_prisma::read_filters::IntFilter),
        LuogoDiNascita(_prisma::read_filters::StringFilter),
        DataDiNascita(_prisma::read_filters::DateTimeFilter),
        TipoProprieta(_prisma::read_filters::IntFilter),
        Proprieta(_prisma::read_filters::StringFilter),
        ImpresaId(_prisma::read_filters::IntFilter),
        OperaId(_prisma::read_filters::IntFilter),
        MezzoId(_prisma::read_filters::IntNullableFilter),
        AutovetturaId(_prisma::read_filters::IntFilter),
        Matricola(_prisma::read_filters::StringNullableFilter),
        Targa(_prisma::read_filters::StringFilter),
        UtenteIs(Vec<super::utenti::WhereParam>),
        UtenteIsNot(Vec<super::utenti::WhereParam>),
        ImpresaIs(Vec<super::imprese::WhereParam>),
        ImpresaIsNot(Vec<super::imprese::WhereParam>),
        OperaIs(Vec<super::opere::WhereParam>),
        OperaIsNot(Vec<super::opere::WhereParam>),
        AutovetturaIs(Vec<super::autovetture::WhereParam>),
        AutovetturaIsNot(Vec<super::autovetture::WhereParam>),
        TipoIs(Vec<super::tipi_proprieta::WhereParam>),
        TipoIsNot(Vec<super::tipi_proprieta::WhereParam>),
        MezzoIsNull,
        MezzoIs(Vec<super::mezzi::WhereParam>),
        MezzoIsNot(Vec<super::mezzi::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::DataSettimanale(value) => (data_settimanale::NAME, value.into()),
                Self::UtenteId(value) => (utente_id::NAME, value.into()),
                Self::LuogoDiNascita(value) => (luogo_di_nascita::NAME, value.into()),
                Self::DataDiNascita(value) => (data_di_nascita::NAME, value.into()),
                Self::TipoProprieta(value) => (tipo_proprieta::NAME, value.into()),
                Self::Proprieta(value) => (proprieta::NAME, value.into()),
                Self::ImpresaId(value) => (impresa_id::NAME, value.into()),
                Self::OperaId(value) => (opera_id::NAME, value.into()),
                Self::MezzoId(value) => (mezzo_id::NAME, value.into()),
                Self::AutovetturaId(value) => (autovettura_id::NAME, value.into()),
                Self::Matricola(value) => (matricola::NAME, value.into()),
                Self::Targa(value) => (targa::NAME, value.into()),
                Self::UtenteIs(where_params) => (
                    utente::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::UtenteIsNot(where_params) => (
                    utente::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpresaIs(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpresaIsNot(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::OperaIs(where_params) => (
                    opera::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::OperaIsNot(where_params) => (
                    opera::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::AutovetturaIs(where_params) => (
                    autovettura::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::AutovetturaIsNot(where_params) => (
                    autovettura::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::TipoIs(where_params) => (
                    tipo::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::TipoIsNot(where_params) => (
                    tipo::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::MezzoIsNull => (
                    mezzo::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Value(
                        ::prisma_client_rust::PrismaValue::Null,
                    ),
                ),
                Self::MezzoIs(where_params) => (
                    mezzo::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::MezzoIsNot(where_params) => (
                    mezzo::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(data_settimanale::NAME),
                ::prisma_client_rust::sel(utente_id::NAME),
                ::prisma_client_rust::sel(luogo_di_nascita::NAME),
                ::prisma_client_rust::sel(data_di_nascita::NAME),
                ::prisma_client_rust::sel(tipo_proprieta::NAME),
                ::prisma_client_rust::sel(proprieta::NAME),
                ::prisma_client_rust::sel(impresa_id::NAME),
                ::prisma_client_rust::sel(opera_id::NAME),
                ::prisma_client_rust::sel(mezzo_id::NAME),
                ::prisma_client_rust::sel(autovettura_id::NAME),
                ::prisma_client_rust::sel(matricola::NAME),
                ::prisma_client_rust::sel(targa::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            data_settimanale: String,
            luogo_di_nascita: String,
            data_di_nascita: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
            proprieta: String,
            targa: String,
            utente: super::utenti::UniqueWhereParam,
            impresa: super::imprese::UniqueWhereParam,
            opera: super::opere::UniqueWhereParam,
            autovettura: super::autovetture::UniqueWhereParam,
            tipo: super::tipi_proprieta::UniqueWhereParam,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                data_settimanale::set(data_settimanale),
                luogo_di_nascita::set(luogo_di_nascita),
                data_di_nascita::set(data_di_nascita),
                proprieta::set(proprieta),
                targa::set(targa),
                utente::connect(utente),
                impresa::connect(impresa),
                opera::connect(opera),
                autovettura::connect(autovettura),
                tipo::connect(tipo),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            data_settimanale: String,
            utente_id: i32,
            luogo_di_nascita: String,
            data_di_nascita: ::prisma_client_rust::chrono::DateTime<
                ::prisma_client_rust::chrono::FixedOffset,
            >,
            tipo_proprieta: i32,
            proprieta: String,
            impresa_id: i32,
            opera_id: i32,
            autovettura_id: i32,
            targa: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                data_settimanale::set(data_settimanale),
                utente_id::set(utente_id),
                luogo_di_nascita::set(luogo_di_nascita),
                data_di_nascita::set(data_di_nascita),
                tipo_proprieta::set(tipo_proprieta),
                proprieta::set(proprieta),
                impresa_id::set(impresa_id),
                opera_id::set(opera_id),
                autovettura_id::set(autovettura_id),
                targa::set(targa),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(
            self,
            data: Vec<(
                String,
                i32,
                String,
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
                i32,
                String,
                i32,
                i32,
                i32,
                String,
                Vec<SetParam>,
            )>,
        ) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(
                    |(
                        data_settimanale,
                        utente_id,
                        luogo_di_nascita,
                        data_di_nascita,
                        tipo_proprieta,
                        proprieta,
                        impresa_id,
                        opera_id,
                        autovettura_id,
                        targa,
                        mut _params,
                    )| {
                        _params.extend([
                            data_settimanale::set(data_settimanale),
                            utente_id::set(utente_id),
                            luogo_di_nascita::set(luogo_di_nascita),
                            data_di_nascita::set(data_di_nascita),
                            tipo_proprieta::set(tipo_proprieta),
                            proprieta::set(proprieta),
                            impresa_id::set(impresa_id),
                            opera_id::set(opera_id),
                            autovettura_id::set(autovettura_id),
                            targa::set(targa),
                        ]);
                        _params
                    },
                )
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (
                data_settimanale,
                luogo_di_nascita,
                data_di_nascita,
                proprieta,
                targa,
                utente,
                impresa,
                opera,
                autovettura,
                tipo,
                mut _params,
            ): (
                String,
                String,
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
                String,
                String,
                super::utenti::UniqueWhereParam,
                super::imprese::UniqueWhereParam,
                super::opere::UniqueWhereParam,
                super::autovetture::UniqueWhereParam,
                super::tipi_proprieta::UniqueWhereParam,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                data_settimanale::set(data_settimanale),
                luogo_di_nascita::set(luogo_di_nascita),
                data_di_nascita::set(data_di_nascita),
                proprieta::set(proprieta),
                targa::set(targa),
                utente::connect(utente),
                impresa::connect(impresa),
                opera::connect(opera),
                autovettura::connect(autovettura),
                tipo::connect(tipo),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod tipi_proprieta {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "TipiProprieta";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod descrizione {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "descrizione";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDescrizione(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Descrizione(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Descrizione(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Descrizione(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Descrizione,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Descrizione(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Descrizione(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod autovetture {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "autovetture";
        pub struct Fetch(pub autovetture::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<autovetture::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: autovetture::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: autovetture::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Autovetture(v)
            }
        }
        pub fn fetch(params: Vec<autovetture::WhereParam>) -> Fetch {
            Fetch(autovetture::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<autovetture::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectAutovetture(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<autovetture::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<autovetture::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectAutovetture(params)
        }
        pub fn set(params: Vec<autovetture::UniqueWhereParam>) -> SetParam {
            SetParam::SetAutovetture(params)
        }
        pub fn some(value: Vec<autovetture::WhereParam>) -> WhereParam {
            WhereParam::AutovettureSome(value)
        }
        pub fn every(value: Vec<autovetture::WhereParam>) -> WhereParam {
            WhereParam::AutovettureEvery(value)
        }
        pub fn none(value: Vec<autovetture::WhereParam>) -> WhereParam {
            WhereParam::AutovettureNone(value)
        }
        pub enum Include {
            Select(autovetture::ManyArgs, Vec<autovetture::SelectParam>),
            Include(autovetture::ManyArgs, Vec<autovetture::IncludeParam>),
            Fetch(autovetture::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Autovetture(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < autovetture :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <autovetture::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: autovetture::ManyArgs,
                nested_selections: Vec<autovetture::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: autovetture::ManyArgs,
                nested_selections: Vec<autovetture::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(autovetture::ManyArgs, Vec<autovetture::SelectParam>),
            Include(autovetture::ManyArgs, Vec<autovetture::IncludeParam>),
            Fetch(autovetture::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Autovetture(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <autovetture::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: autovetture::ManyArgs,
                nested_selections: Vec<autovetture::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: autovetture::ManyArgs,
                nested_selections: Vec<autovetture::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod mezzi {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "mezzi";
        pub struct Fetch(pub mezzi::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<mezzi::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: mezzi::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: mezzi::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Mezzi(v)
            }
        }
        pub fn fetch(params: Vec<mezzi::WhereParam>) -> Fetch {
            Fetch(mezzi::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<mezzi::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectMezzi(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<mezzi::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<mezzi::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectMezzi(params)
        }
        pub fn set(params: Vec<mezzi::UniqueWhereParam>) -> SetParam {
            SetParam::SetMezzi(params)
        }
        pub fn some(value: Vec<mezzi::WhereParam>) -> WhereParam {
            WhereParam::MezziSome(value)
        }
        pub fn every(value: Vec<mezzi::WhereParam>) -> WhereParam {
            WhereParam::MezziEvery(value)
        }
        pub fn none(value: Vec<mezzi::WhereParam>) -> WhereParam {
            WhereParam::MezziNone(value)
        }
        pub enum Include {
            Select(mezzi::ManyArgs, Vec<mezzi::SelectParam>),
            Include(mezzi::ManyArgs, Vec<mezzi::IncludeParam>),
            Fetch(mezzi::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Mezzi(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections =
                            <mezzi::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <mezzi::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: mezzi::ManyArgs,
                nested_selections: Vec<mezzi::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: mezzi::ManyArgs,
                nested_selections: Vec<mezzi::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(mezzi::ManyArgs, Vec<mezzi::SelectParam>),
            Include(mezzi::ManyArgs, Vec<mezzi::IncludeParam>),
            Fetch(mezzi::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Mezzi(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <mezzi::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: mezzi::ManyArgs,
                nested_selections: Vec<mezzi::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: mezzi::ManyArgs,
                nested_selections: Vec<mezzi::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod settimanali {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "settimanali";
        pub struct Fetch(pub settimanale::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<settimanale::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: settimanale::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: settimanale::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Settimanali(v)
            }
        }
        pub fn fetch(params: Vec<settimanale::WhereParam>) -> Fetch {
            Fetch(settimanale::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<settimanale::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectSettimanali(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<settimanale::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectSettimanali(params)
        }
        pub fn set(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::SetSettimanali(params)
        }
        pub fn some(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliSome(value)
        }
        pub fn every(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliEvery(value)
        }
        pub fn none(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliNone(value)
        }
        pub enum Include {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Settimanali(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Settimanali(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub fn create(descrizione: String, _params: Vec<SetParam>) -> (String, Vec<SetParam>) {
        (descrizione, _params)
    }
    pub fn create_unchecked(
        descrizione: String,
        _params: Vec<SetParam>,
    ) -> (String, Vec<SetParam>) {
        (descrizione, _params)
    }
    #[macro_export]
    macro_rules ! _select_tipi_proprieta { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: tipi_proprieta :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: tipi_proprieta :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: tipi_proprieta :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: tipi_proprieta :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: tipi_proprieta :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: tipi_proprieta :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , descrizione , autovetture , mezzi , settimanali } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: tipi_proprieta :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: tipi_proprieta :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: tipi_proprieta :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: tipi_proprieta :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: tipi_proprieta :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: tipi_proprieta :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "autovetture" , "mezzi" , "settimanali"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: tipi_proprieta :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; descrizione) => { String } ; (@ field_type ; autovetture : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < autovetture :: Data > } ; (@ field_type ; autovetture) => { Vec < crate :: prisma :: autovetture :: Data > } ; (@ field_type ; mezzi : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < mezzi :: Data > } ; (@ field_type ; mezzi) => { Vec < crate :: prisma :: mezzi :: Data > } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "TipiProprieta" , available relations are "id, descrizione, autovetture, mezzi, settimanali")) } ; (@ field_module ; autovetture : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: autovetture :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; mezzi : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: mezzi :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: tipi_proprieta :: SelectParam > :: into (crate :: prisma :: tipi_proprieta :: id :: Select) } ; (@ selection_field_to_selection_param ; descrizione) => { Into :: < crate :: prisma :: tipi_proprieta :: SelectParam > :: into (crate :: prisma :: tipi_proprieta :: descrizione :: Select) } ; (@ selection_field_to_selection_param ; autovetture $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: tipi_proprieta :: SelectParam > :: into (crate :: prisma :: tipi_proprieta :: autovetture :: Select :: $ selection_mode (crate :: prisma :: autovetture :: ManyArgs :: new (crate :: prisma :: autovetture :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: autovetture :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; autovetture $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: tipi_proprieta :: SelectParam > :: into (crate :: prisma :: tipi_proprieta :: autovetture :: Select :: Fetch (crate :: prisma :: autovetture :: ManyArgs :: new (crate :: prisma :: autovetture :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; mezzi $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: tipi_proprieta :: SelectParam > :: into (crate :: prisma :: tipi_proprieta :: mezzi :: Select :: $ selection_mode (crate :: prisma :: mezzi :: ManyArgs :: new (crate :: prisma :: mezzi :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: mezzi :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; mezzi $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: tipi_proprieta :: SelectParam > :: into (crate :: prisma :: tipi_proprieta :: mezzi :: Select :: Fetch (crate :: prisma :: mezzi :: ManyArgs :: new (crate :: prisma :: mezzi :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: tipi_proprieta :: SelectParam > :: into (crate :: prisma :: tipi_proprieta :: settimanali :: Select :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: tipi_proprieta :: SelectParam > :: into (crate :: prisma :: tipi_proprieta :: settimanali :: Select :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: tipi_proprieta :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; autovetture) => { "autovetture" } ; (@ field_serde_name ; mezzi) => { "mezzi" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; }
    pub use _select_tipi_proprieta as select;
    pub enum SelectParam {
        Id(id::Select),
        Descrizione(descrizione::Select),
        Autovetture(autovetture::Select),
        Mezzi(mezzi::Select),
        Settimanali(settimanali::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Autovetture(data) => data.to_selection(),
                Self::Mezzi(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_tipi_proprieta { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: tipi_proprieta :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: tipi_proprieta :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: tipi_proprieta :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: tipi_proprieta :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: tipi_proprieta :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: tipi_proprieta :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: tipi_proprieta :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { autovetture , mezzi , settimanali } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub descrizione : String , $ (pub $ field : crate :: prisma :: tipi_proprieta :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (descrizione)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: tipi_proprieta :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: tipi_proprieta :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: tipi_proprieta :: descrizione :: NAME , & self . descrizione) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , descrizione } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: tipi_proprieta :: $ field :: NAME) , + , crate :: prisma :: tipi_proprieta :: id :: NAME , crate :: prisma :: tipi_proprieta :: descrizione :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: tipi_proprieta :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: tipi_proprieta :: id :: NAME => Ok (Field :: id) , crate :: prisma :: tipi_proprieta :: descrizione :: NAME => Ok (Field :: descrizione) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut descrizione = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: tipi_proprieta :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: descrizione => { if descrizione . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: tipi_proprieta :: descrizione :: NAME)) ; } descrizione = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: tipi_proprieta :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: tipi_proprieta :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: tipi_proprieta :: id :: NAME)) ? ; let descrizione = descrizione . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: tipi_proprieta :: descrizione :: NAME)) ? ; Ok (Data { id , descrizione , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "descrizione" , "autovetture" , "mezzi" , "settimanali"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: tipi_proprieta :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; autovetture : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < autovetture :: Data > } ; (@ field_type ; autovetture) => { Vec < crate :: prisma :: autovetture :: Data > } ; (@ field_type ; mezzi : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < mezzi :: Data > } ; (@ field_type ; mezzi) => { Vec < crate :: prisma :: mezzi :: Data > } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "TipiProprieta" , available relations are "autovetture, mezzi, settimanali")) } ; (@ field_module ; autovetture : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: autovetture :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; mezzi : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: mezzi :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; autovetture $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: tipi_proprieta :: IncludeParam > :: into (crate :: prisma :: tipi_proprieta :: autovetture :: Include :: $ selection_mode (crate :: prisma :: autovetture :: ManyArgs :: new (crate :: prisma :: autovetture :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: autovetture :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; autovetture $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: tipi_proprieta :: IncludeParam > :: into (crate :: prisma :: tipi_proprieta :: autovetture :: Include :: Fetch (crate :: prisma :: autovetture :: ManyArgs :: new (crate :: prisma :: autovetture :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; mezzi $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: tipi_proprieta :: IncludeParam > :: into (crate :: prisma :: tipi_proprieta :: mezzi :: Include :: $ selection_mode (crate :: prisma :: mezzi :: ManyArgs :: new (crate :: prisma :: mezzi :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: mezzi :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; mezzi $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: tipi_proprieta :: IncludeParam > :: into (crate :: prisma :: tipi_proprieta :: mezzi :: Include :: Fetch (crate :: prisma :: mezzi :: ManyArgs :: new (crate :: prisma :: mezzi :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: tipi_proprieta :: IncludeParam > :: into (crate :: prisma :: tipi_proprieta :: settimanali :: Include :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: tipi_proprieta :: IncludeParam > :: into (crate :: prisma :: tipi_proprieta :: settimanali :: Include :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: tipi_proprieta :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; descrizione) => { "descrizione" } ; (@ field_serde_name ; autovetture) => { "autovetture" } ; (@ field_serde_name ; mezzi) => { "mezzi" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; }
    pub use _include_tipi_proprieta as include;
    pub enum IncludeParam {
        Id(id::Include),
        Descrizione(descrizione::Include),
        Autovetture(autovetture::Include),
        Mezzi(mezzi::Include),
        Settimanali(settimanali::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Descrizione(data) => data.to_selection(),
                Self::Autovetture(data) => data.to_selection(),
                Self::Mezzi(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_tipi_proprieta { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: tipi_proprieta struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "descrizione")] pub descrizione : String } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_tipi_proprieta as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "descrizione")]
        pub descrizione: String,
        #[serde(rename = "autovetture")]
        pub autovetture: Option<Vec<super::autovetture::Data>>,
        #[serde(rename = "mezzi")]
        pub mezzi: Option<Vec<super::mezzi::Data>>,
        #[serde(rename = "settimanali")]
        pub settimanali: Option<Vec<super::settimanale::Data>>,
    }
    impl Data {
        pub fn autovetture(
            &self,
        ) -> Result<&Vec<super::autovetture::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.autovetture
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(autovetture),
                ))
        }
        pub fn mezzi(
            &self,
        ) -> Result<&Vec<super::mezzi::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.mezzi
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(mezzi),
                ))
        }
        pub fn settimanali(
            &self,
        ) -> Result<&Vec<super::settimanale::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.settimanali
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(settimanali),
                ))
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Autovetture(super::autovetture::ManyArgs),
        Mezzi(super::mezzi::ManyArgs),
        Settimanali(super::settimanale::ManyArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Autovetture(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: autovetture :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        autovetture::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
                Self::Mezzi(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: mezzi :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        mezzi::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
                Self::Settimanali(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        settimanali::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetDescrizione(String),
        ConnectAutovetture(Vec<super::autovetture::UniqueWhereParam>),
        DisconnectAutovetture(Vec<super::autovetture::UniqueWhereParam>),
        SetAutovetture(Vec<super::autovetture::UniqueWhereParam>),
        ConnectMezzi(Vec<super::mezzi::UniqueWhereParam>),
        DisconnectMezzi(Vec<super::mezzi::UniqueWhereParam>),
        SetMezzi(Vec<super::mezzi::UniqueWhereParam>),
        ConnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        DisconnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        SetSettimanali(Vec<super::settimanale::UniqueWhereParam>),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDescrizione(value) => (
                    descrizione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::ConnectAutovetture(where_params) => (
                    autovetture::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::autovetture::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectAutovetture(where_params) => (
                    autovetture::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::autovetture::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetAutovetture(where_params) => (
                    autovetture::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::autovetture::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectMezzi(where_params) => (
                    mezzi::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::mezzi::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectMezzi(where_params) => (
                    mezzi::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::mezzi::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetMezzi(where_params) => (
                    mezzi::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::mezzi::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        Descrizione(String),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Descrizione(value) => Self::SetDescrizione(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Descrizione(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Descrizione(direction) => (
                    descrizione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        Descrizione(_prisma::read_filters::StringFilter),
        AutovettureSome(Vec<super::autovetture::WhereParam>),
        AutovettureEvery(Vec<super::autovetture::WhereParam>),
        AutovettureNone(Vec<super::autovetture::WhereParam>),
        MezziSome(Vec<super::mezzi::WhereParam>),
        MezziEvery(Vec<super::mezzi::WhereParam>),
        MezziNone(Vec<super::mezzi::WhereParam>),
        SettimanaliSome(Vec<super::settimanale::WhereParam>),
        SettimanaliEvery(Vec<super::settimanale::WhereParam>),
        SettimanaliNone(Vec<super::settimanale::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Descrizione(value) => (descrizione::NAME, value.into()),
                Self::AutovettureSome(where_params) => (
                    autovetture::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::AutovettureEvery(where_params) => (
                    autovetture::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::AutovettureNone(where_params) => (
                    autovetture::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::MezziSome(where_params) => (
                    mezzi::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::MezziEvery(where_params) => (
                    mezzi::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::MezziNone(where_params) => (
                    mezzi::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliSome(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliEvery(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliNone(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(descrizione::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(self, descrizione: String, mut _params: Vec<SetParam>) -> Create<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            descrizione: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(String, Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(descrizione, mut _params)| {
                    _params.extend([descrizione::set(descrizione)]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (descrizione, mut _params): (String, Vec<SetParam>),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([descrizione::set(descrizione)]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod utenti {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Utenti";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod username {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "username";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetUsername(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Username(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Username(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::UsernameEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Username,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Username(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Username(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod password {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "password";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetPassword(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Password(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Password(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Password(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Password,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Password(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Password(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod nome {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "nome";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetNome(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Nome(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Nome(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::Nome(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            Nome,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Nome(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Nome(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod cognome {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "cognome";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetCognome(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Cognome(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Cognome(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::Cognome(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            Cognome,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Cognome(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Cognome(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa_id";
        pub struct Set(pub Option<i32>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetImpresaId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ImpresaId(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<i32>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ImpresaId(direction)
        }
        pub fn equals(value: Option<i32>) -> WhereParam {
            WhereParam::ImpresaId(_prisma::read_filters::IntNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntNullableFilter,
            ImpresaId,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: Option<i32>) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementImpresaId(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementImpresaId(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyImpresaId(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideImpresaId(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpresaId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpresaId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod utente {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "utente";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetUtente(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Utente(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Utente(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::Utente(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            Utente,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn mode(_: super::super::QueryMode) -> Mode;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Utente(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Utente(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod autorizzazione {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "autorizzazione";
        pub struct Set(pub Option<bool>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetAutorizzazione(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Autorizzazione(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<bool>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Autorizzazione(direction)
        }
        pub fn equals(value: Option<bool>) -> WhereParam {
            WhereParam::Autorizzazione(_prisma::read_filters::BoolNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolNullableFilter,
            Autorizzazione,
            {
                fn not(_: Option<bool>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Autorizzazione(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Autorizzazione(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod primo_login {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "primo_login";
        pub struct Set(pub Option<bool>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetPrimoLogin(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::PrimoLogin(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<bool>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::PrimoLogin(direction)
        }
        pub fn equals(value: Option<bool>) -> WhereParam {
            WhereParam::PrimoLogin(_prisma::read_filters::BoolNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolNullableFilter,
            PrimoLogin,
            {
                fn not(_: Option<bool>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::PrimoLogin(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::PrimoLogin(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod super_utente {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "super_utente";
        pub struct Set(pub Option<bool>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetSuperUtente(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::SuperUtente(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<bool>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::SuperUtente(direction)
        }
        pub fn equals(value: Option<bool>) -> WhereParam {
            WhereParam::SuperUtente(_prisma::read_filters::BoolNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::BoolNullableFilter,
            SuperUtente,
            {
                fn not(_: Option<bool>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::SuperUtente(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::SuperUtente(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod impresa {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "impresa";
        pub struct Fetch(pub imprese::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Impresa(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(imprese::UniqueArgs::new())
        }
        pub struct Connect(imprese::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpresa(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: imprese::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn disconnect() -> SetParam {
            SetParam::DisconnectImpresa
        }
        pub fn is_null() -> WhereParam {
            WhereParam::ImpresaIsNull
        }
        pub fn is(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIs(value)
        }
        pub fn is_not(value: Vec<imprese::WhereParam>) -> WhereParam {
            WhereParam::ImpresaIsNot(value)
        }
        pub enum Include {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Impresa(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections =
                            <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                            );
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<imprese::SelectParam>),
            Include(Vec<imprese::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Impresa(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => {
                        selections.into_iter().map(|s| s.to_selection()).collect()
                    }
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => {
                        <imprese::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()
                    }
                };
                ::prisma_client_rust::Selection::new("impresa", None, [], selections)
            }
            pub fn select(nested_selections: Vec<imprese::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<imprese::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub mod settimanali {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "settimanali";
        pub struct Fetch(pub settimanale::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<settimanale::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: settimanale::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: settimanale::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Settimanali(v)
            }
        }
        pub fn fetch(params: Vec<settimanale::WhereParam>) -> Fetch {
            Fetch(settimanale::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<settimanale::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectSettimanali(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<settimanale::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectSettimanali(params)
        }
        pub fn set(params: Vec<settimanale::UniqueWhereParam>) -> SetParam {
            SetParam::SetSettimanali(params)
        }
        pub fn some(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliSome(value)
        }
        pub fn every(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliEvery(value)
        }
        pub fn none(value: Vec<settimanale::WhereParam>) -> WhereParam {
            WhereParam::SettimanaliNone(value)
        }
        pub enum Include {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Settimanali(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = < settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(settimanale::ManyArgs, Vec<settimanale::SelectParam>),
            Include(settimanale::ManyArgs, Vec<settimanale::IncludeParam>),
            Fetch(settimanale::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Settimanali(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (
                        args.to_graphql().0,
                        selections.into_iter().map(|s| s.to_selection()).collect(),
                    ),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (
                        args.to_graphql().0,
                        <settimanale::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
                        ),
                    ),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: settimanale::ManyArgs,
                nested_selections: Vec<settimanale::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod imprese_associate {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "imprese_associate";
        pub struct Fetch(pub imprese_associate_utenti::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<imprese_associate_utenti::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: imprese_associate_utenti::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: imprese_associate_utenti::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::ImpreseAssociate(v)
            }
        }
        pub fn fetch(params: Vec<imprese_associate_utenti::WhereParam>) -> Fetch {
            Fetch(imprese_associate_utenti::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<imprese_associate_utenti::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectImpreseAssociate(v)
            }
        }
        pub fn connect<T: From<Connect>>(
            params: Vec<imprese_associate_utenti::UniqueWhereParam>,
        ) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<imprese_associate_utenti::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectImpreseAssociate(params)
        }
        pub fn set(params: Vec<imprese_associate_utenti::UniqueWhereParam>) -> SetParam {
            SetParam::SetImpreseAssociate(params)
        }
        pub fn some(value: Vec<imprese_associate_utenti::WhereParam>) -> WhereParam {
            WhereParam::ImpreseAssociateSome(value)
        }
        pub fn every(value: Vec<imprese_associate_utenti::WhereParam>) -> WhereParam {
            WhereParam::ImpreseAssociateEvery(value)
        }
        pub fn none(value: Vec<imprese_associate_utenti::WhereParam>) -> WhereParam {
            WhereParam::ImpreseAssociateNone(value)
        }
        pub enum Include {
            Select(
                imprese_associate_utenti::ManyArgs,
                Vec<imprese_associate_utenti::SelectParam>,
            ),
            Include(
                imprese_associate_utenti::ManyArgs,
                Vec<imprese_associate_utenti::IncludeParam>,
            ),
            Fetch(imprese_associate_utenti::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ImpreseAssociate(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args , selections) = match self { Self :: Select (args , selections) => (args . to_graphql () . 0 , selections . into_iter () . map (| s | s . to_selection ()) . collect ()) , Self :: Include (args , selections) => (args . to_graphql () . 0 , { let mut nested_selections = < imprese_associate_utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections }) , Self :: Fetch (args) => (args . to_graphql () . 0 , < imprese_associate_utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) } ;
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: imprese_associate_utenti::ManyArgs,
                nested_selections: Vec<imprese_associate_utenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: imprese_associate_utenti::ManyArgs,
                nested_selections: Vec<imprese_associate_utenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(
                imprese_associate_utenti::ManyArgs,
                Vec<imprese_associate_utenti::SelectParam>,
            ),
            Include(
                imprese_associate_utenti::ManyArgs,
                Vec<imprese_associate_utenti::IncludeParam>,
            ),
            Fetch(imprese_associate_utenti::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ImpreseAssociate(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args , selections) = match self { Self :: Select (args , selections) => (args . to_graphql () . 0 , selections . into_iter () . map (| s | s . to_selection ()) . collect ()) , Self :: Include (args , selections) => (args . to_graphql () . 0 , { let mut nested_selections = vec ! [] ; nested_selections . extend (selections . into_iter () . map (| s | s . to_selection ())) ; nested_selections }) , Self :: Fetch (args) => (args . to_graphql () . 0 , < imprese_associate_utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) } ;
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(
                args: imprese_associate_utenti::ManyArgs,
                nested_selections: Vec<imprese_associate_utenti::SelectParam>,
            ) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(
                args: imprese_associate_utenti::ManyArgs,
                nested_selections: Vec<imprese_associate_utenti::IncludeParam>,
            ) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub fn create(
        username: String,
        password: String,
        _params: Vec<SetParam>,
    ) -> (String, String, Vec<SetParam>) {
        (username, password, _params)
    }
    pub fn create_unchecked(
        username: String,
        password: String,
        _params: Vec<SetParam>,
    ) -> (String, String, Vec<SetParam>) {
        (username, password, _params)
    }
    #[macro_export]
    macro_rules ! _select_utenti { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: utenti :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: utenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: utenti :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: utenti :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: utenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: utenti :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , username , password , nome , cognome , impresa_id , utente , autorizzazione , primo_login , super_utente , impresa , settimanali , imprese_associate } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: utenti :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: utenti :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: utenti :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: utenti :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "username" , "password" , "nome" , "cognome" , "impresa_id" , "utente" , "autorizzazione" , "primo_login" , "super_utente" , "impresa" , "settimanali" , "imprese_associate"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: utenti :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; username) => { String } ; (@ field_type ; password) => { String } ; (@ field_type ; nome) => { Option < String > } ; (@ field_type ; cognome) => { Option < String > } ; (@ field_type ; impresa_id) => { Option < i32 > } ; (@ field_type ; utente) => { Option < String > } ; (@ field_type ; autorizzazione) => { Option < bool > } ; (@ field_type ; primo_login) => { Option < bool > } ; (@ field_type ; super_utente) => { Option < bool > } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { Option < impresa :: Data > } ; (@ field_type ; impresa) => { Option < crate :: prisma :: imprese :: Data > } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; imprese_associate : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < imprese_associate :: Data > } ; (@ field_type ; imprese_associate) => { Vec < crate :: prisma :: imprese_associate_utenti :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Utenti" , available relations are "id, username, password, nome, cognome, impresa_id, utente, autorizzazione, primo_login, super_utente, impresa, settimanali, imprese_associate")) } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; imprese_associate : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese_associate_utenti :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: id :: Select) } ; (@ selection_field_to_selection_param ; username) => { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: username :: Select) } ; (@ selection_field_to_selection_param ; password) => { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: password :: Select) } ; (@ selection_field_to_selection_param ; nome) => { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: nome :: Select) } ; (@ selection_field_to_selection_param ; cognome) => { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: cognome :: Select) } ; (@ selection_field_to_selection_param ; impresa_id) => { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: impresa_id :: Select) } ; (@ selection_field_to_selection_param ; utente) => { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: utente :: Select) } ; (@ selection_field_to_selection_param ; autorizzazione) => { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: autorizzazione :: Select) } ; (@ selection_field_to_selection_param ; primo_login) => { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: primo_login :: Select) } ; (@ selection_field_to_selection_param ; super_utente) => { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: super_utente :: Select) } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: impresa :: Select :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: impresa :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: settimanali :: Select :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: settimanali :: Select :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; imprese_associate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: imprese_associate :: Select :: $ selection_mode (crate :: prisma :: imprese_associate_utenti :: ManyArgs :: new (crate :: prisma :: imprese_associate_utenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: imprese_associate_utenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; imprese_associate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: utenti :: SelectParam > :: into (crate :: prisma :: utenti :: imprese_associate :: Select :: Fetch (crate :: prisma :: imprese_associate_utenti :: ManyArgs :: new (crate :: prisma :: imprese_associate_utenti :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: utenti :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; username) => { "username" } ; (@ field_serde_name ; password) => { "password" } ; (@ field_serde_name ; nome) => { "nome" } ; (@ field_serde_name ; cognome) => { "cognome" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; utente) => { "utente" } ; (@ field_serde_name ; autorizzazione) => { "autorizzazione" } ; (@ field_serde_name ; primo_login) => { "primo_login" } ; (@ field_serde_name ; super_utente) => { "super_utente" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; (@ field_serde_name ; imprese_associate) => { "imprese_associate" } ; }
    pub use _select_utenti as select;
    pub enum SelectParam {
        Id(id::Select),
        Username(username::Select),
        Password(password::Select),
        Nome(nome::Select),
        Cognome(cognome::Select),
        ImpresaId(impresa_id::Select),
        Utente(utente::Select),
        Autorizzazione(autorizzazione::Select),
        PrimoLogin(primo_login::Select),
        SuperUtente(super_utente::Select),
        Impresa(impresa::Select),
        Settimanali(settimanali::Select),
        ImpreseAssociate(imprese_associate::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Username(data) => data.to_selection(),
                Self::Password(data) => data.to_selection(),
                Self::Nome(data) => data.to_selection(),
                Self::Cognome(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::Utente(data) => data.to_selection(),
                Self::Autorizzazione(data) => data.to_selection(),
                Self::PrimoLogin(data) => data.to_selection(),
                Self::SuperUtente(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
                Self::ImpreseAssociate(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_utenti { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: utenti :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: utenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: utenti :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: utenti :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: utenti :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: utenti :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { impresa , settimanali , imprese_associate } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub username : String , pub password : String , pub nome : Option < String > , pub cognome : Option < String > , pub impresa_id : Option < i32 > , pub utente : Option < String > , pub autorizzazione : Option < bool > , pub primo_login : Option < bool > , pub super_utente : Option < bool > , $ (pub $ field : crate :: prisma :: utenti :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (username) , stringify ! (password) , stringify ! (nome) , stringify ! (cognome) , stringify ! (impresa_id) , stringify ! (utente) , stringify ! (autorizzazione) , stringify ! (primo_login) , stringify ! (super_utente)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: utenti :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: utenti :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: utenti :: username :: NAME , & self . username) ? ; state . serialize_field (crate :: prisma :: utenti :: password :: NAME , & self . password) ? ; state . serialize_field (crate :: prisma :: utenti :: nome :: NAME , & self . nome) ? ; state . serialize_field (crate :: prisma :: utenti :: cognome :: NAME , & self . cognome) ? ; state . serialize_field (crate :: prisma :: utenti :: impresa_id :: NAME , & self . impresa_id) ? ; state . serialize_field (crate :: prisma :: utenti :: utente :: NAME , & self . utente) ? ; state . serialize_field (crate :: prisma :: utenti :: autorizzazione :: NAME , & self . autorizzazione) ? ; state . serialize_field (crate :: prisma :: utenti :: primo_login :: NAME , & self . primo_login) ? ; state . serialize_field (crate :: prisma :: utenti :: super_utente :: NAME , & self . super_utente) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , username , password , nome , cognome , impresa_id , utente , autorizzazione , primo_login , super_utente } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: utenti :: $ field :: NAME) , + , crate :: prisma :: utenti :: id :: NAME , crate :: prisma :: utenti :: username :: NAME , crate :: prisma :: utenti :: password :: NAME , crate :: prisma :: utenti :: nome :: NAME , crate :: prisma :: utenti :: cognome :: NAME , crate :: prisma :: utenti :: impresa_id :: NAME , crate :: prisma :: utenti :: utente :: NAME , crate :: prisma :: utenti :: autorizzazione :: NAME , crate :: prisma :: utenti :: primo_login :: NAME , crate :: prisma :: utenti :: super_utente :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: utenti :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: utenti :: id :: NAME => Ok (Field :: id) , crate :: prisma :: utenti :: username :: NAME => Ok (Field :: username) , crate :: prisma :: utenti :: password :: NAME => Ok (Field :: password) , crate :: prisma :: utenti :: nome :: NAME => Ok (Field :: nome) , crate :: prisma :: utenti :: cognome :: NAME => Ok (Field :: cognome) , crate :: prisma :: utenti :: impresa_id :: NAME => Ok (Field :: impresa_id) , crate :: prisma :: utenti :: utente :: NAME => Ok (Field :: utente) , crate :: prisma :: utenti :: autorizzazione :: NAME => Ok (Field :: autorizzazione) , crate :: prisma :: utenti :: primo_login :: NAME => Ok (Field :: primo_login) , crate :: prisma :: utenti :: super_utente :: NAME => Ok (Field :: super_utente) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut username = None ; let mut password = None ; let mut nome = None ; let mut cognome = None ; let mut impresa_id = None ; let mut utente = None ; let mut autorizzazione = None ; let mut primo_login = None ; let mut super_utente = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: username => { if username . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: username :: NAME)) ; } username = Some (map . next_value () ?) ; } Field :: password => { if password . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: password :: NAME)) ; } password = Some (map . next_value () ?) ; } Field :: nome => { if nome . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: nome :: NAME)) ; } nome = Some (map . next_value () ?) ; } Field :: cognome => { if cognome . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: cognome :: NAME)) ; } cognome = Some (map . next_value () ?) ; } Field :: impresa_id => { if impresa_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: impresa_id :: NAME)) ; } impresa_id = Some (map . next_value () ?) ; } Field :: utente => { if utente . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: utente :: NAME)) ; } utente = Some (map . next_value () ?) ; } Field :: autorizzazione => { if autorizzazione . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: autorizzazione :: NAME)) ; } autorizzazione = Some (map . next_value () ?) ; } Field :: primo_login => { if primo_login . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: primo_login :: NAME)) ; } primo_login = Some (map . next_value () ?) ; } Field :: super_utente => { if super_utente . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: super_utente :: NAME)) ; } super_utente = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: utenti :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: id :: NAME)) ? ; let username = username . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: username :: NAME)) ? ; let password = password . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: password :: NAME)) ? ; let nome = nome . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: nome :: NAME)) ? ; let cognome = cognome . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: cognome :: NAME)) ? ; let impresa_id = impresa_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: impresa_id :: NAME)) ? ; let utente = utente . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: utente :: NAME)) ? ; let autorizzazione = autorizzazione . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: autorizzazione :: NAME)) ? ; let primo_login = primo_login . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: primo_login :: NAME)) ? ; let super_utente = super_utente . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: utenti :: super_utente :: NAME)) ? ; Ok (Data { id , username , password , nome , cognome , impresa_id , utente , autorizzazione , primo_login , super_utente , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "username" , "password" , "nome" , "cognome" , "impresa_id" , "utente" , "autorizzazione" , "primo_login" , "super_utente" , "impresa" , "settimanali" , "imprese_associate"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: utenti :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { Option < impresa :: Data > } ; (@ field_type ; impresa) => { Option < crate :: prisma :: imprese :: Data > } ; (@ field_type ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < settimanali :: Data > } ; (@ field_type ; settimanali) => { Vec < crate :: prisma :: settimanale :: Data > } ; (@ field_type ; imprese_associate : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < imprese_associate :: Data > } ; (@ field_type ; imprese_associate) => { Vec < crate :: prisma :: imprese_associate_utenti :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Utenti" , available relations are "impresa, settimanali, imprese_associate")) } ; (@ field_module ; impresa : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; settimanali : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: settimanale :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; imprese_associate : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: imprese_associate_utenti :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: utenti :: IncludeParam > :: into (crate :: prisma :: utenti :: impresa :: Include :: $ selection_mode (crate :: prisma :: imprese :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; impresa $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: utenti :: IncludeParam > :: into (crate :: prisma :: utenti :: impresa :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: utenti :: IncludeParam > :: into (crate :: prisma :: utenti :: settimanali :: Include :: $ selection_mode (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: settimanale :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; settimanali $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: utenti :: IncludeParam > :: into (crate :: prisma :: utenti :: settimanali :: Include :: Fetch (crate :: prisma :: settimanale :: ManyArgs :: new (crate :: prisma :: settimanale :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; imprese_associate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: utenti :: IncludeParam > :: into (crate :: prisma :: utenti :: imprese_associate :: Include :: $ selection_mode (crate :: prisma :: imprese_associate_utenti :: ManyArgs :: new (crate :: prisma :: imprese_associate_utenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: imprese_associate_utenti :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; imprese_associate $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: utenti :: IncludeParam > :: into (crate :: prisma :: utenti :: imprese_associate :: Include :: Fetch (crate :: prisma :: imprese_associate_utenti :: ManyArgs :: new (crate :: prisma :: imprese_associate_utenti :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: utenti :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; username) => { "username" } ; (@ field_serde_name ; password) => { "password" } ; (@ field_serde_name ; nome) => { "nome" } ; (@ field_serde_name ; cognome) => { "cognome" } ; (@ field_serde_name ; impresa_id) => { "impresa_id" } ; (@ field_serde_name ; utente) => { "utente" } ; (@ field_serde_name ; autorizzazione) => { "autorizzazione" } ; (@ field_serde_name ; primo_login) => { "primo_login" } ; (@ field_serde_name ; super_utente) => { "super_utente" } ; (@ field_serde_name ; impresa) => { "impresa" } ; (@ field_serde_name ; settimanali) => { "settimanali" } ; (@ field_serde_name ; imprese_associate) => { "imprese_associate" } ; }
    pub use _include_utenti as include;
    pub enum IncludeParam {
        Id(id::Include),
        Username(username::Include),
        Password(password::Include),
        Nome(nome::Include),
        Cognome(cognome::Include),
        ImpresaId(impresa_id::Include),
        Utente(utente::Include),
        Autorizzazione(autorizzazione::Include),
        PrimoLogin(primo_login::Include),
        SuperUtente(super_utente::Include),
        Impresa(impresa::Include),
        Settimanali(settimanali::Include),
        ImpreseAssociate(imprese_associate::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Username(data) => data.to_selection(),
                Self::Password(data) => data.to_selection(),
                Self::Nome(data) => data.to_selection(),
                Self::Cognome(data) => data.to_selection(),
                Self::ImpresaId(data) => data.to_selection(),
                Self::Utente(data) => data.to_selection(),
                Self::Autorizzazione(data) => data.to_selection(),
                Self::PrimoLogin(data) => data.to_selection(),
                Self::SuperUtente(data) => data.to_selection(),
                Self::Impresa(data) => data.to_selection(),
                Self::Settimanali(data) => data.to_selection(),
                Self::ImpreseAssociate(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_utenti { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: utenti struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "username")] pub username : String , # [serde (rename = "password")] pub password : String , # [serde (rename = "nome")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub nome : Option < String > , # [serde (rename = "cognome")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub cognome : Option < String > , # [serde (rename = "impresa_id")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub impresa_id : Option < i32 > , # [serde (rename = "utente")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub utente : Option < String > , # [serde (rename = "autorizzazione")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub autorizzazione : Option < bool > , # [serde (rename = "primo_login")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub primo_login : Option < bool > , # [serde (rename = "super_utente")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub super_utente : Option < bool > } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_utenti as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: i32,
        #[serde(rename = "username")]
        pub username: String,
        #[serde(rename = "password")]
        pub password: String,
        #[serde(rename = "nome")]
        pub nome: Option<String>,
        #[serde(rename = "cognome")]
        pub cognome: Option<String>,
        #[serde(rename = "impresa_id")]
        pub impresa_id: Option<i32>,
        #[serde(rename = "utente")]
        pub utente: Option<String>,
        #[serde(rename = "autorizzazione")]
        pub autorizzazione: Option<bool>,
        #[serde(rename = "primo_login")]
        pub primo_login: Option<bool>,
        #[serde(rename = "super_utente")]
        pub super_utente: Option<bool>,
        #[serde(
            rename = "impresa",
            default,
            skip_serializing_if = "Option::is_none",
            with = "prisma_client_rust::serde::double_option"
        )]
        pub impresa: Option<Option<Box<super::imprese::Data>>>,
        #[serde(rename = "settimanali")]
        pub settimanali: Option<Vec<super::settimanale::Data>>,
        #[serde(rename = "imprese_associate")]
        pub imprese_associate: Option<Vec<super::imprese_associate_utenti::Data>>,
    }
    impl Data {
        pub fn impresa(
            &self,
        ) -> Result<Option<&super::imprese::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.impresa
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(impresa),
                ))
                .map(|v| v.as_ref().map(|v| v.as_ref()))
        }
        pub fn settimanali(
            &self,
        ) -> Result<&Vec<super::settimanale::Data>, ::prisma_client_rust::RelationNotFetchedError>
        {
            self.settimanali
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(
                    stringify!(settimanali),
                ))
        }
        pub fn imprese_associate(
            &self,
        ) -> Result<
            &Vec<super::imprese_associate_utenti::Data>,
            ::prisma_client_rust::RelationNotFetchedError,
        > {
            self.imprese_associate.as_ref().ok_or(
                ::prisma_client_rust::RelationNotFetchedError::new(stringify!(imprese_associate)),
            )
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        Impresa(super::imprese::UniqueArgs),
        Settimanali(super::settimanale::ManyArgs),
        ImpreseAssociate(super::imprese_associate_utenti::ManyArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Impresa(args) => {
                    let mut selections = < super :: imprese :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
                    selections.extend(
                        args.with_params
                            .into_iter()
                            .map(Into::<::prisma_client_rust::Selection>::into),
                    );
                    ::prisma_client_rust::Selection::new(impresa::NAME, None, [], selections)
                }
                Self::Settimanali(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: settimanale :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        settimanali::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
                Self::ImpreseAssociate(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections . extend (< super :: imprese_associate_utenti :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
                    ::prisma_client_rust::Selection::new(
                        imprese_associate::NAME,
                        None,
                        arguments,
                        nested_selections,
                    )
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(i32),
        IncrementId(i32),
        DecrementId(i32),
        MultiplyId(i32),
        DivideId(i32),
        SetUsername(String),
        SetPassword(String),
        SetNome(Option<String>),
        SetCognome(Option<String>),
        SetImpresaId(Option<i32>),
        IncrementImpresaId(i32),
        DecrementImpresaId(i32),
        MultiplyImpresaId(i32),
        DivideImpresaId(i32),
        SetUtente(Option<String>),
        SetAutorizzazione(Option<bool>),
        SetPrimoLogin(Option<bool>),
        SetSuperUtente(Option<bool>),
        ConnectImpresa(super::imprese::UniqueWhereParam),
        DisconnectImpresa,
        ConnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        DisconnectSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        SetSettimanali(Vec<super::settimanale::UniqueWhereParam>),
        ConnectImpreseAssociate(Vec<super::imprese_associate_utenti::UniqueWhereParam>),
        DisconnectImpreseAssociate(Vec<super::imprese_associate_utenti::UniqueWhereParam>),
        SetImpreseAssociate(Vec<super::imprese_associate_utenti::UniqueWhereParam>),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetUsername(value) => (
                    username::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetPassword(value) => (
                    password::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetNome(value) => (
                    nome::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetCognome(value) => (
                    cognome::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::IncrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideImpresaId(value) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetUtente(value) => (
                    utente::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetAutorizzazione(value) => (
                    autorizzazione::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::Boolean(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetPrimoLogin(value) => (
                    primo_login::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::Boolean(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetSuperUtente(value) => (
                    super_utente::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::Boolean(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::ConnectImpresa(where_param) => (
                    impresa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::imprese::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectImpresa => (
                    impresa::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::Boolean(true),
                    )]),
                ),
                SetParam::ConnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetSettimanali(where_params) => (
                    settimanali::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::settimanale::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectImpreseAssociate(where_params) => (
                    imprese_associate::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_associate_utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectImpreseAssociate(where_params) => (
                    imprese_associate::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_associate_utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetImpreseAssociate(where_params) => (
                    imprese_associate::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::imprese_associate_utenti::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(i32),
        Username(String),
        Password(String),
        Nome(Option<String>),
        Cognome(Option<String>),
        ImpresaId(Option<i32>),
        Utente(Option<String>),
        Autorizzazione(Option<bool>),
        PrimoLogin(Option<bool>),
        SuperUtente(Option<bool>),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Username(value) => Self::SetUsername(value),
                UncheckedSetParam::Password(value) => Self::SetPassword(value),
                UncheckedSetParam::Nome(value) => Self::SetNome(value),
                UncheckedSetParam::Cognome(value) => Self::SetCognome(value),
                UncheckedSetParam::ImpresaId(value) => Self::SetImpresaId(value),
                UncheckedSetParam::Utente(value) => Self::SetUtente(value),
                UncheckedSetParam::Autorizzazione(value) => Self::SetAutorizzazione(value),
                UncheckedSetParam::PrimoLogin(value) => Self::SetPrimoLogin(value),
                UncheckedSetParam::SuperUtente(value) => Self::SetSuperUtente(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Username(::prisma_client_rust::Direction),
        Password(::prisma_client_rust::Direction),
        Nome(::prisma_client_rust::Direction),
        Cognome(::prisma_client_rust::Direction),
        ImpresaId(::prisma_client_rust::Direction),
        Utente(::prisma_client_rust::Direction),
        Autorizzazione(::prisma_client_rust::Direction),
        PrimoLogin(::prisma_client_rust::Direction),
        SuperUtente(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Username(direction) => (
                    username::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Password(direction) => (
                    password::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Nome(direction) => (
                    nome::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Cognome(direction) => (
                    cognome::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ImpresaId(direction) => (
                    impresa_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Utente(direction) => (
                    utente::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Autorizzazione(direction) => (
                    autorizzazione::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::PrimoLogin(direction) => (
                    primo_login::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::SuperUtente(direction) => (
                    super_utente::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::IntFilter),
        Username(_prisma::read_filters::StringFilter),
        Password(_prisma::read_filters::StringFilter),
        Nome(_prisma::read_filters::StringNullableFilter),
        Cognome(_prisma::read_filters::StringNullableFilter),
        ImpresaId(_prisma::read_filters::IntNullableFilter),
        Utente(_prisma::read_filters::StringNullableFilter),
        Autorizzazione(_prisma::read_filters::BoolNullableFilter),
        PrimoLogin(_prisma::read_filters::BoolNullableFilter),
        SuperUtente(_prisma::read_filters::BoolNullableFilter),
        ImpresaIsNull,
        ImpresaIs(Vec<super::imprese::WhereParam>),
        ImpresaIsNot(Vec<super::imprese::WhereParam>),
        SettimanaliSome(Vec<super::settimanale::WhereParam>),
        SettimanaliEvery(Vec<super::settimanale::WhereParam>),
        SettimanaliNone(Vec<super::settimanale::WhereParam>),
        ImpreseAssociateSome(Vec<super::imprese_associate_utenti::WhereParam>),
        ImpreseAssociateEvery(Vec<super::imprese_associate_utenti::WhereParam>),
        ImpreseAssociateNone(Vec<super::imprese_associate_utenti::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Username(value) => (username::NAME, value.into()),
                Self::Password(value) => (password::NAME, value.into()),
                Self::Nome(value) => (nome::NAME, value.into()),
                Self::Cognome(value) => (cognome::NAME, value.into()),
                Self::ImpresaId(value) => (impresa_id::NAME, value.into()),
                Self::Utente(value) => (utente::NAME, value.into()),
                Self::Autorizzazione(value) => (autorizzazione::NAME, value.into()),
                Self::PrimoLogin(value) => (primo_login::NAME, value.into()),
                Self::SuperUtente(value) => (super_utente::NAME, value.into()),
                Self::ImpresaIsNull => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Value(
                        ::prisma_client_rust::PrismaValue::Null,
                    ),
                ),
                Self::ImpresaIs(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpresaIsNot(where_params) => (
                    impresa::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliSome(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliEvery(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::SettimanaliNone(where_params) => (
                    settimanali::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseAssociateSome(where_params) => (
                    imprese_associate::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseAssociateEvery(where_params) => (
                    imprese_associate::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ImpreseAssociateNone(where_params) => (
                    imprese_associate::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        UsernameEquals(String),
        IdEquals(i32),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::UsernameEquals(value) => {
                    Self::Username(_prisma::read_filters::StringFilter::Equals(value))
                }
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::IntFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(username::NAME),
                ::prisma_client_rust::sel(password::NAME),
                ::prisma_client_rust::sel(nome::NAME),
                ::prisma_client_rust::sel(cognome::NAME),
                ::prisma_client_rust::sel(impresa_id::NAME),
                ::prisma_client_rust::sel(utente::NAME),
                ::prisma_client_rust::sel(autorizzazione::NAME),
                ::prisma_client_rust::sel(primo_login::NAME),
                ::prisma_client_rust::sel(super_utente::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            username: String,
            password: String,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([username::set(username), password::set(password)]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            username: String,
            password: String,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([username::set(username), password::set(password)]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(String, String, Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(username, password, mut _params)| {
                    _params.extend([username::set(username), password::set(password)]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (username, password, mut _params): (String, String, Vec<SetParam>),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([username::set(username), password::set(password)]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
    }
}
pub mod _prisma {
    pub struct PrismaClientBuilder {
        url: Option<String>,
        action_notifier: ::prisma_client_rust::ActionNotifier,
    }
    impl PrismaClientBuilder {
        fn new() -> Self {
            Self {
                url: None,
                action_notifier: ::prisma_client_rust::ActionNotifier::new(),
            }
        }
        pub fn with_url(mut self, url: String) -> Self {
            self.url = Some(url);
            self
        }
        pub async fn build(self) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
            let internals = ::prisma_client_rust::PrismaClientInternals::new(
                self.url,
                self.action_notifier,
                super::DATAMODEL_STR,
            )
            .await?;
            Ok(PrismaClient(internals))
        }
    }
    pub struct PrismaClient(::prisma_client_rust::PrismaClientInternals);
    impl ::std::fmt::Debug for PrismaClient {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("PrismaClient").finish()
        }
    }
    impl PrismaClient {
        pub fn _builder() -> PrismaClientBuilder {
            PrismaClientBuilder::new()
        }
        pub fn _query_raw<T: ::prisma_client_rust::Data>(
            &self,
            query: ::prisma_client_rust::Raw,
        ) -> ::prisma_client_rust::QueryRaw<T> {
            ::prisma_client_rust::QueryRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub fn _execute_raw(
            &self,
            query: ::prisma_client_rust::Raw,
        ) -> ::prisma_client_rust::ExecuteRaw {
            ::prisma_client_rust::ExecuteRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub async fn _batch<
            'batch,
            T: ::prisma_client_rust::BatchContainer<'batch, Marker>,
            Marker,
        >(
            &self,
            queries: T,
        ) -> ::prisma_client_rust::Result<
            <T as ::prisma_client_rust::BatchContainer<'batch, Marker>>::ReturnType,
        > {
            ::prisma_client_rust::batch(queries, &self.0).await
        }
        pub fn _transaction(&self) -> ::prisma_client_rust::TransactionBuilder<Self> {
            ::prisma_client_rust::TransactionBuilder::_new(self, &self.0)
        }
        pub async fn _migrate_deploy(
            &self,
        ) -> Result<(), ::prisma_client_rust::migrations::MigrateDeployError> {
            let res = ::prisma_client_rust::migrations::migrate_deploy(
                super::DATAMODEL_STR,
                super::MIGRATIONS_DIR,
                &self.0.url(),
            )
            .await;
            ::prisma_client_rust::tokio::time::sleep(core::time::Duration::from_millis(1)).await;
            res
        }
        pub async fn _migrate_resolve(
            &self,
            migration: &str,
        ) -> Result<(), ::prisma_client_rust::migrations::MigrateResolveError> {
            ::prisma_client_rust::migrations::migrate_resolve(
                migration,
                super::DATAMODEL_STR,
                super::MIGRATIONS_DIR,
                &self.0.url(),
            )
            .await
        }
        pub fn _db_push(&self) -> ::prisma_client_rust::migrations::DbPush {
            ::prisma_client_rust::migrations::db_push(super::DATAMODEL_STR, &self.0.url())
        }
        pub fn autovetture(&self) -> super::autovetture::Actions {
            super::autovetture::Actions { client: &self.0 }
        }
        pub fn dipendenti(&self) -> super::dipendenti::Actions {
            super::dipendenti::Actions { client: &self.0 }
        }
        pub fn imprese_associate_utenti(&self) -> super::imprese_associate_utenti::Actions {
            super::imprese_associate_utenti::Actions { client: &self.0 }
        }
        pub fn imprese_collegate(&self) -> super::imprese_collegate::Actions {
            super::imprese_collegate::Actions { client: &self.0 }
        }
        pub fn imprese(&self) -> super::imprese::Actions {
            super::imprese::Actions { client: &self.0 }
        }
        pub fn mansione(&self) -> super::mansione::Actions {
            super::mansione::Actions { client: &self.0 }
        }
        pub fn mezzi(&self) -> super::mezzi::Actions {
            super::mezzi::Actions { client: &self.0 }
        }
        pub fn opere(&self) -> super::opere::Actions {
            super::opere::Actions { client: &self.0 }
        }
        pub fn qualifica(&self) -> super::qualifica::Actions {
            super::qualifica::Actions { client: &self.0 }
        }
        pub fn settimanale(&self) -> super::settimanale::Actions {
            super::settimanale::Actions { client: &self.0 }
        }
        pub fn tipi_proprieta(&self) -> super::tipi_proprieta::Actions {
            super::tipi_proprieta::Actions { client: &self.0 }
        }
        pub fn utenti(&self) -> super::utenti::Actions {
            super::utenti::Actions { client: &self.0 }
        }
    }
    impl ::prisma_client_rust::PrismaClient for PrismaClient {
        fn internals(&self) -> &::prisma_client_rust::PrismaClientInternals {
            &self.0
        }
        fn internals_mut(&mut self) -> &mut ::prisma_client_rust::PrismaClientInternals {
            &mut self.0
        }
        fn with_tx_id(&self, tx_id: Option<::prisma_client_rust::query_core::TxId>) -> Self {
            Self(self.0.with_tx_id(tx_id))
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum AutovettureScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "descrizione")]
        Descrizione,
        #[serde(rename = "modello")]
        Modello,
        #[serde(rename = "targa")]
        Targa,
        #[serde(rename = "tipo_proprieta")]
        TipoProprieta,
        #[serde(rename = "proprieta")]
        Proprieta,
        #[serde(rename = "impresa_id")]
        ImpresaId,
        #[serde(rename = "data_dimissioni")]
        DataDimissioni,
        #[serde(rename = "rfid1")]
        Rfid1,
        #[serde(rename = "rfid2")]
        Rfid2,
    }
    impl ToString for AutovettureScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Descrizione => "descrizione".to_string(),
                Self::Modello => "modello".to_string(),
                Self::Targa => "targa".to_string(),
                Self::TipoProprieta => "tipo_proprieta".to_string(),
                Self::Proprieta => "proprieta".to_string(),
                Self::ImpresaId => "impresa_id".to_string(),
                Self::DataDimissioni => "data_dimissioni".to_string(),
                Self::Rfid1 => "rfid1".to_string(),
                Self::Rfid2 => "rfid2".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum DipendentiScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "nome")]
        Nome,
        #[serde(rename = "cognome")]
        Cognome,
        #[serde(rename = "matricola")]
        Matricola,
        #[serde(rename = "data_di_nascita")]
        DataDiNascita,
        #[serde(rename = "luogo_di_nascita")]
        LuogoDiNascita,
        #[serde(rename = "codice_fiscale")]
        CodiceFiscale,
        #[serde(rename = "impresa_id")]
        ImpresaId,
        #[serde(rename = "qualifica_id")]
        QualificaId,
        #[serde(rename = "mansione_id")]
        MansioneId,
        #[serde(rename = "data_dimissioni")]
        DataDimissioni,
        #[serde(rename = "rfid1")]
        Rfid1,
        #[serde(rename = "rfid2")]
        Rfid2,
    }
    impl ToString for DipendentiScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Nome => "nome".to_string(),
                Self::Cognome => "cognome".to_string(),
                Self::Matricola => "matricola".to_string(),
                Self::DataDiNascita => "data_di_nascita".to_string(),
                Self::LuogoDiNascita => "luogo_di_nascita".to_string(),
                Self::CodiceFiscale => "codice_fiscale".to_string(),
                Self::ImpresaId => "impresa_id".to_string(),
                Self::QualificaId => "qualifica_id".to_string(),
                Self::MansioneId => "mansione_id".to_string(),
                Self::DataDimissioni => "data_dimissioni".to_string(),
                Self::Rfid1 => "rfid1".to_string(),
                Self::Rfid2 => "rfid2".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum ImpreseAssociateUtentiScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "utente_id")]
        UtenteId,
        #[serde(rename = "impresa_id")]
        ImpresaId,
    }
    impl ToString for ImpreseAssociateUtentiScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::UtenteId => "utente_id".to_string(),
                Self::ImpresaId => "impresa_id".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum ImpreseCollegateScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "impresa_id")]
        ImpresaId,
        #[serde(rename = "imprese_collegata_id")]
        ImpreseCollegataId,
        #[serde(rename = "ruolo_impresa")]
        RuoloImpresa,
    }
    impl ToString for ImpreseCollegateScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::ImpresaId => "impresa_id".to_string(),
                Self::ImpreseCollegataId => "imprese_collegata_id".to_string(),
                Self::RuoloImpresa => "ruolo_impresa".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum ImpreseScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "ragione_sociale")]
        RagioneSociale,
        #[serde(rename = "indirizzo")]
        Indirizzo,
        #[serde(rename = "partita_iva")]
        PartitaIva,
    }
    impl ToString for ImpreseScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::RagioneSociale => "ragione_sociale".to_string(),
                Self::Indirizzo => "indirizzo".to_string(),
                Self::PartitaIva => "partita_iva".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum MansioneScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "descrizione")]
        Descrizione,
    }
    impl ToString for MansioneScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Descrizione => "descrizione".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum MezziScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "descrizione")]
        Descrizione,
        #[serde(rename = "modello")]
        Modello,
        #[serde(rename = "tipo_proprieta")]
        TipoProprieta,
        #[serde(rename = "proprieta")]
        Proprieta,
        #[serde(rename = "impresa_id")]
        ImpresaId,
        #[serde(rename = "data_dimissioni")]
        DataDimissioni,
        #[serde(rename = "rfid1")]
        Rfid1,
        #[serde(rename = "rfid2")]
        Rfid2,
    }
    impl ToString for MezziScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Descrizione => "descrizione".to_string(),
                Self::Modello => "modello".to_string(),
                Self::TipoProprieta => "tipo_proprieta".to_string(),
                Self::Proprieta => "proprieta".to_string(),
                Self::ImpresaId => "impresa_id".to_string(),
                Self::DataDimissioni => "data_dimissioni".to_string(),
                Self::Rfid1 => "rfid1".to_string(),
                Self::Rfid2 => "rfid2".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum OpereScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "descrizione")]
        Descrizione,
    }
    impl ToString for OpereScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Descrizione => "descrizione".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum QualificaScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "descrizione")]
        Descrizione,
    }
    impl ToString for QualificaScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Descrizione => "descrizione".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum QueryMode {
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "insensitive")]
        Insensitive,
    }
    impl ToString for QueryMode {
        fn to_string(&self) -> String {
            match self {
                Self::Default => "default".to_string(),
                Self::Insensitive => "insensitive".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum SettimanaleScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "data_settimanale")]
        DataSettimanale,
        #[serde(rename = "utente_id")]
        UtenteId,
        #[serde(rename = "luogo_di_nascita")]
        LuogoDiNascita,
        #[serde(rename = "data_di_nascita")]
        DataDiNascita,
        #[serde(rename = "tipo_proprieta")]
        TipoProprieta,
        #[serde(rename = "proprieta")]
        Proprieta,
        #[serde(rename = "impresa_id")]
        ImpresaId,
        #[serde(rename = "opera_id")]
        OperaId,
        #[serde(rename = "mezzo_id")]
        MezzoId,
        #[serde(rename = "autovettura_id")]
        AutovetturaId,
        #[serde(rename = "matricola")]
        Matricola,
        #[serde(rename = "targa")]
        Targa,
    }
    impl ToString for SettimanaleScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::DataSettimanale => "data_settimanale".to_string(),
                Self::UtenteId => "utente_id".to_string(),
                Self::LuogoDiNascita => "luogo_di_nascita".to_string(),
                Self::DataDiNascita => "data_di_nascita".to_string(),
                Self::TipoProprieta => "tipo_proprieta".to_string(),
                Self::Proprieta => "proprieta".to_string(),
                Self::ImpresaId => "impresa_id".to_string(),
                Self::OperaId => "opera_id".to_string(),
                Self::MezzoId => "mezzo_id".to_string(),
                Self::AutovetturaId => "autovettura_id".to_string(),
                Self::Matricola => "matricola".to_string(),
                Self::Targa => "targa".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum SortOrder {
        #[serde(rename = "asc")]
        Asc,
        #[serde(rename = "desc")]
        Desc,
    }
    impl ToString for SortOrder {
        fn to_string(&self) -> String {
            match self {
                Self::Asc => "asc".to_string(),
                Self::Desc => "desc".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum TipiProprietaScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "descrizione")]
        Descrizione,
    }
    impl ToString for TipiProprietaScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Descrizione => "descrizione".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum TransactionIsolationLevel {
        #[serde(rename = "ReadUncommitted")]
        ReadUncommitted,
        #[serde(rename = "ReadCommitted")]
        ReadCommitted,
        #[serde(rename = "RepeatableRead")]
        RepeatableRead,
        #[serde(rename = "Serializable")]
        Serializable,
    }
    impl ToString for TransactionIsolationLevel {
        fn to_string(&self) -> String {
            match self {
                Self::ReadUncommitted => "ReadUncommitted".to_string(),
                Self::ReadCommitted => "ReadCommitted".to_string(),
                Self::RepeatableRead => "RepeatableRead".to_string(),
                Self::Serializable => "Serializable".to_string(),
            }
        }
    }
    impl ::prisma_client_rust::TransactionIsolationLevel for TransactionIsolationLevel {}
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum UtentiScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "username")]
        Username,
        #[serde(rename = "password")]
        Password,
        #[serde(rename = "nome")]
        Nome,
        #[serde(rename = "cognome")]
        Cognome,
        #[serde(rename = "impresa_id")]
        ImpresaId,
        #[serde(rename = "utente")]
        Utente,
        #[serde(rename = "autorizzazione")]
        Autorizzazione,
        #[serde(rename = "primo_login")]
        PrimoLogin,
        #[serde(rename = "super_utente")]
        SuperUtente,
    }
    impl ToString for UtentiScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Username => "username".to_string(),
                Self::Password => "password".to_string(),
                Self::Nome => "nome".to_string(),
                Self::Cognome => "cognome".to_string(),
                Self::ImpresaId => "impresa_id".to_string(),
                Self::Utente => "utente".to_string(),
                Self::Autorizzazione => "autorizzazione".to_string(),
                Self::PrimoLogin => "primo_login".to_string(),
                Self::SuperUtente => "super_utente".to_string(),
            }
        }
    }
    pub mod read_filters {
        #[derive(Clone)]
        pub enum IntFilter {
            Equals(i32),
            InVec(Vec<i32>),
            NotInVec(Vec<i32>),
            Lt(i32),
            Lte(i32),
            Gt(i32),
            Gte(i32),
            Not(i32),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for IntFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            ::prisma_client_rust::PrismaValue::Int(value as i64),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum IntNullableFilter {
            Equals(Option<i32>),
            InVec(Vec<i32>),
            NotInVec(Vec<i32>),
            Lt(i32),
            Lte(i32),
            Gt(i32),
            Gte(i32),
            Not(Option<i32>),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for IntNullableFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            value
                                .map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64))
                                .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        value
                            .map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64))
                            .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum StringFilter {
            Equals(String),
            InVec(Vec<String>),
            NotInVec(Vec<String>),
            Lt(String),
            Lte(String),
            Gt(String),
            Gte(String),
            Contains(String),
            StartsWith(String),
            EndsWith(String),
            Mode(super::super::QueryMode),
            Not(String),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for StringFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Contains(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "contains".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::StartsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "startsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::EndsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "endsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::Mode(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "mode".to_string(),
                            ::prisma_client_rust::PrismaValue::Enum(value.to_string()),
                        )])
                    }
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum StringNullableFilter {
            Equals(Option<String>),
            InVec(Vec<String>),
            NotInVec(Vec<String>),
            Lt(String),
            Lte(String),
            Gt(String),
            Gte(String),
            Contains(String),
            StartsWith(String),
            EndsWith(String),
            Mode(super::super::QueryMode),
            Not(Option<String>),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for StringNullableFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            value
                                .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Contains(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "contains".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::StartsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "startsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::EndsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "endsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::Mode(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "mode".to_string(),
                            ::prisma_client_rust::PrismaValue::Enum(value.to_string()),
                        )])
                    }
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        value
                            .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                            .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum DateTimeFilter {
            Equals(
                ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
            ),
            InVec(
                Vec<
                    ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                >,
            ),
            NotInVec(
                Vec<
                    ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                >,
            ),
            Lt(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Lte(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Gt(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Gte(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Not(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for DateTimeFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            ::prisma_client_rust::PrismaValue::DateTime(value),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::DateTime(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::DateTime(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum DateTimeNullableFilter {
            Equals(
                Option<
                    ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                >,
            ),
            InVec(
                Vec<
                    ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                >,
            ),
            NotInVec(
                Vec<
                    ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                >,
            ),
            Lt(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Lte(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Gt(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Gte(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
            Not(
                Option<
                    ::prisma_client_rust::chrono::DateTime<
                        ::prisma_client_rust::chrono::FixedOffset,
                    >,
                >,
            ),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for DateTimeNullableFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            value
                                .map(|value| ::prisma_client_rust::PrismaValue::DateTime(value))
                                .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::DateTime(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::DateTime(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::DateTime(value),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        value
                            .map(|value| ::prisma_client_rust::PrismaValue::DateTime(value))
                            .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum BoolNullableFilter {
            Equals(Option<bool>),
            Not(Option<bool>),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for BoolNullableFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            value
                                .map(|value| ::prisma_client_rust::PrismaValue::Boolean(value))
                                .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                        )])
                    }
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        value
                            .map(|value| ::prisma_client_rust::PrismaValue::Boolean(value))
                            .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                    )]),
                }
            }
        }
    }
}
pub use _prisma::*;
